{"title":"intermediate json", "BBEs":[{"bbeName":"alternate-wait", "resources":[{"tag":"wait", "balFileName":"alternate_wait.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\n\n\/\/ Fetch from A or B.\nfunction altFetch(string urlA, string urlB) returns string|error {\n\n    worker A returns string|error {\n        return fetch(urlA);\n    }\n\n    worker B returns string|error {\n        return fetch(urlB);\n    }\n\n    \/\/ The `wait` action can be used to wait for one of several workers.\n    \/\/ This function will return as soon as the return value of either\n    \/\/ `A` or `B` is available.\n    return wait A | B;\n\n}\n\npublic function main() returns error? {\n    string res = \n        check altFetch(\"https:\/\/postman-echo.com\/get?lang=ballerina\",\n                       \"https:\/\/postman-echo.com\/get?greeting=hello\");\n    io:println(res);\n}\n\nfunction fetch(string url) returns string|error {\n    http:Client cl = check new (url);\n    map<json> payload = check cl->get(\"\");\n    return payload[\"args\"].toString();\n}", "outputFileName":"alternate_wait.out", "output":"bal run alternate_wait.bal\n{\"lang\":\"ballerina\"}"}], "description":"// The `wait` action can be used to wait for one of several workers.", "metatags":"description: This BBE demonstrates the alternate wait action\nkeywords: ballerina, ballerina by example, bbe, worker, alternate wait"}, {"bbeName":"annotations", "resources":[{"tag":"annotations", "balFileName":"annotations.bal", "bal":"import ballerina\/io;\n\/\/ The `@display` annotation applies to the transform function.\n@display {\n    label: \"Transform\",\n    iconPath: \"transform.png\"\n}\npublic function transform(string s) returns string {\n   return s.toUpperAscii();\n}\n\npublic function main() {\n    \/\/ The `@strand` annotation applies to the `start` action.\n    future<int> fut = @strand { thread: \"any\" } start foo();\n\n    int|error x = wait fut;\n    io:println(x);\n}\n\npublic function foo() returns int {\n    return 10;\n}", "outputFileName":"annotations.out", "output":"bal run annotations.bal\n10"}], "description":"\/\/ Annotations start with `@tag` and they come before what they apply to.\n\/\/ Unprefixed tags refer to standard platform-defined annotations and\n\/\/ Prefixed tags refer to annotations declared in modules.\n\/\/ `@tag` can be followed by record constructor expression.\n", "metatags":"description: This BBE demonstrates how to use annotations in Ballerina\nkeywords:  ballerina, ballerina by example, bbe, annotations,"}, {"bbeName":"any-type", "resources":[{"tag":"type", "balFileName":"any_type.bal", "bal":"import ballerina\/io;\n\n\/\/ A variable of type `any` can hold any value except an error.\nany x = 1;\n\npublic function main() {\n    \/\/ Can cast `any` to specific type.\n    int n = <int>x;\n    \n    io:println(n);\n\n    \/\/ Langlib lang.value module contains functions that apply to multiple basic types.\n    \/\/ Can convert to string.\n    string s = x.toString();\n\n    io:println(s == \"1\");\n\n    \/\/ Can test its type with the `is` operator.\n    float f = x is int|float ? <float>x : 0.0;\n\n    io:println(f);\n}", "outputFileName":"any_type.out", "output":"bal run any_type.bal\n1\ntrue\n1.0"}], "description":"\/\/ `any` means any value except an error.\n\/\/ Equivalent to a union of all non-error basic types.\n\/\/ Use `any|error` for absolutely any value.\n\/\/ Langlib lang.value module contains functions that apply to multiple basic types.", "metatags":"description: This BBE demonstrates the any type in Ballerina\nkeywords:  ballerina, ballerina by example, bbe, any, any type"}, {"bbeName":"anydata-type", "resources":[{"tag":"type", "balFileName":"anydata_type.bal", "bal":"import ballerina\/io;\n\nanydata x1 = [1, \"string\", true];\n\/\/ `x1.clone()` returns a deep copy with the same mutability.\nanydata x2 = x1.clone();\n\n\/\/ Checks deep equality.\nboolean eq = (x1 == x2);\n\npublic function main() {\n    io:println(x2);\n    io:println(eq);\n}", "outputFileName":"anydata_type.out", "output":"bal run anydata_type.bal\n[1,\"string\",true]\ntrue"}], "description":"\/\/ The type for plain data is `anydata`. The subtype of `any`. `==` and `!=` operators tests for deep equality.\n\/\/ `x.clone()` returns a deep copy, with the same mutability. `x.cloneReadOnly()` returns a deep copy that is\n\/\/ immutable. Ballerina syntax uses `ReadOnly` to mean immutable. Both `x.clone` and `cloneReadOnly()` do\n\/\/ not copy immutable parts of `x`. `const` structures are allowed. Equality and cloning handle cycles.", "metatags":"description: This BBE demonstrates anydata type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, anydata type"}, {"bbeName":"arrays", "resources":[{"tag":"arrays", "balFileName":"arrays.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    int[] v = [1, 2, 3];\n\n    \/\/ `v[i]` does indexed access.\n    int n = v[0];\n\n    io:println(n);\n\n    \/\/ `v[i]` is an `lvalue`.\n    v[3] = 4;\n\n    \/\/ `len` will be 3.\n    int len = v.length();\n    io:println(len);\n}", "outputFileName":"arrays.out", "output":"bal run arrays.bal\n1\n4"}], "description":"\/\/ `T[]` is an `array` of `T`. Arrays are mutable. `==` and `!=` on arrays is deep: two arrays are\n\/\/ equal if they have the same members in the same order. Ordering is lexicographical based on the\n\/\/ ordering of the members. Langlib `arr.length()` function gets the length; `arr.setLength(n)` sets the length.", "metatags":"description: This BBE demonstrates arrays in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, arrays, mutable list"}, {"bbeName":"asynchronous-function-calls", "resources":[{"tag":"calls", "balFileName":"asynchronous_function_calls.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    \/\/ `start` calls a function asynchronously.\n    future<int> fut = start foo();\n\n    \/\/ `wait` for `future<T>` gives `T|error`.\n    int|error x = wait fut;\n\n    io:println(x);\n}\n\nfunction foo() returns int {\n    return 10;\n}", "outputFileName":"asynchronous_function_calls.out", "output":"bal run asynchronous_function_calls.bal\n10"}], "description":"\/\/ start calls a function asynchronously and the function runs on a separate logical thread (\"strand\"): cooperatively multitasked by default\n\/\/ Result will be of type `future<T>` and `future` is a separate basic type.\n\/\/ Waiting for the same future more than once gives an error.\n\/\/ Use `f.cancel()` to terminate a future.", "metatags":"description: This BBE demonstrates how to use start action to call a function asynchronouly.\nkeywords:  ballerina, ballerina by example, bbe, start, Asynchronous function call"}, {"bbeName":"aws-lambda-deployment", "resources":[{"tag":"deployment", "balFileName":"aws_lambda_deployment.bal", "bal":"import ballerinax\/awslambda;\nimport ballerina\/uuid;\nimport ballerina\/io;\n\n\/\/ The `@awslambda:Function` annotation marks a function to\n\/\/ generate an AWS Lambda function\n@awslambda:Function\npublic function echo(awslambda:Context ctx, json input) returns json {\n   return input;\n}\n\n@awslambda:Function\npublic function uuid(awslambda:Context ctx, json input) returns json {\n   return uuid:createType1AsString();\n}\n\n\/\/ The `awslambda:Context` object contains request execution\n\/\/ context information\n@awslambda:Function\npublic function ctxinfo(awslambda:Context ctx, json input) returns json|error {\n   json result = { RequestID: ctx.getRequestId(),\n                   DeadlineMS: ctx.getDeadlineMs(),\n                   InvokedFunctionArn: ctx.getInvokedFunctionArn(),\n                   TraceID: ctx.getTraceId(),\n                   RemainingExecTime: ctx.getRemainingExecutionTime() };\n   return result;\n}\n\n@awslambda:Function\npublic function notifySQS(awslambda:Context ctx, \n                          awslambda:SQSEvent event) returns json {\n    return event.Records[0].body;\n}\n\n@awslambda:Function\npublic function notifyS3(awslambda:Context ctx, \n                         awslambda:S3Event event) returns json {\n    return event.Records[0].s3.'object.key;\n}\n\n@awslambda:Function\npublic function notifyDynamoDB(awslambda:Context ctx, \n                               awslambda:DynamoDBEvent event) returns json {\n    return event.Records[0].dynamodb.Keys.toString();\n}\n\n@awslambda:Function\npublic function notifySES(awslambda:Context ctx, \n                          awslambda:SESEvent event) returns json {\n    return event.Records[0].ses.mail.commonHeaders.subject;\n}\n\n@awslambda:Function\npublic function apigwRequest(awslambda:Context ctx, \n                             awslambda:APIGatewayProxyRequest request) {\n    io:println(\"Path: \", request.path);\n}", "outputFileName":"aws_lambda_deployment.out", "output":"# Prerequisites: AWS CLI tools installation and configuration\n\n# Build the Ballerina program to generate the AWS Lambda functions\n$ bal build functions.bal\nCompiling source\n\tfunctions.bal\n\nGenerating executables\n\tfunctions.jar\n\t@awslambda:Function: echo, uuid, ctxinfo, notifySQS, notifyS3\n\n\tRun the following command to deploy each Ballerina AWS Lambda function:\n\taws lambda create-function --function-name $FUNCTION_NAME --zip-file fileb:\/\/aws-ballerina-lambda-functions.zip --handler functions.$FUNCTION_NAME --runtime provided --role $LAMBDA_ROLE_ARN --layers arn:aws:lambda:$REGION_ID:134633749276:layer:ballerina-jre11:6 --memory-size 512 --timeout 10\n\n\tRun the following command to re-deploy an updated Ballerina AWS Lambda function:\n\taws lambda update-function-code --function-name $FUNCTION_NAME --zip-file fileb:\/\/aws-ballerina-lambda-functions.zip\n\n# Execute the AWS CLI commands to create and publish the functions; and set your respective AWS $LAMBDA_ROLE_ARN, $REGION_ID, and $FUNCTION_NAME values; following are some examples:-\n$ aws lambda create-function --function-name echo --zip-file fileb:\/\/aws-ballerina-lambda-functions.zip --handler aws_lambda_deployment.echo --runtime provided --role arn:aws:iam::908363916111:role\/lambda-role\n --layers arn:aws:lambda:us-west-1:134633749276:layer:ballerina-jre11:6 --memory-size 512 --timeout 10\n$ aws lambda create-function --function-name uuid --zip-file fileb:\/\/aws-ballerina-lambda-functions.zip --handler aws_lambda_deployment.uuid --runtime provided --role arn:aws:iam::908363916111:role\/lambda-role\n --layers arn:aws:lambda:us-west-1:134633749276:layer:ballerina-jre11:6 --memory-size 512 --timeout 10\n$ aws lambda create-function --function-name ctxinfo --zip-file fileb:\/\/aws-ballerina-lambda-functions.zip --handler aws_lambda_deployment.ctxinfo --runtime provided --role arn:aws:iam::908363916111:role\/lambda-role\n --layers arn:aws:lambda:us-west-1:134633749276:layer:ballerina-jre11:6 --memory-size 512 --timeout 10\n\n\n# Invoke the functions\n$ echo '{\"MESSAGE\":\"HELLO\"}' > input.json\n$ aws lambda invoke --function-name echo --payload fileb:\/\/input.json echo-response.txt\n{\n    \"ExecutedVersion\": \"$LATEST\", \n    \"StatusCode\": 200\n}\n$ cat echo-response.txt \n{\"MESSAGE\":\"HELLO\"}\n\n$ aws lambda invoke --function-name uuid uuid-response.txt\n{\n    \"ExecutedVersion\": \"$LATEST\", \n    \"StatusCode\": 200\n}\n$ cat uuid-response.txt \n\"711cd328-1937-40cc-9078-c3628c6edb02\"\n\n$ aws lambda invoke --function-name ctxinfo ctxinfo-response.txt\n{\n    \"ExecutedVersion\": \"$LATEST\", \n    \"StatusCode\": 200\n}\n$ cat ctxinfo-response.txt \n{\"RequestID\":\"d55f7d06-f2ab-4b6e-8606-482607785a91\", \"DeadlineMS\":1548069389978, \"InvokedFunctionArn\":\"arn:aws:lambda:us-west-2:908363916138:function:ctxinfo\", \"TraceID\":\"Root=1-5c45aa03-f8aff4c9e24dc4fbf48f2990;Parent=17ad3b290def98fd;Sampled=0\", \"RemainingExecTime\":9946}"}], "description":"\/\/ AWS Lambda is an event driven, serverless computing platform.\n\/\/ Ballerina functions can be deployed in AWS Lambda by annotating\n\/\/ a Ballerina function with \"@awslambda:Function\", which should have\n\/\/ the function signature `function (awslambda:Context, json|EventType) returns json|error`.<br\/><br\/>\n\/\/ For more information, see the [AWS Lambda Deployment Guide](https:\/\/ballerina.io\/learn\/deployment\/aws-lambda\/).", "metatags":""}, {"bbeName":"azure-functions-deployment", "resources":[{"tag":"deployment", "balFileName":"azure_functions_deployment.bal", "bal":"import ballerina\/uuid;\nimport ballerinax\/azure_functions as af;\n\n\/\/ HTTP request\/response with no authentication\n@af:Function\npublic function hello(@af:HTTPTrigger { authLevel: \"anonymous\" }\n                      string payload)\n                      returns @af:HTTPOutput string|error {\n    return \"Hello, \" + payload + \"!\";\n}\n\n\/\/ HTTP request to add data to a queue\n@af:Function\npublic function fromHttpToQueue(af:Context ctx, \n            @af:HTTPTrigger af:HTTPRequest req, \n            @af:QueueOutput { queueName: \"queue1\" } af:StringOutputBinding msg) \n            returns @af:HTTPOutput af:HTTPBinding {\n    msg.value = req.body;\n    return { statusCode: 200, payload: \"Request: \" + req.toString() };\n}\n\n\/\/ A message put to a queue is copied to another queue\n@af:Function\npublic function fromQueueToQueue(af:Context ctx, \n        @af:QueueTrigger { queueName: \"queue2\" } string inMsg,\n        @af:QueueOutput { queueName: \"queue3\" } af:StringOutputBinding outMsg) {\n    ctx.log(\"In Message: \" + inMsg);\n    ctx.log(\"Metadata: \" + ctx.metadata.toString());\n    outMsg.value = inMsg;\n}\n\n\/\/ A blob added to a container is copied to a queue\n@af:Function\npublic function fromBlobToQueue(af:Context ctx, \n        @af:BlobTrigger { path: \"bpath1\/{name}\" } byte[] blobIn,\n        @af:BindingName  string name,\n        @af:QueueOutput { queueName: \"queue3\" } af:StringOutputBinding outMsg) \n        returns error? {\n    outMsg.value = \"Name: \" + name + \" Content: \" + blobIn.toString();\n}\n\n\/\/ HTTP request to read a blob value\n@af:Function\npublic function httpTriggerBlobInput(@af:HTTPTrigger af:HTTPRequest req, \n                    @af:BlobInput { path: \"bpath1\/{Query.name}\" }\n                    byte[]? blobIn)\n                    returns @af:HTTPOutput string {\n    int length = 0;\n    if blobIn is byte[] {\n        length = blobIn.length();\n    }\n    return \"Blob: \" + req.query[\"name\"].toString() + \" Length: \" + \n            length.toString() + \" Content: \" + blobIn.toString();\n}\n\n\/\/ HTTP request to add a new blob\n@af:Function\npublic function httpTriggerBlobOutput(@af:HTTPTrigger af:HTTPRequest req, \n        @af:BlobOutput { path: \"bpath1\/{Query.name}\" }\n            af:StringOutputBinding bb)\n        returns @af:HTTPOutput string|error {\n    bb.value = req.body;\n    return \"Blob: \" + req.query[\"name\"].toString() + \" Content: \" + \n            bb?.value.toString();\n}\n\n\/\/ HTTP request to add a new blob\n@af:Function\npublic function httpTriggerBlobOutput2(@af:HTTPTrigger af:HTTPRequest req,\n        @af:BlobOutput { path: \"bpath1\/{Query.name}\" } af:BytesOutputBinding bb)\n        returns @af:HTTPOutput string|error {\n    bb.value = [65, 66, 67, 97, 98];\n    return \"Blob: \" + req.query[\"name\"].toString() + \" Content: \" +\n            bb?.value.toString();\n}\n\n\/\/ Sending an SMS\n@af:Function\npublic function sendSMS(@af:HTTPTrigger af:HTTPRequest req, \n                        @af:TwilioSmsOutput { fromNumber: \"+12069845840\" } \n                                              af:TwilioSmsOutputBinding tb)\n                        returns @af:HTTPOutput string {\n    tb.to = req.query[\"to\"].toString();\n    tb.body = req.body.toString();\n    return \"Message - to: \" + tb?.to.toString() + \" body: \" +\n            tb?.body.toString();\n}\n\npublic type Person record {\n    string id;\n    string name;\n    string country;\n};\n\n\/\/ CosmosDB record trigger\n@af:Function\npublic function cosmosDBToQueue1(@af:CosmosDBTrigger { \n        connectionStringSetting: \"CosmosDBConnection\", databaseName: \"db1\",\n        collectionName: \"c1\" } Person[] req, \n        @af:QueueOutput { queueName: \"queue3\" } af:StringOutputBinding outMsg) {\n    outMsg.value = req.toString();\n}\n\n@af:Function\npublic function cosmosDBToQueue2(@af:CosmosDBTrigger { \n        connectionStringSetting: \"CosmosDBConnection\", databaseName: \"db1\", \n        collectionName: \"c2\" } json req,\n        @af:QueueOutput { queueName: \"queue3\" } af:StringOutputBinding outMsg) {\n    outMsg.value = req.toString();\n}\n\n\/\/ HTTP request to read CosmosDB records\n@af:Function\npublic function httpTriggerCosmosDBInput1(\n            @af:HTTPTrigger af:HTTPRequest httpReq, \n            @af:CosmosDBInput { connectionStringSetting: \"CosmosDBConnection\", \n                databaseName: \"db1\", collectionName: \"c1\", \n                id: \"{Query.id}\", partitionKey: \"{Query.country}\" } json dbReq)\n                returns @af:HTTPOutput string|error {\n    return dbReq.toString();\n}\n\n@af:Function\npublic function httpTriggerCosmosDBInput2(\n            @af:HTTPTrigger af:HTTPRequest httpReq, \n            @af:CosmosDBInput { connectionStringSetting: \"CosmosDBConnection\", \n                databaseName: \"db1\", collectionName: \"c1\", \n                id: \"{Query.id}\", partitionKey: \"{Query.country}\" }\n                      Person? dbReq)\n                returns @af:HTTPOutput string|error {\n    return dbReq.toString();\n}\n\n@af:Function\npublic function httpTriggerCosmosDBInput3(\n        @af:HTTPTrigger { route: \"c1\/{country}\" } af:HTTPRequest httpReq, \n        @af:CosmosDBInput { connectionStringSetting: \"CosmosDBConnection\", \n        databaseName: \"db1\", collectionName: \"c1\", \n        sqlQuery: \"select * from c1 where c1.country = {country}\" } \n        Person[] dbReq)\n        returns @af:HTTPOutput string|error {\n    return dbReq.toString();\n}\n\n\/\/ HTTP request to write records to CosmosDB\n@af:Function\npublic function httpTriggerCosmosDBOutput1(\n    @af:HTTPTrigger af:HTTPRequest httpReq, @af:HTTPOutput af:HTTPBinding hb) \n    returns @af:CosmosDBOutput { connectionStringSetting: \"CosmosDBConnection\", \n                                 databaseName: \"db1\", collectionName: \"c1\" }\n                                 json {\n    json entry = { id: uuid:createType1AsString(), name: \"Saman\",\n                    country: \"Sri Lanka\" };\n    hb.payload = \"Adding entry: \" + entry.toString();\n    return entry;\n}\n\n@af:Function\npublic function httpTriggerCosmosDBOutput2(\n        @af:HTTPTrigger af:HTTPRequest httpReq, \n        @af:HTTPOutput af:HTTPBinding hb) \n        returns @af:CosmosDBOutput { \n            connectionStringSetting: \"CosmosDBConnection\", \n            databaseName: \"db1\", collectionName: \"c1\" } json {\n    json entry = [{ id: uuid:createType1AsString(),\n                    name: \"John Doe A\", country: \"USA\" },\n                  { id: uuid:createType1AsString(),\n                    name: \"John Doe B\", country: \"USA\" }];\n    hb.payload = \"Adding entries: \" + entry.toString();\n    return entry;\n}\n\n@af:Function\npublic function httpTriggerCosmosDBOutput3(\n                    @af:HTTPTrigger af:HTTPRequest httpReq) \n                    returns @af:CosmosDBOutput { \n                        connectionStringSetting: \"CosmosDBConnection\", \n                        databaseName: \"db1\", collectionName: \"c1\" } Person[] {\n    Person[] persons = [];\n    persons.push({id: uuid:createType1AsString(), name: \"Jack\", country: \"UK\"});\n    persons.push({id: uuid:createType1AsString(), name: \"Will\", country: \"UK\"});\n    return persons;\n}\n\n\/\/ A timer function which is executed every 10 seconds.\n@af:Function\npublic function queuePopulationTimer(\n            @af:TimerTrigger { schedule: \"*\/10 * * * * *\" } json triggerInfo, \n            @af:QueueOutput { queueName: \"queue4\" }\n             af:StringOutputBinding msg) {msg.value = triggerInfo.toString();\n}", "outputFileName":"azure_functions_deployment.out", "output":"# Prerequisites: Azure CLI tools installation and configuration\n\n# Build the Ballerina program to generate the Azure Functions\nbal build azure_functions_deployment.bal\nCompiling source\n\tazure_functions_deployment.bal\n\nGenerating executables\n\tazure_functions_deployment.jar\n\t@azure_functions:Function: hello, fromHttpToQueue, fromQueueToQueue, fromBlobToQueue, httpTriggerBlobInput, httpTriggerBlobOutput, sendSMS, cosmosDBToQueue1, cosmosDBToQueue2, httpTriggerCosmosDBInput1, httpTriggerCosmosDBInput2, httpTriggerCosmosDBInput3, httpTriggerCosmosDBOutput1, httpTriggerCosmosDBOutput2, httpTriggerCosmosDBOutput3, queuePopulationTimer\n\n\tRun the following command to deploy Ballerina Azure Functions:\n\taz functionapp deployment source config-zip -g <resource_group> -n <function_app_name> --src azure-functions.zip\n\n# Execute the following Azure CLI command to publish the functions (replace with your respective Azure <resource_group> and <function_app_name>)\naz functionapp deployment source config-zip -g functions1777 -n functions1777 --src  azure-functions.zip \nGetting scm site credentials for zip deployment\nStarting zip deployment. This operation can take a while to complete ...\nDeployment endpoint responded with status code 202\n{\n  \"active\": true,\n  \"author\": \"N\/A\",\n  \"author_email\": \"N\/A\",\n  \"complete\": true,\n  \"deployer\": \"ZipDeploy\",\n  \"end_time\": \"2020-07-02T06:48:08.7706207Z\",\n  \"id\": \"2bacf185fb114d42aab762dfd5f303dc\",\n  \"is_readonly\": true,\n  \"is_temp\": false,\n  \"last_success_end_time\": \"2020-07-02T06:48:08.7706207Z\",\n  \"log_url\": \"https:\/\/functions1777.scm.azurewebsites.net\/api\/deployments\/latest\/log\",\n  \"message\": \"Created via a push deployment\",\n  \"progress\": \"\",\n  \"provisioningState\": null,\n  \"received_time\": \"2020-07-02T06:47:56.2756472Z\",\n  \"site_name\": \"functions1777\",\n  \"start_time\": \"2020-07-02T06:47:56.7600364Z\",\n  \"status\": 4,\n  \"status_text\": \"\",\n  \"url\": \"https:\/\/functions1777.scm.azurewebsites.net\/api\/deployments\/latest\"\n}\n\n# Invoke the functions (replace with your <auth_code> value in authenticated requests)\ncurl -d \"Jack\" https:\/\/functions1777.azurewebsites.net\/api\/hello\nHello, Jack!\n\ncurl -d \"ABCDE\" https:\/\/functions1777.azurewebsites.net\/api\/fromHttpToQueue?code=<auth_code>\nRequest: url=https:\/\/functions1777.azurewebsites.net\/api\/fromHttpToQueue... body=ABCDE\n\ncurl \"https:\/\/functions1777.azurewebsites.net\/api\/httpTriggerBlobInput?name=input.txt&code=<auth_code>\"\nBlob: input.txt Length: 6 Content: 65 66 67 68 69 10\n\ncurl -d \"123456\" \"https:\/\/functions1777.azurewebsites.net\/api\/httpTriggerBlobOutput?name=payload.txt&code=<auth_code>\"\nBlob: payload.txt Content: 123456\n\ncurl -d \"123456\" \"https:\/\/functions1777.azurewebsites.net\/api\/httpTriggerBlobOutput2?name=payload.txt&code=<auth_code>\"\nBlob: payload.txt Content: 65 66 67 97 98\n\ncurl -d \"Hello!\" \"https:\/\/functions1777.azurewebsites.net\/api\/sendSMS?to=xxxxxxxxxx&code=<auth_code>\"\nMessage - to: xxxxxxxxxx body: Hello!\n\ncurl \"https:\/\/functions1777.azurewebsites.net\/api\/httpTriggerCosmosDBInput1?id=id1&code=<auth_code>\"\nid=id1 _rid=zEkwANYTRPoFAAAAAAAAAA== _self=dbs\/zEkwAA==\/colls\/zEkwANYTRPo=\/docs\/zEkwANYTRPoFAAAAAAAAAA==\/ _ts=1591201470 _etag=\"10009f6c-0000-0100-0000-5ed7cebe0000\" name=Tom birthYear=1950 country=Sri Lanka pk=p1\n\ncurl \"https:\/\/functions1777.azurewebsites.net\/api\/httpTriggerCosmosDBInput2?id=id1&code=<auth_code>\"\nid=id1 name=Tom birthYear=1950 _rid=zEkwANYTRPoFAAAAAAAAAA== _self=dbs\/zEkwAA==\/colls\/zEkwANYTRPo=\/docs\/zEkwANYTRPoFAAAAAAAAAA==\/ _ts=1591201470 _etag=\"10009f6c-0000-0100-0000-5ed7cebe0000\" country=Sri Lanka pk=p1\n\ncurl \"https:\/\/functions1777.azurewebsites.net\/api\/c1\/Sri%20Lanka?code=<auth_code>\"\nid=id3 name=Jack X birthYear=1950 country=Sri Lanka pk=p1 _rid=zEkwANYTRPoEAAAAAAAAAA== _self=dbs\/zEkwAA==\/colls\/zEkwANYTRPo=\/docs\/zEkwANYTRPoEAAAAAAAAAA==\/ _etag=\"1000076b-0000-0100-0000-5ed7cc110000\" _attachments=attachments\/ _ts=1591200785 id=id4 name=Tom birthYear=1950 country=Sri Lanka pk=p1 _rid=zEkwANYTRPoFAAAAAAAAAA== _self=dbs\/zEkwAA==\/colls\/zEkwANYTRPo=\/docs\/zEkwANYTRPoFAAAAAAAAAA==\/ _etag=\"10009f6c-0000-0100-0000-5ed7cebe0000\" _attachments=attachments\/ _ts=1591201470\n\ncurl https:\/\/functions1777.azurewebsites.net\/api\/httpTriggerCosmosDBOutput1?code=<auth_code>\nAdding entry: id=abf42517-53d7-4fa3-a30c-87cb65e9597d name=John Doe birthYear=1980\n\ncurl https:\/\/functions1777.azurewebsites.net\/api\/httpTriggerCosmosDBOutput2?code=<auth_code>\nAdding entries: id=f510e0d2-5341-4901-8c12-9aac1b212378 name=John Doe A birthYear=1985 id=cc145a0f-cb4f-4a5f-8d0f-fbf01209aa2d name=John Doe B birthYear=1990\n\ncurl https:\/\/functions1777.azurewebsites.net\/api\/httpTriggerCosmosDBOutput3?code=<auth_code>\n[{\"id\":\"4ba53cb4-47a1-4028-af7b-2515f0a9c6bf\",\"name\":\"Jack\",\"birthYear\":2001},{\"id\":\"5b8a6697-c9e9-488d-91b3-3942574efeef\",\"name\":\"Will\",\"birthYear\":2005}]\n\n"}], "description":"\/\/ Azure Functions is an event driven, serverless computing platform.\n\/\/ Ballerina functions can be deployed in Azure Functions by annotating a Ballerina function with \"@functions:Function\".\n\/\/ For more information, see the [Azure Deployment Guide](https:\/\/ballerina.io\/learn\/deployment\/azure-functions\/).", "metatags":""}, {"bbeName":"backtick-templates", "resources":[{"tag":"templates", "balFileName":"backtick_templates.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    string name = \"James\";\n\n    \/\/ Concatenates `Hello, ` strings with the `name` value.\n    string s1 = string`Hello, ${name}`;\n    io:println(s1);\n\n    \/\/ Concatenates `Backtick:` strings with `.\n    string s2 = string`Backtick:${\"`\"}`;\n    io:println(s2);\n}", "outputFileName":"backtick_templates.out", "output":"bal run backtick_templates.bal\nHello, James\nBacktick:`"}], "description":"\/\/ The backtick templates consist of a tag followed by characters surrounded by backticks. They can contain\n\/\/ `expressions` in `${...}` to be interpolated. If no escapes are recognized: use an `expression` to escape.\n\/\/ They can contain newlines. <br><\/br>\n\/\/ Processed in two phases.\n\/\/ <ul>\n\/\/ <li>Phase 1 does tag-independent parse: result is a list of `strings` and `expressions`<\/li>\n\/\/ <li>Phase 2 is tag-dependent<\/li>\n\/\/ <\/ul>\n\/\/<br><\/br>\n\/\/ Phase 2 for `string...` converts `expressions` to `strings` and concatenates. `base16` and `base64`\n\/\/ tags do not allow `expressions`.", "metatags":"description: This BBE demonstrates backtick templates in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, backtick templates"}, {"bbeName":"ballerina-basic-types", "resources":[], "description":"\/\/ Simple types: <br>\/<br>\n\/\/ Always plain data. Includes `nil`, `boolean`, `int`, `float`, `decimal`. <br>\/<br>\n\/\/ Sequence: <br>\/<br>\n\/\/ Always plain data. Includes `string`, `xml`. <br>\/<br>\n\/\/ Structural: <br>\/<br>\n\/\/ Plain data if members are `array`\/`tuple`, `map`\/`record`, `table`. <br>\/<br>\n\/\/ Behavioural: <br>\/<br>\n\/\/ Not plain data. Includes `function`, `object`, `error`, `stream`, `typedesc`, `handle`.", "metatags":"description: This BBE demonstrates basic types in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, basic types"}, {"bbeName":"binary-data", "resources":[{"tag":"data", "balFileName":"binary_data.bal", "bal":"public function main() {\n    \/\/ Creates a `byte` array using the `base64` byte array literal.\n    byte[] _ = base64`yPHaytRgJPg+QjjylUHakEwz1fWPx\/wXCW41JSmqYW8=`;\n\n    \/\/ Creates a `byte` using a hexadecimal numeral.\n    byte x = 0xA;\n\n    \/\/ `byte & int` will be `byte`.\n    byte _ = x & 0xFF;\n\n}", "outputFileName":"binary_data.out", "output":"bal run binary_data.bal"}], "description":"\/\/ Binary data is represented by arrays of `byte` values. It is a special syntax for `byte` arrays\n\/\/ in `base 64` and `base 16`. The relationship between `byte` and `int` is not the same as\n\/\/ what you are used to. A `byte` is an `int` in the range `0` to `0xFF`. `byte` is a subtype of int.\n\/\/ `int` type supports normal bitwise operators: `&` `|` `^` `~` `<<` `>>` `>>>`.\n\/\/ Ballerina knows the obvious rules about when bitwise operations produce a `byte`.", "metatags":"description: This BBE demonstrates binary data in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, binary data, byte"}, {"bbeName":"booleans", "resources":[{"tag":"booleans", "balFileName":"booleans.bal", "bal":"import ballerina\/io;\n\nboolean flag = true;\n\n\/\/ Here's a conditional expression. Uses C syntax.\nint n = flag ? 1 : 2;\n\npublic function main() {\n    \/\/ Parentheses are options in conditions, but curly braces are required in `if\/else` and other compound statements. \n    if flag {\n        io:println(1);\n    } else {\n        io:println(2);\n    }\n\n}", "outputFileName":"booleans.out", "output":"bal run booleans.bal\n1"}], "description":"\/\/ The `boolean` type has two values: `true`, `false`.\n\/\/ The `!` operator works on booleans only.  `&&` and `||` operators short-circuit as in C.\n\/\/ Usual comparison operators (`==`, `!=`, `<`, `>`, `<=`, and `>=`) produce boolean values.", "metatags":"description: This BBE introduces the boolean type.\nkeywords:  ballerina, ballerina by example, bbe, boolean, bool, true, false"}, {"bbeName":"c2c-deployment", "resources":[{"tag":"deployment", "balFileName":"c2c_deployment.bal", "bal":"import ballerina\/http;\n\n\/\/ Note that the code below is completely focused on the business logic and it does not specify anything related to operations.\nlistener http:Listener helloEP = new(9090);\n\nservice http:Service \/helloWorld on helloEP {\n    resource function get sayHello() returns string {\n        return \"Hello, World from service helloWorld ! \\n\";\n    }\n}", "outputFileName":"c2c_deployment.out", "output":"# Before you build the package, we are going to override some of the default values taken by the compiler,\nIn order to do this you need to create a filed named `Cloud.toml` in package directory and paste the following content into it.\nAll the supported key value properties can be found in the Code to cloud deployment guide.\n\n[container.image]\nrepository=\"wso2inc\"\nname=\"hello\"\ntag=\"v0.1.0\"\n\nAdditionally, if you are using minikube, you could execute the following command to reuse the Docker daemon from minikube.\n$ eval $(minikube docker-env)\n\n# Now let's build the ballerina package.\n\n# Note that the `bal build` command should be executed on the package. Code to cloud generates only one container per package.\n$ bal build\n\nCompiling source\n        wso2\/hello:0.1.0\n\nCreating balas\n        target\/bala\/hello-2020r2-any-0.1.0.bala\n\nRunning Tests\n\n        wso2\/hello:0.1.0\n        No tests found\n\nGenerating executables\n        target\/bin\/hello.jar\n\nGenerating artifacts...\n\n        @kubernetes:Service                      - complete 1\/1\n        @kubernetes:Deployment                   - complete 1\/1\n        @kubernetes:HPA                          - complete 1\/1\n        @kubernetes:Docker                       - complete 2\/2\n\n        Execute the below command to deploy the Kubernetes artifacts:\n        kubectl apply -f \/home\/wso2\/project\/target\/kubernetes\/hello-0.1.0\n\n        Execute the below command to access service via NodePort:\n        kubectl expose deployment wso2-hello-0--deployment --type=NodePort --name=wso2-hello-0--svc-local\n\n\n\n# Let’s try executing the Docker image separately first.\n\n# Verify if the Docker image is generated.\n$ docker images\n\nREPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE\nwso2inc\/hello                       v0.1.0              60d95f0928b2        About a minute ago   228MB\n\n# Run the generated Docker image.\n$ docker run -d -p 9090:9090 wso2inc\/hello:v0.1.0\nc04194eb0b4d0d78cbc8ca55e0527d381d8ab4a1a68f8ea5dd3770a0845d5fbb\n\n# Access the service.\n$ curl http:\/\/localhost:9090\/helloWorld\/sayHello\nHello, World from service helloWorld !\n\n# Lets try executing Kubernetes service now.\n$ kubectl apply -f \/home\/wso2\/project\/target\/kubernetes\/hello-0.1.0\nservice\/helloep-svc created\ndeployment.apps\/wso2-hello-0--deployment created\nhorizontalpodautoscaler.autoscaling\/wso2-hello-0--hpa created\n\n# Verify the kubernetes pods.\n$ kubectl get pods\nNAME                                          READY   STATUS    RESTARTS   AGE\nwso2-hello-0--deployment-7d4d56457b-7jlzx   1\/1     Running   0          57s\n\n# Expose via Nodeport to test in the developer environment.\n$ kubectl expose deployment wso2-hello-0--deployment --type=NodePort --name=wso2-hello-0--svc-local\nservice\/wso2-hello-0--svc-local exposed\n\n# Get the IP and port of the Kubernetes service.\n$ kubectl get svc\nNAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE\nwso2-hello-0--svc-local   NodePort    10.111.61.112    <none>        9090:32437\/TCP   4m17s\n\n# If you are using Minikube, IP address should be changed according to the output of the `minikube ip` command.\n$ minikube ip\n192.168.49.2\n\n# Access the deployed service via CURL.\n$ curl http:\/\/192.168.49.2:32437\/helloWorld\/sayHello\nHello, World from service helloWorld !"}], "description":"\/\/ Ballerina supports generating Docker and Kubernetes artifacts from code without any additional configuration.\n\/\/ This simplifies the experience of developing and deploying Ballerina code in the cloud.\n\/\/ Code to cloud builds the containers and required artifacts by deriving the required values from the code.\n\/\/ If you want to override the default values taken by the compiler, you can use a `Cloud.toml` file. <br\/><br\/>\n\/\/ For more information, see [Code to Cloud Deployment](\/learn\/deployment\/code-to-cloud).", "metatags":""}, {"bbeName":"cache-basics", "resources":[{"tag":"basics", "balFileName":"cache_basics.bal", "bal":"import ballerina\/cache;\nimport ballerina\/io;\n\npublic function main() returns error? {\n    \/\/ This creates a new cache instance with the default configurations.\n    cache:Cache cache = new();\n\n    \/\/ Adds new entries to the cache.\n    check cache.put(\"key1\", \"value1\");\n    check cache.put(\"key2\", \"value2\");\n\n    \/\/ Checks for the cached key availability.\n    if (cache.hasKey(\"key1\")) {\n        \/\/ Fetches the cached value.\n        string value = <string> check cache.get(\"key1\");\n        io:println(\"The value of the key1: \" + value);\n    }\n    \/\/ Gets the keys of the cache entries.\n    string[] keys = cache.keys();\n    io:println(\"The existing keys in the cache: \" + keys.toString());\n\n    \/\/ Gets the size of the cache.\n    int size = cache.size();\n    io:println(\"The cache size: \", size);\n}", "outputFileName":"cache_basics.out", "output":"bal run cache_basic.bal\nThe value of the key1: value1\nThe existing keys in the cache: [\"key1\",\"key2\"]\nThe cache size: 2"}], "description":"\/\/ The Ballerina Cache API provides an in-memory cache implementation by default with a\n\/\/ `Least Recently Used` algorithm-based eviction policy.\n\/\/ For more information on the underlying module,\n\/\/ see the [Cache module](https:\/\/docs.central.ballerina.io\/ballerina\/cache\/latest\/).", "metatags":"description: This BBE shows how to perform basic in-memory caching operations with the \"Least Recently Used\" algorithm in Ballerina.\nkeywords: ballerina, ballerina by examples, BBE, cache, put, get, size, hasKey"}, {"bbeName":"cache-invalidation", "resources":[{"tag":"invalidation", "balFileName":"cache_invalidation.bal", "bal":"import ballerina\/cache;\nimport ballerina\/io;\n\npublic function main() returns error? {\n\n    \/\/ This creates a new cache with the advanced configuration.\n    cache:Cache cache = new ({\n        \/\/ The maximum size of the cache is 10.\n        capacity: 10,\n        \/\/ The eviction factor is set to 0.2, which means at the\n        \/\/ time of eviction 10*0.2=2 entries get removed from the cache.\n        evictionFactor: 0.2,\n        \/\/ The default max age of the cache entry is set to 2 seconds.\n        defaultMaxAge: 2,\n        \/\/ The cache cleanup task runs every 3 seconds and clears all\n        \/\/ the expired entries.\n        cleanupInterval: 3\n    });\n\n    \/\/ Adds the new entries to the cache.\n    check cache.put(\"key1\", \"value1\");\n    check cache.put(\"key2\", \"value2\");\n    \/\/ Adds a new entry to the cache by overriding the default max age.\n    check cache.put(\"key3\", \"value3\", 3600);\n\n    \/\/ Gets the keys of the cache entries.\n    string[] keys = cache.keys();\n    io:println(\"The existing keys in the cache: \", keys);\n\n    \/\/ Discards the given cache entry.\n    _ = check cache.invalidate(\"key2\");\n\n    \/\/ Gets the keys of the cache entries.\n    io:println(\"The existing keys in after invalidating a given key: \",\n                cache.keys());\n\n    \/\/ Discards all the cache entries of the cache.\n    _ = check cache.invalidateAll();\n\n    \/\/ Gets the keys of the cache entries after all the keys are invalidated.\n    io:println(\"The keys after invalidating all the keys: \", cache.keys());\n}", "outputFileName":"cache_invalidation.out", "output":"bal run cache_invalidation.bal\nThe existing keys in the cache: [\"key1\",\"key2\",\"key3\"]\nThe existing keys in after invalidating a given key: [\"key1\",\"key3\"]\nThe keys in after invalidating all the keys: []"}], "description":"\/\/ The Ballerina Cache API provides an in-memory cache implementation by default with the\n\/\/ `Least Recently Used` algorithm-based eviction policy.\n\/\/ For more information on the underlying module, \n\/\/ see the [Cache module](https:\/\/docs.central.ballerina.io\/ballerina\/cache\/latest\/).", "metatags":"description: This BBE shows how to perform an in-memory caching invalidate operation with the \"Least Recently Used\" algorithm in Ballerina.\nkeywords: ballerina, ballerina by examples, BBE, cache, put, hasKey, invalidate, invalidateAll"}, {"bbeName":"check-expression", "resources":[{"tag":"expression", "balFileName":"check_expression.bal", "bal":"import ballerina\/io;\n\n\/\/ Convert bytes to a string and then to an int.\nfunction intFromBytes(byte[] bytes) returns int|error {\n\n    \/\/ Use `check` with an expression that may return `error`.\n    \/\/ If `string:fromBytes(bytes)` returns an error, `check`\n    \/\/ makes the function return the error here.\n    \/\/ If not, the returned string value is used as the \n    \/\/ value of the `str` variable.\n    string str = check string:fromBytes(bytes);\n\n\n    return int:fromString(str);\n}\n\npublic function main() {\n    int|error res = intFromBytes([104, 101, 108, 108, 111]);\n    io:println(res);\n}", "outputFileName":"check_expression.out", "output":"bal run check_expression.bal\nerror(\"{ballerina\/lang.int}NumberParsingError\",message=\"'string' value 'hello' cannot be converted to 'int'\")"}], "description":"\/\/ `check E` is used with expression `E` that might result in an error.\n\/\/ If `E` does result in an error, then check makes the function return that error\n\/\/ immediately.\n\/\/ Type of `check E` does not include error.\n\/\/ The control flow remains explicit.", "metatags":"description: This BBE demonstrates how the check expression is used in Ballerina to handle errors\nkeywords:  ballerina, ballerina by example, bbe, error, check"}, {"bbeName":"check-semantics", "resources":[{"tag":"semantics", "balFileName":"check_semantics.bal", "bal":"import ballerina\/io;\n\npublic function main() returns error? {\n    do {\n        \/\/ If either `foo()` or `bar()` invocations returns an `error`,\n        \/\/ the error will be returned from the `main` function and execution\n        \/\/ of the `main` function ends.\n        check foo();\n        check bar();\n\n        if !isOK() {\n            \/\/ Fails explicitly with an `error`.\n            fail error(\"not OK\");\n\n        }\n    }\n    \/\/ Failure with the respective error is caught by the `on fail` block.\n    on fail var e {\n        io:println(e.toString());\n        return e;\n    }\n\n    return;\n}\n\nfunction foo() returns error? {\n    io:println(\"OK\");\n    return;\n}\n\nfunction bar() returns error? {\n    io:println(\"OK\");\n    return;\n}\n\nfunction isOK() returns boolean {\n    \/\/ Returns `false`.\n    return false;\n\n}", "outputFileName":"check_semantics.out", "output":"bal run check_semantics.bal\nOK\nOK\nerror(\"not OK\")\nerror: not OK"}], "description":"\/\/ `check` semantics is not simply to return on error.\n\/\/ When `check` gets an error, it fails.\n\/\/ Enclosing block decide how to handle failure.\n\/\/ Most blocks pass failure up to enclosing block.\n\/\/ Function definition handles failure by returning the error.\n\/\/ `on fail` can catch the error.\n\/\/ `fail` statement is like `check` but always fails.\n\/\/ Differs from exceptions in that control flow is explicit", "metatags":"description: This BBE explains the `check` semantics in Ballerina.\nkeywords:  ballerina, ballerina by example, bbe, check, fail, exceptions, on fail, error"}, {"bbeName":"combining-isolated-functions-and-lock", "resources":[{"tag":"lock", "balFileName":"combining_isolated_functions_and_lock.bal", "bal":"import ballerina\/io;\n\ntype R record {\n    int v;\n};\n\n\/\/ The initialization expression of an `isolated` variable\n\/\/ has to be an `isolated` expression, which itself will be\n\/\/ an `isolated` root.\nisolated R r = {v: 0};\n\nisolated function setGlobal(int n) {\n    \/\/ An `isolated` variable can be accessed within\n    \/\/ a `lock` statement.\n    lock {\n        r.v = n;\n    }\n\n}\n\npublic function main() {\n    setGlobal(200);\n    \/\/ Accesses the `isolated` variable within a\n    \/\/ `lock` statement.\n    lock {\n       io:println(r);\n    }\n\n}", "outputFileName":"combining_isolated_functions_and_lock.out", "output":"bal run combining_isolated_functions_and_lock.bal\n{\"v\":200}"}], "description":"\/\/ Combining `isolated` functions and `lock` allows `isolated` functions to use\n\/\/ `lock` to access mutable module-level state.\n\/\/ Key concept is `isolated` root. A value `r` is an `isolated` root if mutable state reachable\n\/\/ from `r` cannot be reached from outside except through `r`. An expression is an\n\/\/ `isolated` expression if it follows rules that guarantee that its value will be an\n\/\/ `isolated` root. e.g.,\n\/\/ <ul>\n\/\/ <li>an expression with a type that is a subtype of `readonly` is always `isolated`<\/li>\n\/\/ <li>an expression `[E1, E2]` is isolated if `E1` and `E2` are `isolated`<\/li>\n\/\/ <li>an expression `f(E1, E2)` is `isolated` if `E1` and `E1` are `isolated`, and\n\/\/ the type of `f` is an `isolated` function.<\/li>\n\/\/ <\/ul>", "metatags":"description: This BBE demonstrates combining isolated functions and lock in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, isolated functions, lock"}, {"bbeName":"commit-rollback-handlers", "resources":[{"tag":"handlers", "balFileName":"commit_rollback_handlers.bal", "bal":"import ballerina\/io;\n\npublic function main() returns error? {\n    transaction {\n        check update();\n        check commit;\n    }\n    return;\n}\n\ntransactional function update() returns error? {\n    check updateDatabase();\n    \/\/  Registers a commit handler to be invoked when the `commit` is executed.\n    'transaction:onCommit(sendEmail);\n    'transaction:onRollback(logError);\n    return;\n}\n\nfunction updateDatabase() returns error? {\n    io:println(\"Database updated\");\n    return;\n}\n\nisolated function sendEmail('transaction:Info info) {\n    io:println(\"Email sent.\");\n}\n\nisolated function logError('transaction:Info info,\n                            error? cause, boolean willRetry) {\n    io:println(\"Logged database update failure\");\n}", "outputFileName":"commit_rollback_handlers.out", "output":"bal run commit_rollback_handlers.bal\nDatabase updated\nEmail sent."}], "description":"\/\/ Often code needs to get executed depending on whether a transaction committed.\n\/\/ Testing the result of the commit within the transaction statement works, but inconvenient from a modularity perspective, particularly when you want to undo changes on rollback.\n\/\/ This seems much worse in a distributed transaction, when transaction statement is in another program.\n\/\/ Ballerina provides commit\/rollback handlers which are functions that get run when decision whether to commit is known.", "metatags":"description: This BBE introduces commit\/rollback handlers in Ballerina\nkeywords:  ballerina, ballerina by example, bbe, transactions, commit, rollback, handlers, commit handlers, rollback handlers"}, {"bbeName":"configurable-variables", "resources":[{"tag":"variables", "balFileName":"configurable_variables.bal", "bal":"\/\/ Port on which to run the service.\nconfigurable int port = 8080;\n\n\/\/`configurable string password = ?;`\n\/\/\n\/\/ This specifies that the password must be supplied in a configuration file.", "outputFileName":"configurable_variables.out", "output":"bal run configurable_variables.bal"}], "description":"\/\/ A module-level variable can be declared as `configurable`. The initializer of a `configurable` variable\n\/\/ can be overridden at runtime (e.g., by a TOML file). A variable where configuration is required\n\/\/ can use an initializer of `?`. The type of a `configurable` variable must be subtype of `anydata`.<br\/><br\/>\n\/\/ For more information, see [Making Ballerina Programs Configurable](https:\/\/ballerina.io\/learn\/making-ballerina-programs-configurable\/defining-configurable-variables\/).", "metatags":"description: This BBE demonstrates configurable variables in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, configurable, variable"}, {"bbeName":"const-and-final", "resources":[{"tag":"final", "balFileName":"const_and_final.bal", "bal":"import ballerina\/io;\n\n\/\/ Constants can be defined without the type.\n\/\/ Then the type is inferred from the right hand side.\nconst MAX_VALUE = 1000;\nconst URL = \"https:\/\/ballerina.io\";\n\n\/\/ The value for variable `msg` can only be assigned once.\nfinal string msg = loadMessage();\n\npublic function main() {\n    io:println(MAX_VALUE);\n    io:println(URL);\n    io:println(msg);\n}\n\nfunction loadMessage() returns string {\n    return \"Hello World\";\n}", "outputFileName":"const_and_final.out", "output":"bal run const_and_final\n1000\nhttps:\/\/ballerina.io\nHello World"}], "description":"\/\/ `const` means immutable and known at compile-time. Its type is singleton: set containing single value.\n\/\/ A `variable` or a `class` field can be declared as `final`, meaning it cannot be assigned to, after\n\/\/ it has been initialized.", "metatags":"description: This BBE demonstrates how const and final values are used in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, const, final"}, {"bbeName":"consuming-services", "resources":[{"tag":"services", "balFileName":"consuming_services.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\n\npublic function main() returns error? {\n    \/\/ A client object is created by applying `new` to a client class.\n    http:Client httpClient = check new (\"https:\/\/api.github.com\/\");\n\n    \/\/ The remote method calls use the `->` syntax. This enables the sequence diagram view.\n    http:Response resp =\n                    check httpClient->get(\"\/orgs\/ballerina-platform\/repos\");\n\n    io:println(resp.statusCode);\n}", "outputFileName":"consuming_services.out", "output":"bal run consuming_services.bal\n200"}], "description":"\/\/ Ballerina has a language construct called client objects. \n\/\/ They are a special kind of objects that contain `remote` methods in addition to regular methods. \n\/\/ `remote` methods are used to interact with a remote service. \n\/\/ Applications typically do not need to write client classes, which are either provided by library modules or generated from some flavor of IDL.", "metatags":"description: This BBE explains basics of consuming services in Ballerina.\nkeywords:  ballerina, ballerina by example, bbe, Client, Client Objects, HTTP Client, Consuming services"}, {"bbeName":"controlling-openness", "resources":[{"tag":"openness", "balFileName":"controlling_openness.bal", "bal":"import ballerina\/io;\n\ntype Coord record {|\n    float x;\n    float y;\n|};\n\nCoord x = { x: 1.0, y: 2.0 };\n\n\/\/ `x` is a `map` with `float` values.\nmap<float> m1 = x;\n\ntype Headers record {|\n    string 'from;\n    string to;\n    string...;\n|};\n\nHeaders h = {\n    'from: \"Jane\", to: \"John\"\n};\n\n\/\/ `h` is a `map` with `string` values.\nmap<string> m2 = h;\n\npublic function main() {\n    io:println(m1);\n    io:println(m2);\n}", "outputFileName":"controlling_openness.out", "output":"bal run controlling_openness.bal\n{\"x\":1.0,\"y\":2.0}\n{\"from\":\"Jane\",\"to\":\"John\"}"}], "description":"\/\/ Use `record {| ... |}` to describe a `record` type that allows exclusively what is specified in the body.\n\/\/ Use `T...` to allow other fields of type `T`. `map<T>` is same as `record {| T...; |}`.", "metatags":"description: This BBE demonstrates controlling openness in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, controlling openness"}, {"bbeName":"converting-from-json-to-user-defined-type", "resources":[{"tag":"type", "balFileName":"converting_from_json_to_user_defined_type.bal", "bal":"import ballerina\/io;\n\ntype Coord record {\n    float x;\n    float y;\n};\n\npublic function main() {\n    json j = {x: 1.0, y: 2.0};\n\n    \/\/ With mutable values, it would not be type-safe to allow a cast.\n    \/\/ Cast to `T` will work on the mutable structure `s` only if the inherent type\n    \/\/ of `s` is a subtype of `T`.\n    \/\/ Casting of immutable value will work.\n    json k = j.cloneReadOnly();\n    Coord c = <Coord> k;\n\n    io:println(c.x);\n    io:println(c.y);\n}", "outputFileName":"converting_from_json_to_user_defined_type.out", "output":"bal run converting_from_json_to_user_defined_type.bal\n1.0\n2.0"}], "description":"\/\/ With mutable values, would not be type-safe to allow a cast. \n\/\/ Mutable structures have the `inherent` type that limits mutation.\n\/\/ Cast to `T` will work on mutable structure `s` only if the `inherent` type\n\/\/ of `s` is a subtype of `T`.\n\/\/ Casting of immutable value will work but it does not do numeric conversions.", "metatags":"description: This BBE demonstrates converting JSON to a user-defined type\nkeywords: ballerina, ballerina by example, bbe, conversion, json"}, {"bbeName":"converting-from-user-defined-type-to-json", "resources":[{"tag":"json", "balFileName":"converting_from_user_defined_type_to_json.bal", "bal":"import ballerina\/io;\n\n\/\/ Closed type.\ntype ClosedCoord record {|\n    float x;\n    float y;\n|};\n\n\/\/ Open type, can have additional `anydata` fields.\ntype OpenCoord record {\n    float x;\n    float y;\n};\n\npublic function main() {\n    ClosedCoord a = {x: 1.0, y: 2.0};\n    \/\/ Nothing to do.\n    json j = a;\n\n    io:println(j);\n\n    OpenCoord b = {x: 1.0, y: 2.0, \"z\": \"city\"};\n    \/\/ Use `toJson` to convert `anydata` to `json`.\n    \/\/ Usually happens automatically.\n    json k = b.toJson();\n\n    io:println(k);\n}", "outputFileName":"converting_from_user_defined_type_to_json.out", "output":"bal run converting_from_user_defined_type_to_json.bal\n{\"x\":1.0,\"y\":2.0}\n{\"x\":1.0,\"y\":2.0,\"z\":\"city\"}"}], "description":"\/\/ Conversion from `json` value to JSON format is straightforward.\n\/\/ Converting from application-specific, user-defined subtype of `anydata`\n\/\/ to `json` is also possible.\n\/\/ In many cases, this is a no-op: user-defined type will be a subtype of\n\/\/ `json` as well as of `anydata`.\n\/\/ With tables, XML or records open to `anydata`, use `toJson` to convert\n\/\/ `anydata` to `json`.\n\/\/ APIs that generate JSON typically accept `anydata` and automatically \n\/\/ apply `toJson`.", "metatags":"description: This BBE demonstrates converting a user-defined type to JSON.\nkeywords: ballerina, ballerina by example, bbe, conversion, json"}, {"bbeName":"converting-to-user-defined-type", "resources":[{"tag":"type", "balFileName":"converting_to_user_defined_type.bal", "bal":"import ballerina\/io;\n\ntype Coord record {\n    float x;\n    float y;\n};\n\npublic function main() returns error? {\n    json j = {x: 1.0, y: 2.0};\n\n    \/\/ Argument is a `typedesc` value.\n    \/\/ The static return type depends on the argument.\n    Coord c = check j.cloneWithType(Coord);\n\n    io:println(c.x);\n\n    \/\/ Argument defaulted from the context.\n    Coord d = check j.cloneWithType();\n\n    io:println(d.x);\n    return;\n}", "outputFileName":"converting_to_user_defined_type.out", "output":"bal run converting_to_user_defined_type.bal\n1.0\n1.0"}], "description":"\/\/ The `cloneWithType` langlib function in the lang.value\n\/\/ module can be used to convert a value to a user-defined type.\n\/\/ Result recursively uses specified type as inherent type of new value.\n\/\/ Automatically performs numeric conversions as necessary.\n\/\/ Every part of value is cloned, including immutable structural values.\n\/\/ Graph structure is not preserved. \n\/\/ Variant `fromJsonWithType` also does reverse of conversions done by \n\/\/ `toJson`.", "metatags":"description: This BBE demonstrates converting to a user-defined type using `cloneWithType`\nkeywords: ballerina, ballerina by example, bbe, conversion"}, {"bbeName":"counter-metrics", "resources":[{"tag":"metrics", "balFileName":"counter_metrics.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\nimport ballerina\/log;\nimport ballerina\/observe;\nimport ballerinax\/prometheus as _;\n\n\/\/Create a counter as a global variable in the service with the optional field description.\nobserve:Counter globalCounter = new (\"total_orders\",\n                                    desc = \"Total quantity required\");\n\nservice \/onlineStoreService on new http:Listener(9090) {\n\n    resource function get makeOrder(http:Caller caller, http:Request req) {\n        \/\/Incrementing the global counter defined with the default value 1.\n        globalCounter.increment();\n\n        \/\/Create a counter with simply a name.\n        observe:Counter localCounter = new (\"local_operations\");\n        localCounter.increment();\n        \/\/Increment the value of the counter by 20.\n        localCounter.increment(20);\n\n        \/\/Create a counter with optional fields description, and tags.\n        observe:Counter registeredCounter = new (\"total_product_order_quantity\",\n            desc = \"Total quantity required\",\n            tags = {prodName: \"HeadPhone\", prodType: \"Electronics\"});\n\n        \/\/Register the counter instance, therefore it is stored in the global registry and can be reported to the\n        \/\/metrics server such as Prometheus. Additionally, this operation will register to the global registry for the\n        \/\/first invocation and will throw an error if there is already a registration of different metrics instance\n        \/\/or type. Subsequent invocations of register() will simply retrieve the stored metrics instance\n        \/\/for the provided name and tags fields, and use that instance for the subsequent operations on the\n        \/\/counter instance.\n        error? result = registeredCounter.register();\n        if (result is error) {\n            log:printError(\"Error in registering counter\", 'error = result);\n        }\n\n        \/\/Increase the amount of the registered counter instance by amount 10.\n        registeredCounter.increment(10);\n\n        \/\/Get the value of the counter instances.\n        io:println(\"------------------------------------------\");\n        io:println(\"Global Counter = \", globalCounter.getValue());\n        io:println(\"Local Counter = \", localCounter.getValue());\n        io:println(\"Registered Counter = \", registeredCounter.getValue());\n        io:println(\"------------------------------------------\");\n\n        \/\/Send reponse to the client.\n        http:Response res = new;\n        \/\/ Use a util method to set a string payload.\n        res.setPayload(\"Order Processed!\");\n\n        \/\/ Send the response back to the caller.\n        result = caller->respond(res);\n        if (result is error) {\n            log:printError(\"Error sending response\", 'error = result);\n        }\n    }\n}", "outputFileName":"counter_metrics.server.out", "output":"# To start the service, navigate to the directory that contains the\n# `.bal` file and execute the `bal run` command below with the `--observability-included` build time flag and the `Config.toml` runtime configuration file.\nBAL_CONFIG_FILES=Config.toml bal run --observability-included counter_metrics.bal\n\nballerina: started Prometheus HTTP listener 0.0.0.0:9797\n------------------------------------------\nGlobal Counter = 1\nLocal Counter = 21\nRegistered Counter = 10\n------------------------------------------\n------------------------------------------\nGlobal Counter = 2\nLocal Counter = 21\nRegistered Counter = 20\n------------------------------------------\n------------------------------------------\nGlobal Counter = 3\nLocal Counter = 21\nRegistered Counter = 30\n------------------------------------------"}], "description":"\/\/ Ballerina supports Observability out of the box and Metrics is one of the three important aspects of \n\/\/ Observability. To observe Ballerina code, the `--observability-included` build time flag should be given along with the\n\/\/ `Config.toml` file when starting the service. The `Config.toml` file contains the required runtime configurations related to observability.\n\/\/ You can define and use metrics to measure your own logic. A counter is one type of the metrics that is\n\/\/ supported by default in Ballerina, and it is a cumulative metric that represents a single monotonically-increasing\n\/\/ counter whose value can only increase or be reset to zero.<br\/><br\/>\n\/\/ For more information about configs and observing applications, see [Observing Ballerina Code](https:\/\/ballerina.io\/learn\/observing-ballerina-code\/).", "metatags":"description: BBE on how to use the default Counter Metrics Observability feature in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, observability, tracing, opentracing, counter"}, {"bbeName":"covariance", "resources":[{"tag":"covariance", "balFileName":"covariance.bal", "bal":"int[] iv = [1, 2, 3];\n\n\/\/ Assigning `int[]` to `any[]` is allowed.\n\/\/ - set of values allowed by `int` is subset of set of values allowed by `any`\n\/\/ - set of values allowed by `int[]` is subset of set of values allowed by `any[]`\nany[] av = iv;\n\npublic function main() {\n    \/\/ A runtime error or else `iv[0]` would have the wrong type.\n    av[0] = \"str\";\n\n}", "outputFileName":"covariance.out", "output":"bal run covariance.bal\nerror: {ballerina\/lang.array}InherentTypeViolation {\"message\":\"incompatible types: expected 'int', found 'string'\"}\n        at covariance:main(covariance.bal:10)"}], "description":"\/\/ Arrays and maps are covariant.\n\/\/ Static type-checking guarantees that the result of a read from a mutable\n\/\/ structure will be consistent with the static type.\n\/\/ Covariance means that a write to a mutable structure may result in a \n\/\/ runtime error.\n\/\/ Arrays, maps, and records have an \"inherent\" type that constrains mutation.", "metatags":"description: This BBE demonstrates covariance in Ballerina\nkeywords:  ballerina, ballerina by example, bbe, covariance, arrays, maps"}, {"bbeName":"creating-tables-with-query", "resources":[{"tag":"query", "balFileName":"creating_tables_with_query.bal", "bal":"import ballerina\/io;\n\ntype Employee record {|\n    readonly int id;\n    string firstName;\n    string lastName;\n    int salary;\n|};\n\npublic function main() {\n    table<Employee> key(id) employees = table [\n        {id: 1, firstName: \"John\", lastName: \"Smith\", salary: 100},\n        {id: 2, firstName: \"Fred\", lastName: \"Bloggs\", salary: 2000}\n    ];\n\n    \/\/ The query expression starts with `table`.\n    \/\/ The key specifier `key(id)` specifies the key sequence of the constructed `table`.\n    \/\/ The result of the query expression is a `table`.\n    var highPaidEmployees = table key(id) from var e in employees\n                            where e.salary >= 1000\n                            select e;\n\n\n    io:println(highPaidEmployees);\n}", "outputFileName":"creating_tables_with_query.out", "output":"bal run creating_tables_with_query.bal\n[{\"id\":2,\"firstName\":\"Fred\",\"lastName\":\"Bloggs\",\"salary\":2000}]"}], "description":"// Query expressions can create tables. The key of the created `table` can be specified explicitly.", "metatags":"description: This BBE demonstrates creating tables with query in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, creating table, query expression"}, {"bbeName":"decimal-type", "resources":[{"tag":"type", "balFileName":"decimal_type.bal", "bal":"import ballerina\/io;\n\n\/\/ The `decimal` type represents the set of 128-bits IEEE 754R decimal floating point numbers.\ndecimal nanos = 1d\/1000000000d;\n\nfunction floatSurprise() {\n    float f = 100.10 - 0.01;\n    io:println(f);\n}\n\npublic function main() {\n    floatSurprise();\n    io:println(nanos);\n}", "outputFileName":"decimal_type.out", "output":"bal run decimal_type.bal\n100.08999999999999\n1E-9"}], "description":"\/\/ It is the third numeric type. Works like `int` and `float`. No implicit conversion.\n\/\/ Represents `decimal` fractions exactly. Avoids surprises that you get with `float`. Preserves precision.\n\/\/ Separate basic type; counts as `anydata`. Literal uses the suffix `d`(`f` suffix is for `float`).\n\/\/ Floating point, not infinite precision.\n\/\/ <ul>\n\/\/ <li>34 decimal digits<\/li>\n\/\/ <li>22 digits are enough for US national debt in `¢`<\/li>\n\/\/ <li>27 digits are enough for an age of universe in `ns`<\/li>\n\/\/ <li>No `infinity`, `NaN` or negative zero<\/li>\n\/\/ <\/ul>", "metatags":"description: This BBE demonstrates decimal type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, decimal type, decimal"}, {"bbeName":"defining-classes", "resources":[{"tag":"classes", "balFileName":"defining_classes.bal", "bal":"import ballerina\/io;\n\npublic class Counter {\n    \/\/ `private` means accessible only by code within the class definition.\n    private int n;\n\n    \/\/ `init` method initializes the object.\n    public function init(int n = 0) {\n        self.n = n;\n    }\n\n    public function get() returns int {\n        \/\/ Methods use `self` to access their object.\n        return self.n;\n\n    }\n\n    public function inc() {\n        self.n += 1;\n    }\n}\n\npublic function main() {\n    \/\/ Arguments to `new` are passed as arguments to `init`.\n    Counter counter = new (12);\n\n    io:println(counter.get());\n}", "outputFileName":"defining_classes.out", "output":"bal run defining_classes.bal\n12"}], "description":"\/\/ Module can contain class definitions.\n\/\/ `init` method initializes the object.\n\/\/ Arguments to `new` are passed as arguments to `init`.\n\/\/ Methods use `self` to access their object.\n\/\/ `private` means accessible only by code within the class definition.", "metatags":"description: This BBE demonstrates how classes are defined in Ballerina\nkeywords:  ballerina, ballerina by example, bbe, class, object"}, {"bbeName":"destructuring-records", "resources":[{"tag":"records", "balFileName":"destructuring_records.bal", "bal":"import ballerina\/io;\n\ntype Person record {\n string first;\n string last;\n int yearOfBirth;\n};\n\npublic function main() {\n    Person[] persons = [\n        {first: \"Melina\", last: \"Kodel\", yearOfBirth: 1994},\n        {first: \"Tom\", last: \"Riddle\", yearOfBirth: 1926}\n    ];\n\n    \/\/ A `Person` record is destructured here, as a\n    \/\/ projection with `first` and `last` fields.\n    \/\/ `{first: f, last: l}` is the `binding pattern`.\n    var names1 = from var {first: f, last: l} in persons\n                select {first: f, last: l};\n\n\n    io:println(names1);\n\n    \/\/ The same can be simplified as this.\n    var names2 = from var {first, last} in persons\n                select {first, last};\n\n\n    io:println(names2);\n}", "outputFileName":"destructuring_records.out", "output":"bal run destructuring_records.bal\n[{\"first\":\"Melina\",\"last\":\"Kodel\"},{\"first\":\"Tom\",\"last\":\"Riddle\"}]\n[{\"first\":\"Melina\",\"last\":\"Kodel\"},{\"first\":\"Tom\",\"last\":\"Riddle\"}]"}], "description":"\/\/ Destructuring records is particularly useful with `query expressions`, but works anywhere you can have `var`.\n\/\/ `var` is followed by a `binding pattern`. The semantics of `binding pattern` is open. `{x}` is short for\n\/\/ `{x: x}` in both binding patterns and record constructors.", "metatags":"description: This BBE demonstrates on how records can be destructured in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, records, destructuring"}, {"bbeName":"directories", "resources":[{"tag":"directories", "balFileName":"directories.bal", "bal":"import ballerina\/file;\nimport ballerina\/io;\n\npublic function main() returns error? {\n\n    \/\/ Creates a new directory with any non-existent parents.\n    string dirPath = check file:joinPath(\"foo\", \"bar\");\n    check file:createDir(dirPath, file:RECURSIVE);\n    io:println(\"The \" + dirPath + \" directory created successfully.\");\n\n    \/\/ Checks whether the directory of the provided path exists.\n    boolean dirExists = check file:test(\"foo\", file:EXISTS);\n    io:println(\"Is foo directory exist: \", dirExists.toString());\n\n    \/\/ Copies the directory with another name.\n    check file:copy(dirPath, \"test\", file:REPLACE_EXISTING);\n    io:println(\"The \" + dirPath + \" directory copied successfully.\");\n\n    \/\/ Renames the directory to another new name.\n    check file:rename(\"foo\", \"test1\");\n    io:println(\"The foo directory renamed successfully.\");\n\n    \/\/ Gets the list of files\/directories in the given directory.\n    file:MetaData[] readDirResults = check file:readDir(\"test1\");\n    io:println(\"Directory path: \", readDirResults[0].absPath);\n    io:println(\"Directory size: \", readDirResults[0].size.toString());\n    io:println(\"Is directory: \", readDirResults[0].dir.toString());\n    io:println(\"Modified at \", readDirResults[0].modifiedTime.toString());\n\n    \/\/ Removes the directory in the specified file path.\n    check file:remove(\"test\");\n\n    \/\/ Removes the directory in the specified file path with all its children.\n    check file:remove(\"test1\", file:RECURSIVE);\n    io:println(\"Directories removed successfully.\");\n}", "outputFileName":"directories.out", "output":"bal run directories.bal\nThe foo\/bar directory created successfully.\nIs foo directory exist: true\nThe foo\/bar directory copied successfully.\nThe foo directory renamed successfully.\nDirectory path: \/A\/B\/C\/test1\/bar\nDirectory size: 64\nIs directory: true\nModified at 1621859440 0.871000000\nDirectories removed successfully."}], "description":"\/\/ The Ballerina File API contains functions to perform directory operations.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [File module](https:\/\/docs.central.ballerina.io\/ballerina\/file\/latest\/).", "metatags":"description: This BBE shows how to perform directory operations in Ballerina.\nkeywords: ballerina, ballerina by examples, BBE, directory, file, path"}, {"bbeName":"directory-listener", "resources":[{"tag":"listener", "balFileName":"directory_listener.bal", "bal":"import ballerina\/file;\nimport ballerina\/log;\n\n\/\/ In this example, the listener monitors any modifications done to a specific directory.\n\/\/ Before running the example, change the value of the 'path' field \n\/\/ to indicate the path of the directory that you want the listener to monitor.\n\/\/ As the recursive property is set to false,\n\/\/ the listener does not monitor the child directories of the main directory\n\/\/ that it listens to.\nlistener file:Listener inFolder = new ({\n    path: \"\/home\/ballerina\/fs-server-connector\/observed-dir\",\n    recursive: false\n});\n\n\/\/ The directory listener should have at least one of these predefined resources.\nservice \"localObserver\" on inFolder {\n\n    \/\/ This function is invoked once a new file is created in the listening directory.\n    remote function onCreate(file:FileEvent m) {\n        log:printInfo(\"Create: \" + m.name);\n    }\n\n    \/\/ This function is invoked once an existing file is deleted from the listening directory.\n    remote function onDelete(file:FileEvent m) {\n        log:printInfo(\"Delete: \" + m.name);\n    }\n\n    \/\/ This function is invoked once an existing file is modified in the listening directory.\n    remote function onModify(file:FileEvent m) {\n        log:printInfo(\"Modify: \" + m.name);\n    }\n}", "outputFileName":"directory_listener.out", "output":"# After running the sample, create a new file called `test1.txt` in the directory called `observed-dir`, modify it, and delete it.\nbal run directory_listener.bal\ntime = 2020-12-12 13:49:08,497 level = INFO  module = \"\" message = \"Create: \/home\/ballerina\/fs-server-connector\/observed-dir\/test1.txt\"\ntime = 2020-12-12 13:49:41,709 level = INFO  module = \"\" message = \"Modify: \/home\/ballerina\/fs-server-connector\/observed-dir\/test1.txt\"\ntime = 2020-12-12 13:50:04,997 level = INFO  module = \"\" message = \"Delete: \/home\/ballerina\/fs-server-connector\/observed-dir\/test1.txt\""}], "description":"\/\/ The `Directory Listener` is used to listen to a directory in the local file system. \n\/\/ It notifies when new files are created in the directory or when the existing files are deleted or modified.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [File module](https:\/\/docs.central.ballerina.io\/ballerina\/file\/latest\/).", "metatags":"description: This BBE shows how the Ballerina directory service monitors any modifications done to files inside a specific directory.\nkeywords: ballerina, ballerina by example, BBE, file, directory, directory listener"}, {"bbeName":"documentation", "resources":[{"tag":"documentation", "balFileName":"documentation.bal", "bal":"\/\/ Lines starting with `#` contain structured documentation in Markdown format.\n# Adds two integers.\n\/\/ Documenting parameters of the function\n# + x - an integer\n# + y - another integer\n\/\/ Documenting return parameter of the function\n# + return - the sum of `x` and `y`\npublic function add(int x, int y)\n                     returns int {\n\n  return x + y;\n}", "outputFileName":"documentation.out", "output":"bal run documentation.bal"}], "description":"\/\/ Annotations would be inconvenient for specifying structured documentation.\n\/\/ Ballerina-flavored Markdown (BFM) is additional conventions on top of Markdown,\n\/\/ which makes it more convenient for documenting Ballerina code.", "metatags":"description: This BBE demonstrates documentation in Ballerina, which is a Markdown format with additional conventions to write structured documentations in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, documentation, Ballerina-flavored Markdown, BFM"}, {"bbeName":"dynamic-listener", "resources":[{"tag":"listener", "balFileName":"dynamic_listener.bal", "bal":"import ballerina\/http;\nimport ballerina\/lang.runtime;\nimport ballerina\/log;\n\nfinal http:Listener httpListener = check new (9090);\n\nhttp:Service helloService =  service object {\n\n    resource function get sayHello(http:Caller caller, http:Request req) {\n        \/\/ Send a response back to the caller.\n        var respondResult = caller->respond(\"Hello, World!\");\n        if (respondResult is error) {\n            log:printError(\"Error occurred when responding.\", \n                'error = respondResult);\n        }\n    }\n\n    \/\/ The resource function that will shutdown the server.\n    resource function get shutDownServer(http:Caller caller, http:Request req) {\n        \/\/ Send a response back to the caller.\n        var respondResult = caller->respond(\"Shutting down the server\");\n        \/\/ Stop the listener.\n        \/\/ This will be called automatically if the program exits by means of a system call.\n        var stopResult = httpListener.gracefulStop();\n        \/\/ Deregister the listener dynamically.\n        runtime:deregisterListener(httpListener);\n        \/\/ Handle the errors at the end.\n        if (respondResult is error) {\n            log:printError(\"Error occurred when responding.\", \n                'error = respondResult);\n        } \n        if (stopResult is error) {\n            log:printError(\"Error occurred when stopping the listener. \", \n                'error = stopResult);\n        }\n    }\n};\n\npublic function main() returns error? {\n    \/\/ Attach the service to the listener.\n    check httpListener.attach(helloService);\n    \/\/ Start the listener.\n    check httpListener.'start();\n    \/\/ Register the listener dynamically.\n    runtime:registerListener(httpListener);\n}", "outputFileName":"dynamic_listener.server.out", "output":"# Navigate to the directory that contains the\n# 'dynamic_listener.bal' file, and run the 'bal run' command below.\n\nbal run dynamic_listener.bal"}], "description":"\/\/ Dynamic listeners allow registering\/deregistering a module listener dynamically.\n\/\/ This example demonstrates how to register and deregister an HTTP listener\n\/\/ and terminate it in the process.", "metatags":"description: Registering\/deregistering a module listener dynamically.\nkeywords: ballerina, ballerina by example, listener, dynamic listener, bbe, service"}, {"bbeName":"enumerations", "resources":[{"tag":"enumerations", "balFileName":"enumerations.bal", "bal":"import ballerina\/io;\n\n\/\/ This is shorthand for,\n\/\/\n\/\/ `const RED = \"RED\";`\n\/\/\n\/\/ `const GREEN = \"GREEN\";`\n\/\/\n\/\/ `const BLUE = \"BLUE\";`\n\/\/\n\/\/ `type Color RED|GREEN|BLUE;`\nenum Color {\n    RED, GREEN, BLUE\n}\n\n\/\/ An `enum` member can explicitly specify an associated expression.\nenum Language {\n    ENG = \"English\",\n    TL = \"Tamil\",\n    SI = \"Sinhala\"\n}\n\npublic function main() {\n    io:println(RED);\n    io:println(ENG);\n}", "outputFileName":"enumerations.out", "output":"bal run enumerations.bal\nRED\nEnglish"}], "description":"\/\/ `Enumerations` are shorthand for unions of `string` constants. A `const` can be used as a singleton type.\n\/\/ An `enum` is not a distinct type. You can specify the string constants explicitly.", "metatags":"description: This BBE demonstrates enumerations in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, enum, enumerations"}, {"bbeName":"environment-variables", "resources":[{"tag":"variables", "balFileName":"environment_variables.bal", "bal":"import ballerina\/io;\nimport ballerina\/os;\n\npublic function main() {\n    \/\/ Returns the environment variable value associated with the `HTTP_PORT`.\n    string port = os:getEnv(\"HTTP_PORT\");\n    io:println(\"HTTP_PORT: \", port);\n\n    \/\/ Returns the username of the current user.\n    string username = os:getUsername();\n    io:println(\"Username: \", username);\n\n    \/\/ Returns the current user's home directory path.\n    string userHome = os:getUserHome();\n    io:println(\"Userhome: \", userHome);\n}", "outputFileName":"environment_variables.out", "output":"bal run environment_variables.bal\nHTTP_PORT: 5005\nUsername: Alex\nUserhome: \/Users\/Alex"}], "description":"\/\/ The `os` library provides functions to retrieve information about the OS and the current users of the OS.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OS module](https:\/\/docs.central.ballerina.io\/ballerina\/os\/latest\/).", "metatags":"description: BBE on how to to retrieve information about the OS.\nkeywords: ballerina, ballerina by examples, BBE, OS, environment"}, {"bbeName":"error-handling", "resources":[{"tag":"handling", "balFileName":"error_handling.bal", "bal":"import ballerina\/io;\n\n\/\/ Converts bytes to a string and then to an int.\nfunction intFromBytes(byte[] bytes) returns int|error {\n\n    string|error ret = string:fromBytes(bytes);\n\n    \/\/ The `is` operator can be used to distinguish errors\n    \/\/ from other values.\n    if ret is error {\n\n        return ret;\n    } else {\n        return int:fromString(ret);\n    }\n}\n\n\/\/ The `main` function can return an error.\npublic function main() returns error? {\n\n    int|error res = intFromBytes([104, 101, 108, 108, 111]);    \n    if res is error {\n        \/\/ The `check` expression is shorthand for this pattern of\n        \/\/ checking if a value is an error and returning that value.\n        return res;\n\n    } else {\n        io:println(\"result: \", res);\n        return;\n    }\n}", "outputFileName":"error_handling.out", "output":"bal run error_handling.bal\nerror: {ballerina\/lang.int}NumberParsingError {\"message\":\"'string' value 'hello' cannot be converted to 'int'\"}"}], "description":"\/\/ Usually, a function handles errors by passing them up to its caller.\n\/\/ The `main` function can also return an error.", "metatags":"description: This BBE demonstrates how errors are handled in Ballerina\nkeywords:  ballerina, ballerina by example, bbe, error, error handling"}, {"bbeName":"error-reporting", "resources":[{"tag":"reporting", "balFileName":"error_reporting.bal", "bal":"import ballerina\/io;\n\n\/\/ Parses a string to convert to an integer value.\n\/\/ This function may return error values.\n\/\/ The return type is a union with the error.\nfunction parse(string s) returns int|error {\n\n    int n = 0;\n    int[] cps = s.toCodePointInts();\n    foreach int cp in cps {\n        int p = cp - 0x30;\n        if p < 0 || p > 9 {\n            \/\/ If `p` is not a digit construct, it returns\n            \/\/ an error value with \"not a digit\" as the error message.\n            return error(\"not a digit\");\n\n        }\n        n = n * 10 + p;\n    }\n    return n;\n}\n\npublic function main() {\n    \/\/ An `int` value is returned when the argument is a string,\n    \/\/ which can be parsed successfully  as an integer.\n    int|error x = parse(\"123\");\n\n    io:println(x);\n\n    \/\/ An `error` value is returned when the argument is a string,\n    \/\/ which has a character that is not a digit.\n    int|error y = parse(\"1h\");\n\n    io:println(y);\n}", "outputFileName":"error_reporting.out", "output":"bal run error_reporting.bal\n123\nerror(\"not a digit\")"}], "description":"\/\/ Ballerina does not have exceptions. Errors are reported by functions returning\n\/\/ error values.\n\/\/ `error` is its own basic type.\n\/\/ The return type of a function that may return an error value will be a union with error.\n\/\/ An error value includes a `string` message.\n\/\/ An error value includes stack trace from the point where `error(msg)` is called.\n\/\/ Error values are immutable.", "metatags":"description: This BBE demonstrates how errors are reported in Ballerina\nkeywords:  ballerina, ballerina by example, bbe, error, error reporting"}, {"bbeName":"error-subtyping", "resources":[{"tag":"subtyping", "balFileName":"error_subtyping.bal", "bal":"import ballerina\/io;\n\n\/\/ `distinct` creates a new subtype.\ntype XErr distinct error;\ntype YErr distinct error;\n\ntype Err XErr|YErr;\n\n\/\/ The name of the distinct type can be used with the error\n\/\/ constructor to create an error value of that type.\n\/\/ `err` holds an error value of type `XErr`.\nErr err = error XErr(\"Whoops!\");\n\nfunction desc(Err err) returns string {\n    \/\/ The `is` operator can be used to distinguish distinct subtypes.\n    return err is XErr ? \"X\" : \"Y\";\n\n}\n\npublic function main() {\n    io:println(desc(err));\n}", "outputFileName":"error_subtyping.out", "output":"bal run error_subtyping.bal\nX"}], "description":"\/\/ `distinct` creates a new subtype and can be used to define\n\/\/ subtypes of `error`.\n\/\/ The name of the distinct error type can be used with the error\n\/\/ constructor to create an error value of that type.\n\/\/ Works like a nominal type: `is` operator can be used to \n\/\/ distinguish distinct subtypes.\n\/\/ Each occurrence of `distinct` has a unique identifier that is \n\/\/ used to tag instances of the type.", "metatags":"description: This BBE demonstrates how subtypes of errors are defined in Ballerina\nkeywords:  ballerina, ballerina by example, bbe, error, error subtypes"}, {"bbeName":"filepaths", "resources":[{"tag":"filepaths", "balFileName":"filepaths.bal", "bal":"import ballerina\/file;\nimport ballerina\/io;\n\npublic function main() returns error? {\n    \/\/ Gets the absolute representation of the path.\n    string absValue = check file:getAbsolutePath(\"test.txt\");\n    io:println(\"Absolute path: \", absValue);\n\n    \/\/ Checks whether the path is absolute.\n    boolean isAbs = check file:isAbsolutePath(\"\/A\/B\/C\");\n    io:println(\"\/A\/B\/C is absolute: \", isAbs);\n\n    \/\/ Gets the base name of the path.\n    string name = check file:basename(\"\/A\/B\/C\");\n    io:println(\"Filename of \/A\/B\/C: \", name);\n\n    \/\/ Gets the enclosing parent directory.\n    string parentPath = check file:parentPath(\"\/A\/B\/C\");\n    io:println(\"Parent of \/A\/B\/C: \", parentPath);\n\n    \/\/ Gets the shortest path name equivalent to the path by purely lexical processing.\n    string normalizedPath = check file:normalizePath(\"foo\/..\/bar\", file:CLEAN);\n    io:println(\"Normalized path of foo\/..\/bar: \", normalizedPath);\n\n    \/\/ Gets the list of path elements joined by the OS-specific path separator.\n    string[] parts = check file:splitPath(\"\/A\/B\/C\");\n    io:println(string `Path elements of \/A\/B\/C: ${parts.toString()}`);\n\n    \/\/ Joins any number of path elements into a single path.\n    string path = check file:joinPath(\"\/\", \"foo\", \"bar\");\n    io:println(\"Built path of '\/', 'foo', 'bar': \", path);\n\n    \/\/ Returns a relative path that is logically equivalent to the target path when joined to the base path.\n    string relPath = check file:relativePath(\"a\/b\/c\", \"a\/c\/d\");\n    io:println(\"Relative path between 'a\/b\/c' and 'a\/c\/d': \", relPath);\n}", "outputFileName":"filepaths.out", "output":"bal run filepaths.bal\nOn Unix:\nAbsolute path of test.txt: \/A\/test.txt\n\/A\/B\/C is absolute: true\nFilename of \/A\/B\/C: C\nParent of \/A\/B\/C: \/A\/B\nNormalized path of foo\/..\/bar: bar\nPath elements of \/A\/B\/C: [\"A\",\"B\",\"C\"]\nBuilt path of '\/', 'foo', 'bar': \/foo\/bar\nRelative path between 'a\/b\/c' and 'a\/c\/d': ..\/..\/c\/d\n\nOn Windows:\nAbsolute path of test.txt: \\A\\test.txt\n\/A\/B\/C is absolute: false\nFilename of \/A\/B\/C: C\nParent of \/A\/B\/C: \\A\\B\nNormalized path of foo\/..\/bar: bar\nPath elements of \/A\/B\/C: [\"A\",\"B\",\"C\"]\nBuilt path of '\/', 'foo', 'bar': \\foo\\bar\nRelative path between 'a\/b\/c' and 'a\/c\/d': ..\\..\\c\\d"}], "description":"\/\/ The Ballerina File API also contains utility functions to manipulate file paths in a way that is compatible with the\n\/\/ target operating system.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [File module](https:\/\/docs.central.ballerina.io\/ballerina\/file\/latest\/).", "metatags":"description: This BBE shows how to manipulate file paths in a way that is compatible with the target Operating System in Ballerina.\nkeywords: ballerina, ballerina by examples, BBE, file, directory, path, filepath"}, {"bbeName":"files", "resources":[{"tag":"files", "balFileName":"files.bal", "bal":"import ballerina\/file;\nimport ballerina\/io;\n\npublic function main() returns error? {\n\n    \/\/ Creates a file in the given file path.\n    check file:create(\"bar.txt\");\n    io:println(\"The bar.txt file created successfully.\");\n\n    \/\/ Checks whether the file exists on the provided path.\n    boolean fileExists = check file:test(\"bar.txt\", file:EXISTS);\n    io:println(\"Is the bar.txt file exist: \", fileExists.toString());\n\n    \/\/ Checks whether the file is readable or not.\n    fileExists = check file:test(\"bar.txt\", file:READABLE);\n    io:println(\"Is the bar.txt file readable: \", fileExists.toString());\n\n    \/\/ Checks whether the file is writable or not.\n    fileExists = check file:test(\"bar.txt\", file:WRITABLE);\n    io:println(\"Is the bar.txt file writeable: \", fileExists.toString());\n\n    \/\/ Copies the file or directory to the new path.\n    check file:copy(\"bar.txt\",  \"bar1.txt\", file:REPLACE_EXISTING);\n    io:println(\"The bar.txt file copied successfully.\");\n\n    check file:rename(\"bar.txt\", \"bar2.txt\");\n    io:println(\"The bar.txt file renamed successfully.\");\n\n    \/\/ Gets the metadata information of the file.\n    file:MetaData fileMetadata = check file:getMetaData(\"bar1.txt\");\n    io:println(\"File path: \", fileMetadata.absPath);\n    io:println(\"File size: \", fileMetadata.size.toString());\n    io:println(\"Is directory: \", fileMetadata.dir.toString());\n    io:println(\"Modified at \", fileMetadata.modifiedTime.toString());\n\n    \/\/ Removes the file in the specified file path.\n    check file:remove(\"bar1.txt\");\n    check file:remove(\"bar2.txt\");\n    io:println(\"Files removed successfully.\");\n}", "outputFileName":"files.out", "output":"bal run files.bal\nThe bar.txt file created successfully.\nIs the bar.txt file exists: true\nIs the bar.txt file readable: true\nIs the bar.txt file writeable: true\nThe bar.txt file copied successfully.\nThe bar.txt file renamed successfully.\nFile path: \/A\/B\/bar1.txt\nFile size: 0\nIs directory: false\nModified at 1621858537 0.851000000"}], "description":"\/\/ The Ballerina File API contains functions to perform file-system operations.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [File module](https:\/\/docs.central.ballerina.io\/ballerina\/file\/latest\/).", "metatags":"description: This BBE shows how to perform file-system operations in Ballerina.\nkeywords: ballerina, ballerina by examples, BBE, file, path"}, {"bbeName":"floating-point-numbers", "resources":[{"tag":"numbers", "balFileName":"floating_point_numbers.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    float x = 1.0;\n\n    int n = 5;\n\n    \/\/ No implicit conversions between integers and floating point values are allowed.\n    \/\/ You can use `<T>` for explicit conversions.\n    float y = x + <float>n;\n\n    io:println(y);\n}", "outputFileName":"floating_point_numbers.out", "output":"bal run floating_point_numbers.bal \n6.0"}], "description":"\/\/ The `float` type is IEEE 64-bit binary floating point (same as `double` in Java) and supports the same arithmetic\n\/\/ operators as `int`.", "metatags":"description: This BBE introduces the float type in Ballerina.\nkeywords:  ballerina, ballerina by example, bbe, floating point numbers, float, NaN"}, {"bbeName":"foreach-statement", "resources":[{"tag":"statement", "balFileName":"foreach_statement.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    float v1 = sum([10.5, 20.5, 30.5]);\n    float v2 = sum2([10.5, 20.5, 30.5]);\n    io:println(\"v1:\", v1, \" v2:\", v2);\n}\n\nfunction sum(float[] v) returns float {\n    float r = 0.0;\n    \/\/ `foreach` statement can be used to iterate an `array`.\n    \/\/ Each iteration returns an element in the `array`.\n    foreach float x in v {\n        r += x;\n    }\n\n    return r;\n}\n\nfunction sum2(float[] v) returns float {\n    float r = 0.0;\n    \/\/ `m ..< n` creates a value that when iterated over will give the\n    \/\/ integers starting from `m` that are `< n`.\n    foreach int i in 0 ..< v.length() {\n        r += v[i];\n    }\n\n    return r;\n}", "outputFileName":"foreach_statement.out", "output":"bal run foreach_statement.bal\nv1:61.5 v2:61.5"}], "description":"\/\/ The `foreach` statement iterates over an iterable value, by binding a variable to each member of the\n\/\/ iterable value in order. `foreach` also works for strings, and will iterate over each character of the `string`.", "metatags":"description: This BBE demonstrates foreach statement in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, foreach, loops"}, {"bbeName":"ftp-client", "resources":[{"tag":"client", "balFileName":"ftp_client.bal", "bal":"import ballerina\/ftp;\nimport ballerina\/io;\nimport ballerina\/lang.'string as strings;\n\npublic function main() returns error? {\n    \/\/ Creates the client with the connection parameters, host, username, and\n    \/\/ password. An error is returned in a failure. The default port number\n    \/\/ `21` is used with these configurations.\n    ftp:ClientConfiguration config = {\n        protocol: ftp:FTP,\n        host: \"ftp.example.com\",\n        port: 21,\n        auth: {credentials: {username: \"user1\", password: \"pass456\"}}\n    };\n    ftp:Client clientEp = check new(config);\n\n    \/\/ Reads a file from a FTP server for a given file path. In error cases, \n    \/\/ an error is returned.\n    stream<byte[] & readonly, io:Error?> fileStream\n        = check clientEp->get(\"\/server\/book.txt\");\n    check fileStream.forEach(isolated \n        function(byte[] & readonly fileContent) {\n            io:println(\"File content received: \"\n                + checkpanic strings:fromBytes(fileContent));\n        }\n    );\n\n    \/\/ Add a new file to the given file location. In error cases, \n    \/\/ an error is returned. The local file is provided as a stream of\n    \/\/ `io:Block` in which 1024 is the block size.\n    stream<io:Block, io:Error?> bStream\n        = check io:fileReadBlocksAsStream(\"\/local\/logFile.txt\", 1024);\n    check clientEp->put(\"\/server\", bStream);\n\n    \/\/ Closes the file stream to finish the `get` and `put` operations.    \n    check fileStream.close();\n\n}", "outputFileName":"ftp_client.out", "output":"bal run ftp_client.bal\n\n# File content of the received file would get printed.\n# The newly-added file will appear in the FTP server."}], "description":"\/\/ The FTP client is used to perform CRUD operation on remote files\/directories\n\/\/ using the FTP protocol. This sample includes getting and putting file\n\/\/ content with default configurations using the default port number.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [FTP module](https:\/\/docs.central.ballerina.io\/ballerina\/ftp\/latest\/).", "metatags":"description: This is a BBE on getting and putting file content on a remote FTP server.\nkeywords: ballerina, ballerina by example, bbe, FTP"}, {"bbeName":"ftp-listener", "resources":[{"tag":"listener", "balFileName":"ftp_listener.bal", "bal":"import ballerina\/ftp;\nimport ballerina\/io;\n\n\/\/ Creates the listener with the connection parameters and the protocol-related\n\/\/ configuration. The polling interval specifies the time duration between each\n\/\/ poll performed by the listener in seconds. The listener listens to the files\n\/\/ with the given file name pattern located in the specified path.\nlistener ftp:Listener remoteServer = check new({\n    protocol: ftp:FTP,\n    host: \"ftp.example.com\",\n    auth: {\n        credentials: {\n            username: \"user1\",\n            password: \"pass456\"\n        }\n    },\n    port: 21,\n    path: \"\/home\/in\",\n    pollingInterval: 2,\n    fileNamePattern: \"(.*).txt\"\n});\n\n\/\/ One or many services can listen to the FTP listener for the\n\/\/ periodically-polled file related events.\nservice on remoteServer {\n\n    \/\/ When a file event is successfully received, the `onFileChange` method is\n    \/\/ called.\n    remote function onFileChange(ftp:WatchEvent event) {\n\n        \/\/ `addedFiles` contains the paths of the newly-added files\/directories\n        \/\/ after the last polling was called.\n        foreach ftp:FileInfo addedFile in event.addedFiles {\n            io:println(\"Added file path: \" + addedFile.path);\n        }\n\n        \/\/ `deletedFiles` contains the paths of the deleted files\/directories\n        \/\/ after the last polling was called.\n        foreach string deletedFile in event.deletedFiles {\n            io:println(\"Deleted file path: \" + deletedFile);\n        }\n    }\n}", "outputFileName":"ftp_listener.out", "output":"bal run ftp_listener.bal\n\n# Paths of the newly-added and newly-deleted files\/directories during the\n# latest polling will be printed for each of the polled events."}], "description":"\/\/ The FTP listener is used to receive file\/directory changes that occur in a remote\n\/\/ location using the FTP protocol. This sample includes receiving\n\/\/ file\/directory related change events from a listener with default\n\/\/ configurations using the default port.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [FTP module](https:\/\/docs.central.ballerina.io\/ballerina\/ftp\/latest\/).", "metatags":"description: This BBE is about receiving file\/directory changes that occur in a remote FTP server. It has a listener-based functionality for receiving these events.\nkeywords: ballerina, ballerina by example, bbe, FTP, remote file, listener"}, {"bbeName":"function-values", "resources":[{"tag":"values", "balFileName":"function_values.bal", "bal":"import ballerina\/io;\n\n\/\/ Anonymous function syntax.\nvar isOdd = function(int n) returns boolean {\n    return n % 2 != 0;\n};\n\n\/\/ Function type syntax.\ntype IntFilter function (int n) returns boolean;\n\n\/\/ Module-level function definition.\nfunction isEven(int n) returns boolean {\n    return n % 2 == 0;\n}\n\npublic function main() {\n    \/\/ The `isEven` function  referred as a value.\n    IntFilter f = isEven;\n\n    int[] nums = [1, 2, 3];\n\n    \/\/ Arrays provide the usual functional methods: \n    \/\/ `filter`, `map`, `forEach`, and `reduce`.\n    int[] evenNums = nums.filter(f);\n\n    io:println(evenNums);\n\n    \/\/ Shorthand syntax when the type is inferred and the body is an expression.\n    int[] oddNums = nums.filter(n => n % 2 != 0);\n\n    io:println(oddNums);\n}", "outputFileName":"function_values.out", "output":"bal run function_values.bal\n[2]\n[1,3]"}], "description":"\/\/ Functions are values and work as closures \n\/\/ Function type is a Separate basic type\n\/\/ Anonymous function and type syntax look like function definition without the name.", "metatags":"description: This BBE demonstrates function values, type, and syntax for writing function values. \nkeywords:  ballerina, ballerina by example, bbe, functions, lambda, "}, {"bbeName":"functions", "resources":[{"tag":"functions", "balFileName":"functions.bal", "bal":"import ballerina\/io;\n\n\/\/ This function definition has two parameters of type `int`. \n\/\/ `returns` clause specifies type of return value.\nfunction add(int x, int y) returns int {\n\n    int sum = x + y;\n    \/\/ `return` statement returns a value.\n    return sum;\n\n}\n\npublic function main() {\n    io:println(add(5, 11));\n}", "outputFileName":"functions.out", "output":"bal run functions.bal\n16"}], "description":"\/\/ A function accepts zero or more arguments and returns a single value.\n\/\/ Function parameters are declared as in C. You are not allowed to assign to parameters in Ballerina.", "metatags":"description: This BBE introduces functions in Ballerina.\nkeywords:  ballerina, ballerina by example, bbe, functions"}, {"bbeName":"gauge-metrics", "resources":[{"tag":"metrics", "balFileName":"gauge_metrics.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\nimport ballerina\/log;\nimport ballerina\/observe;\nimport ballerinax\/prometheus as _;\n\n\/\/Create a gauge as a global variable in the service with the optional field description,\n\/\/default statistics configurations = { timeWindow: 600000, buckets: 5,\n\/\/ and percentiles: [0.33, 0.5, 0.66, 0.99] }.\nobserve:Gauge globalGauge = new (\"global_gauge\", \"Global gauge defined\");\n\nservice \/onlineStoreService on new http:Listener(9090) {\n\n    resource function get makeOrder(http:Caller caller, http:Request req) {\n        io:println(\"------------------------------------------\");\n        \/\/Incrementing the global gauge defined by 15.0.\n        globalGauge.increment(15.0);\n        \/\/Log the current state of global gauge.\n        printGauge(globalGauge);\n\n\n        \/\/Create a gauge with simply a name, and default statistics configurations.\n        observe:Gauge localGauge = new (\"local_operations\");\n        \/\/Increment the local gauge by default value 1.0.\n        localGauge.increment();\n        \/\/Increment the value of the gauge by 20.\n        localGauge.increment(20.0);\n        \/\/Decrement the local gauge by default value 1.0.\n        localGauge.decrement();\n        \/\/Decrement the value of the gauge by 20.\n        localGauge.decrement(10.0);\n        \/\/Log the current state of local gauge.\n        printGauge(localGauge);\n\n\n        \/\/Create a gauge with optional fields description, and tags defined.\n        observe:Gauge registeredGaugeWithTags =\n                  new (\"registered_gauge_with_tags\", \"RegisteredGauge\",\n                       {property: \"gaugeProperty\", gaugeType: \"RegisterType\"});\n\n        \/\/Register the gauge instance, therefore it is stored in the global registry and can be reported to the\n        \/\/metrics server such as Prometheus. Additionally, this operation will register to the global registry for the\n        \/\/first invocation and will throw an error if there is already a registration of different metrics instance\n        \/\/or type. And subsequent invocations of register() will simply retrieve the stored metrics instance\n        \/\/for the provided name and tags fields, and use that instance for the subsequent operations on the\n        \/\/Counter instance.\n        error? result = registeredGaugeWithTags.register();\n        if (result is error) {\n            log:printError(\"Error in registering gauge\", 'error = result);\n        }\n\n        \/\/Set the value of the gauge with the new value.\n        registeredGaugeWithTags.increment();\n        float value = registeredGaugeWithTags.getValue();\n        float newValue = value * 12.0;\n        registeredGaugeWithTags.setValue(newValue);\n        \/\/Log the current state of registered gauge with tags.\n        printGauge(registeredGaugeWithTags);\n\n\n        \/\/Create a gauge with statistics disabled by passing empty statistics config array.\n        observe:StatisticConfig[] statsConfigs = [];\n        observe:Gauge gaugeWithNoStats = new (\"gauge_with_no_stats\",\n                                        \"Some description\", (), statsConfigs);\n        gaugeWithNoStats.setValue(100);\n        printGauge(gaugeWithNoStats);\n\n\n        \/\/Create gauge with custom statistics config.\n        observe:StatisticConfig config = {\n            timeWindow: 30000,\n            percentiles: [0.33, 0.5, 0.9, 0.99],\n            buckets: 3\n        };\n        statsConfigs[0] = config;\n        observe:Gauge gaugeWithCustomStats = new (\"gauge_with_custom_stats\",\n                                        \"Some description\", (), statsConfigs);\n        int i = 1;\n        while (i < 6) {\n            gaugeWithCustomStats.setValue(<float>(100 * i));\n            i = i + 1;\n        }\n        \/\/Log the current state of registered gauge with tags.\n        printGauge(gaugeWithCustomStats);\n\n        io:println(\"------------------------------------------\");\n\n        \/\/Send response to the client.\n        http:Response res = new;\n        \/\/ Use a util method to set a string payload.\n        res.setPayload(\"Order Processed!\");\n\n        \/\/ Send the response back to the caller.\n        result = caller->respond(res);\n\n        if (result is error) {\n            log:printError(\"Error sending response\", 'error = result);\n        }\n    }\n}\n\nfunction printGauge(observe:Gauge gauge) {\n    \/\/Get the statistics snapshot of the gauge.\n    io:print(\"Gauge - \" + gauge.name + \" Snapshot: \");\n    observe:Snapshot[]? snapshots = gauge.getSnapshot();\n    json|error snapshotAsAJson = snapshots.cloneWithType(json);\n    if snapshotAsAJson is json {\n        io:println(snapshotAsAJson.toJsonString());\n    }\n    \/\/Get the current value of the gauge.\n    io:println(\"Gauge - \", gauge.name, \" Current Value: \"\n        , gauge.getValue());\n}", "outputFileName":"gauge_metrics.server.out", "output":"# To start the service, navigate to the directory that contains the\n# `.bal` file and execute the `bal run` command below with the `--observability-included` build time flag and the `Config.toml` runtime configuration file.\nBAL_CONFIG_FILES=Config.toml bal run --observability-included gauge_metrics.bal\n\nballerina: started Prometheus HTTP listener 0.0.0.0:9797\n------------------------------------------\nGauge - global_gauge Snapshot: [{\"timeWindow\":600000, \"mean\":15.0, \"max\":15.0, \"min\":15.0, \"stdDev\":0.0, \"percentileValues\":[{\"percentile\":0.33, \"value\":15.0}, {\"percentile\":0.5, \"value\":15.0}, {\"percentile\":0.66, \"value\":15.0}, {\"percentile\":0.75, \"value\":15.0}, {\"percentile\":0.95, \"value\":15.0}, {\"percentile\":0.99, \"value\":15.0}, {\"percentile\":0.999, \"value\":15.0}]}]\nGauge - global_gauge Current Value: 15.0\nGauge - local_operations Snapshot: [{\"timeWindow\":600000, \"mean\":13.0390625, \"max\":21.1171875, \"min\":1.0, \"stdDev\":8.180620171277893, \"percentileValues\":[{\"percentile\":0.33, \"value\":10.0546875}, {\"percentile\":0.5, \"value\":10.0546875}, {\"percentile\":0.66, \"value\":20.1171875}, {\"percentile\":0.75, \"value\":20.1171875}, {\"percentile\":0.95, \"value\":21.1171875}, {\"percentile\":0.99, \"value\":21.1171875}, {\"percentile\":0.999, \"value\":21.1171875}]}]\nGauge - local_operations Current Value: 10.0\nGauge - registered_gauge_with_tags Snapshot: [{\"timeWindow\":600000, \"mean\":6.515625, \"max\":12.0546875, \"min\":1.0, \"stdDev\":5.515625, \"percentileValues\":[{\"percentile\":0.33, \"value\":1.0}, {\"percentile\":0.5, \"value\":1.0}, {\"percentile\":0.66, \"value\":12.0546875}, {\"percentile\":0.75, \"value\":12.0546875}, {\"percentile\":0.95, \"value\":12.0546875}, {\"percentile\":0.99, \"value\":12.0546875}, {\"percentile\":0.999, \"value\":12.0546875}]}]\nGauge - registered_gauge_with_tags Current Value: 12.0\nGauge - gauge_with_no_stats Snapshot: null\nGauge - gauge_with_no_stats Current Value: 100.0\nGauge - gauge_with_custom_stats Snapshot: [{\"timeWindow\":30000, \"mean\":300.7, \"max\":501.5, \"min\":100.0, \"stdDev\":141.775033062948, \"percentileValues\":[{\"percentile\":0.33, \"value\":200.5}, {\"percentile\":0.5, \"value\":301.5}, {\"percentile\":0.9, \"value\":501.5}, {\"percentile\":0.99, \"value\":501.5}]}]\nGauge - gauge_with_custom_stats Current Value: 500.0\n------------------------------------------\n------------------------------------------\nGauge - global_gauge Snapshot: [{\"timeWindow\":600000, \"mean\":22.53125, \"max\":30.0625, \"min\":15.0, \"stdDev\":7.53125, \"percentileValues\":[{\"percentile\":0.33, \"value\":15.0}, {\"percentile\":0.5, \"value\":15.0}, {\"percentile\":0.66, \"value\":30.0625}, {\"percentile\":0.75, \"value\":30.0625}, {\"percentile\":0.95, \"value\":30.0625}, {\"percentile\":0.99, \"value\":30.0625}, {\"percentile\":0.999, \"value\":30.0625}]}]\nGauge - global_gauge Current Value: 30.0\nGauge - local_operations Snapshot: [{\"timeWindow\":600000, \"mean\":13.0390625, \"max\":21.1171875, \"min\":1.0, \"stdDev\":8.180620171277893, \"percentileValues\":[{\"percentile\":0.33, \"value\":10.0546875}, {\"percentile\":0.5, \"value\":10.0546875}, {\"percentile\":0.66, \"value\":20.1171875}, {\"percentile\":0.75, \"value\":20.1171875}, {\"percentile\":0.95, \"value\":21.1171875}, {\"percentile\":0.99, \"value\":21.1171875}, {\"percentile\":0.999, \"value\":21.1171875}]}]\nGauge - local_operations Current Value: 10.0\nGauge - registered_gauge_with_tags Snapshot: [{\"timeWindow\":600000, \"mean\":55.4140625, \"max\":156.9921875, \"min\":1.0, \"stdDev\":61.38432884406833, \"percentileValues\":[{\"percentile\":0.33, \"value\":12.0546875}, {\"percentile\":0.5, \"value\":12.0546875}, {\"percentile\":0.66, \"value\":52.2421875}, {\"percentile\":0.75, \"value\":52.2421875}, {\"percentile\":0.95, \"value\":156.9921875}, {\"percentile\":0.99, \"value\":156.9921875}, {\"percentile\":0.999, \"value\":156.9921875}]}]\nGauge - registered_gauge_with_tags Current Value: 156.0\nGauge - gauge_with_no_stats Snapshot: null\nGauge - gauge_with_no_stats Current Value: 100.0\nGauge - gauge_with_custom_stats Snapshot: [{\"timeWindow\":30000, \"mean\":300.7, \"max\":501.5, \"min\":100.0, \"stdDev\":141.775033062948, \"percentileValues\":[{\"percentile\":0.33, \"value\":200.5}, {\"percentile\":0.5, \"value\":301.5}, {\"percentile\":0.9, \"value\":501.5}, {\"percentile\":0.99, \"value\":501.5}]}]\nGauge - gauge_with_custom_stats Current Value: 500.0\n------------------------------------------\n------------------------------------------\nGauge - global_gauge Snapshot: [{\"timeWindow\":600000, \"mean\":30.0625, \"max\":45.1875, \"min\":15.0, \"stdDev\":12.298479750223873, \"percentileValues\":[{\"percentile\":0.33, \"value\":15.0}, {\"percentile\":0.5, \"value\":30.0625}, {\"percentile\":0.66, \"value\":30.0625}, {\"percentile\":0.75, \"value\":45.1875}, {\"percentile\":0.95, \"value\":45.1875}, {\"percentile\":0.99, \"value\":45.1875}, {\"percentile\":0.999, \"value\":45.1875}]}]\nGauge - global_gauge Current Value: 45.0\nGauge - local_operations Snapshot: [{\"timeWindow\":600000, \"mean\":13.0390625, \"max\":21.1171875, \"min\":1.0, \"stdDev\":8.180620171277893, \"percentileValues\":[{\"percentile\":0.33, \"value\":10.0546875}, {\"percentile\":0.5, \"value\":10.0546875}, {\"percentile\":0.66, \"value\":20.1171875}, {\"percentile\":0.75, \"value\":20.1171875}, {\"percentile\":0.95, \"value\":21.1171875}, {\"percentile\":0.99, \"value\":21.1171875}, {\"percentile\":0.999, \"value\":21.1171875}]}]\nGauge - local_operations Current Value: 10.0\nGauge - registered_gauge_with_tags Snapshot: [{\"timeWindow\":600000, \"mean\":377.1927083333333, \"max\":1887.9921875, \"min\":1.0, \"stdDev\":676.7534301455432, \"percentileValues\":[{\"percentile\":0.33, \"value\":12.0546875}, {\"percentile\":0.5, \"value\":52.2421875}, {\"percentile\":0.66, \"value\":156.9921875}, {\"percentile\":0.75, \"value\":157.9921875}, {\"percentile\":0.95, \"value\":1887.9921875}, {\"percentile\":0.99, \"value\":1887.9921875}, {\"percentile\":0.999, \"value\":1887.9921875}]}]\nGauge - registered_gauge_with_tags Current Value: 1884.0\nGauge - gauge_with_no_stats Snapshot: null\nGauge - gauge_with_no_stats Current Value: 100.0\nGauge - gauge_with_custom_stats Snapshot: [{\"timeWindow\":30000, \"mean\":300.7, \"max\":501.5, \"min\":100.0, \"stdDev\":141.775033062948, \"percentileValues\":[{\"percentile\":0.33, \"value\":200.5}, {\"percentile\":0.5, \"value\":301.5}, {\"percentile\":0.9, \"value\":501.5}, {\"percentile\":0.99, \"value\":501.5}]}]\nGauge - gauge_with_custom_stats Current Value: 500.0\n------------------------------------------"}], "description":"\/\/ Ballerina supports Observability out of the box and Metrics is one of the three important aspects of the\n\/\/ Observability. To observe Ballerina code, the build time flag `--observability-included` should be given along with the\n\/\/ `Config.toml` file when starting the service. The `Config.toml` file contains the required runtime configurations related to observability.\n\/\/ The developers can define and use metrics to measure their own logic. A gauge is one type of the metrics that is\n\/\/ supported by default in Ballerina, and it represents a single numerical value that can arbitrarily go up and down,\n\/\/ and also based on the statistics configurations provided to the Gauge, it can also report the statistics such as max,\n\/\/ min, mean, percentiles, etc.<br\/><br\/>\n\/\/ For more information about configs and observing applications, see [Observing Ballerina Code](https:\/\/ballerina.io\/learn\/observing-ballerina-code\/).", "metatags":"description: BBE on how to use the default Gauge Metrics Observability feature in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, observability, tracing, opentracing, gauge"}, {"bbeName":"graphql-context", "resources":[{"tag":"context", "balFileName":"graphql_context.bal", "bal":"import ballerina\/graphql;\nimport ballerina\/http;\nimport ballerina\/lang.value;\n\n@graphql:ServiceConfig {\n    \/\/ Initialization of the `graphqlContext` should be provided to the\n    \/\/ `contextInit` field.\n    contextInit: isolated function (http:RequestContext requestContext,\n                                    http:Request request)\n                                    returns graphql:Context|error {\n\n        \/\/ Initialize the `graphql:Context` object.\n        graphql:Context context = new;\n\n        \/\/ Retrieve the header named `scope` and add it to the context with the\n        \/\/ `scope` key. If the header does not exist, this will return an\n        \/\/ `error`, and thereby, the request will not be processed.\n        check context.add(\"scope\", check request.getHeader(\"scope\"));\n\n        \/\/ Finally, the context object has to be returned.\n        return context;\n\n    }\n}\nservice \/graphql on new graphql:Listener(4000) {\n\n    \/\/ Define a `Person` object when the service is initialized.\n    private final Person person;\n\n    function init() {\n        \/\/ Initialize the `person` value.\n        self.person = new(\"Walter White\", 51, 737000.00);\n\n    }\n\n    \/\/ Resource functions can be defined without a context parameter.\n    resource function get greet() returns string {\n        return \"Hello, world\";\n    }\n\n    \/\/ If the context is needed, it should be defined as the first paramter of\n    \/\/ the resolver function.\n    resource function get profile(graphql:Context context)\n    returns Person|error {\n\n        \/\/ Retrieve the `scope` attribute from the context. This will return\n        \/\/ a `graphql:Error` if the `scope` is not\n        \/\/ found in the context.\n        value:Cloneable|isolated object {} scope = check context.get(\"scope\");\n\n        \/\/ The profile information will be returned for the scope of either\n        \/\/ `admin` or `user`.\n        if scope is string {\n            if scope == \"admin\" || scope == \"user\" {\n                return self.person;\n            }\n        }\n\n        \/\/ Return an `error` if the required scope is not found.\n        return error(\"Permission denied\");\n    }\n}\n\n\/\/ Define a service class to use as an object in the GraphQL service.\npublic service class Person {\n\n    private final string name;\n    private final int age;\n    private final float salary;\n\n    function init(string name, int age, float salary) {\n        self.name = name;\n        self.age = age;\n        self.salary = salary;\n    }\n\n    resource function get name() returns string {\n        return self.name;\n    }\n\n    resource function get age() returns int {\n        return self.age;\n    }\n\n    resource function get salary(graphql:Context context) returns float|error {\n\n        \/\/ Retrieve the `scope` attribute from the context.\n        value:Cloneable|isolated object {} scope = check context.get(\"scope\");\n\n        \/\/ The `salary` value will only be returned if the `scope` is `admin`.\n        if scope is string {\n            if scope == \"admin\" {\n                return self.salary;\n            }\n        }\n\n        \/\/ Return an `error` if the required scope is not found.\n        return error(\"Permission denied\");\n\n    }\n}", "outputFileName":"graphql_context.server.out", "output":"bal run graphql_context.bal"}], "description":"\/\/ The `graphql:Context` object can be used to pass meta information between the resolver functions. An init function\n\/\/ should be provided using the `graphql:ServiceConfig` parameter named `contextInit`. Inside the init function, the\n\/\/ `graphql:Context` can be initialized. Values from the `http:RequestContext` and `http:Request` can be added as well as\n\/\/ other values. These values are stored as key-value pairs. The key is a `string` and the value can be any `readonly`\n\/\/ value or an `isolated` object. If the init function is not provided, an empty context object will be created.\n\/\/ The context can be accessed by defining it as the first parameter of any resolver (resource\/remote) function.\n\/\/ <br\/><br\/>\n\/\/ For more information on the underlying package, see the\n\/\/ [`graphql` package](https:\/\/docs.central.ballerina.io\/ballerina\/graphql\/latest\/).", "metatags":"description: A GraphQL service endpoint written in Ballerina\nkeywords: ballerina, ballerina by example, bbe, graphql, graphql context"}, {"bbeName":"graphql-hello-world", "resources":[{"tag":"world", "balFileName":"graphql_hello_world.bal", "bal":"import ballerina\/graphql;\n\n\/\/ The `graphql:Service` exposes a GraphQL service on the provided port.\nservice \/graphql on new graphql:Listener(4000) {\n\n    \/\/ A resource function inside a `graphql:Service` represents a resolver.\n    \/\/ This resource can be queried using the `{ greeting }`.\n    resource function get greeting() returns string {\n\n        return \"Hello, World\";\n    }\n}", "outputFileName":"graphql_hello_world.server.out", "output":"bal run graphql_hello_world.bal"}], "description":"\/\/ A GraphQL service in Ballerina represents a GraphQL schema. Each resource function of the `graphql:Service`\n\/\/ represents a resolver function in the root `Query` type. The return type of each resource function will be the\n\/\/ type of each field represented by the resource function.<br\/><br\/>\n\/\/ For more information on the underlying package, see the\n\/\/ [GraphQL package](https:\/\/docs.central.ballerina.io\/ballerina\/graphql\/latest\/).<br\/><br\/>\n\/\/ This example shows a simple GraphQL endpoint that has a single field in the root Query type, which returns a string.", "metatags":"description: A GraphQL service endpoint written in Ballerina\nkeywords: ballerina, ballerina by example, bbe, graphql, graphql service"}, {"bbeName":"graphql-hierarchical-resource-paths", "resources":[{"tag":"paths", "balFileName":"graphql_hierarchical_resource_paths.bal", "bal":"import ballerina\/graphql;\n\n\/\/ This service has multiple resources with hierarchical resource paths.\n\/\/ The root operation has a field named `profile` and it is the first segment\n\/\/ of the hierarchical path in this service. The type of this field will also\n\/\/ be `profile`. (For hierarchical paths, the field name and the type name will\n\/\/ be the same). The `profile` type has two fields: `quote` and `name`. The\n\/\/ type of the `quote` field is `String` and the type of the `name` field is\n\/\/ `name`. The `name` type has two fields:`first` and the `last`. Both of the\n\/\/ fields are of type `String`.\nservice \/graphql on new graphql:Listener(4000) {\n\n    \/\/ This resource represents the `quote` field under the `profile` object.\n    resource function get profile\/quote() returns string {\n        return \"I am the one who knocks!\";\n    }\n\n    \/\/ This resource represents the `first` field under the `name` object type.\n    \/\/ The `name` field in the `profile` object is of type `name`.\n    resource function get profile\/name\/first() returns string {\n        return \"Walter\";\n    }\n\n    \/\/ This resource represents the `last` field under the `name` object type.\n    \/\/ The `name` field in the `profile` object is of type `name`.\n    resource function get profile\/name\/last() returns string {\n        return \"White\";\n    }\n}", "outputFileName":"graphql_hierarchical_resource_paths.server.out", "output":"bal run graphql_hierarchical_resource_paths.bal"}], "description":"\/\/ The resources in Ballerina GraphQL services can have hierarchical resource\n\/\/ paths. When a hierarchical path is present, an `OBJECT` type is created for\n\/\/ each intermediate path segment with the same name. Every sub path under a\n\/\/ path segment will be added as a field of the created type.<br\/><br\/>\n\/\/ For more information on the underlying package, see the\n\/\/ [`graphql` package](https:\/\/docs.central.ballerina.io\/ballerina\/graphql\/latest\/).<br\/><br\/>\n\/\/ This example shows a GraphQL endpoint, which has a `profile` field of type `Person`.\n\/\/ A GraphQL client can query this service to retrieve specific fields or subfields of the `Person` object.", "metatags":"description: A GraphQL service endpoint written in Ballerina\nkeywords: ballerina, ballerina by example, bbe, graphql, graphql service"}, {"bbeName":"graphql-input-types", "resources":[{"tag":"types", "balFileName":"graphql_input_types.bal", "bal":"import ballerina\/graphql;\n\nservice \/graphql on new graphql:Listener(4000) {\n\n    \/\/ The input parameters in a resource function becomes input values of the\n    \/\/ corresponding GraphQL field. In this GraphQL schema, the \n    \/\/ `greeting` field of `Query` type  has a `name`  input value, which accepts\n    \/\/ `string` values.\n    resource function get greeting(string name) returns string {\n\n        return string`Hello, ${name}`;\n    }\n}", "outputFileName":"graphql_input_types.server.out", "output":"bal run graphql_input_types.bal"}], "description":"\/\/ GraphQL resources can have input parameters, which will be mapped to input\n\/\/ values in the generated GraphQL schema. Currently, the supported input types\n\/\/ are: `string`, `int`, `boolean`, `float`, and `enum`. Any of these types can\n\/\/ be an optional and\/or defaultable types.<br\/><br\/>\n\/\/ For more information on the underlying package, see the\n\/\/ [`graphql` package](https:\/\/docs.central.ballerina.io\/ballerina\/graphql\/latest\/).", "metatags":"description: A GraphQL service endpoint written in Ballerina\nkeywords: ballerina, ballerina by example, bbe, graphql, graphql service"}, {"bbeName":"graphql-mutations", "resources":[{"tag":"mutations", "balFileName":"graphql_mutations.bal", "bal":"import ballerina\/graphql;\n\nservice \/graphql on new graphql:Listener(4000) {\n\n    \/\/ Define a `Person` object in the service.\n    private Person person;\n\n    function init() {\n        \/\/ Initialize the `person` value.\n        self.person = new(\"Walter White\", 51);\n\n    }\n\n    \/\/ A resource function represents a field in the root `Query` operation.\n    resource function get profile() returns Person {\n\n        return self.person;\n    }\n\n    \/\/ A remote function represents a field in the root `Mutation` operation.\n    \/\/ After updating the name, the `person` object will be returned.\n    remote function updateName(string name) returns Person {\n\n        self.person.setName(name);\n        return self.person;\n    }\n\n    \/\/ Remote function to update the age.\n    remote function updateAge(int age) returns Person {\n\n        self.person.setAge(age);\n        return self.person;\n    }\n}\n\n\/\/ Define a service class to use as an object in the GraphQL service.\npublic service class Person {\n\n    private string name;\n    private int age;\n\n    function init(string name, int age) {\n        self.name = name;\n        self.age = age;\n    }\n\n    resource function get name() returns string {\n        return self.name;\n    }\n    resource function get age() returns int {\n        return self.age;\n    }\n    resource function get isAdult() returns boolean {\n        return self.age > 21;\n    }\n\n    function setName(string name) {\n        self.name = name;\n    }\n    function setAge(int age) {\n        self.age = age;\n    }\n}", "outputFileName":"graphql_mutations.server.out", "output":"bal run graphql_mutations.bal"}], "description":"\/\/ A remote function inside a GraphQL service represents a field in the root\n\/\/ `Mutation` object type. Therefore, if a remote function is present inside\n\/\/ the Ballerina GraphQL service, the auto-generated schema will have a\n\/\/ `Mutation` type. Each remote function in the service will be added as a\n\/\/ field of the `Mutation` type. The field name will be the remote function\n\/\/ name and the field type will be the return type of the remote function.\n\/\/ <br\/><br\/>\n\/\/ For more information on the underlying package, see the\n\/\/ [`graphql` package](https:\/\/docs.central.ballerina.io\/ballerina\/graphql\/latest\/).", "metatags":"description: A GraphQL service endpoint written in Ballerina\nkeywords: ballerina, ballerina by example, bbe, graphql, graphql mutation"}, {"bbeName":"graphql-returning-record-values", "resources":[{"tag":"values", "balFileName":"graphql_returning_record_values.bal", "bal":"import ballerina\/graphql;\n\nservice \/graphql on new graphql:Listener(4000) {\n\n    \/\/ Ballerina GraphQL resolvers can return `record` values. The record will be mapped to an `OBJECT` type.\n    resource function get profile() returns Person {\n\n        return {\n            name: \"Walter White\",\n            age: 51,\n            address: {\n                number: \"308\",\n                street: \"Negra Arroyo Lane\",\n                city: \"Albuquerque\"\n            }\n        };\n    }\n}\n\n\/\/ Define the custom record types for the returning data.\npublic type Person record {\n    string name;\n    int age;\n    Address address;\n};\npublic type Address record {\n    string number;\n    string street;\n    string city;\n};", "outputFileName":"graphql_returning_record_values.server.out", "output":"bal run graphql_returning_record_values.bal"}], "description":"\/\/ In Ballerina GraphQL, a service represents the GraphQL endpoint.\n\/\/ Each resource function inside the service represents a resolver function for a field in the root Query type.<br\/><br\/>\n\/\/ For more information on the underlying package, see the\n\/\/ [GraphQL package](https:\/\/docs.central.ballerina.io\/ballerina\/graphql\/latest\/).<br\/><br\/>\n\/\/ This example shows a GraphQL endpoint, which has a field `profile` of type `Person`.\n\/\/ A GraphQL client can query on this service to retrieve specific fields or subfields of the `Person` object.\n", "metatags":"description: A GraphQL service endpoint written in Ballerina\nkeywords: ballerina, ballerina by example, bbe, graphql, graphql service"}, {"bbeName":"graphql-returning-service-objects", "resources":[{"tag":"objects", "balFileName":"graphql_returning_service_objects.bal", "bal":"import ballerina\/graphql;\n\nservice \/graphql on new graphql:Listener(4000) {\n\n    \/\/ Resource functions can return service objects. The returning service\n    \/\/ object is mapped to an `OBJECT` type in GraphQL. Each resource\n    \/\/ function is mapped to a field in the `OBJECT`.\n    resource function get profile() returns Person {\n\n        return new(\"Walter White\", 51);\n    }\n}\n\n\/\/ Define a service class to use as an object in the GraphQL service.\nservice class Person {\n    private final string name;\n    private final int age;\n\n    function init(string name, int age) {\n        self.name = name;\n        self.age = age;\n    }\n\n    \/\/ Each resource function becomes a field of the `Person` type.\n    resource function get name() returns string {\n        return self.name;\n    }\n    resource function get age() returns int {\n        return self.age;\n    }\n    resource function get isAdult() returns boolean {\n        return self.age > 21;\n    }\n}", "outputFileName":"graphql_returning_service_objects.server.out", "output":"bal run graphql_returning_service_objects.bal"}], "description":"\/\/ A GraphQL resource function can return service objects. The returning\n\/\/ service objects are mapped to the `OBJECT` type in the GraphQL schema. Each\n\/\/ resource function in the returned service object becomes a field in the\n\/\/ created `OBJECT` type.<br\/><br\/>\n\/\/ For more information on the underlying package, see the\n\/\/ [`graphql` package](https:\/\/docs.central.ballerina.io\/ballerina\/graphql\/latest\/).", "metatags":"description: A GraphQL service endpoint written in Ballerina\nkeywords: ballerina, ballerina by example, bbe, graphql, graphql service"}, {"bbeName":"graphql-service-basic-auth-file-user-store", "resources":[{"tag":"store", "balFileName":"graphql_service_basic_auth_file_user_store.bal", "bal":"import ballerina\/graphql;\n\nlistener graphql:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with Basic auth and can be authorized optionally.\n\/\/ Using Basic auth with the file user store can be enabled by setting the\n\/\/ `graphql:FileUserStoreConfig` configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@graphql:ServiceConfig {\n    auth: [\n        {\n            fileUserStoreConfig: {},\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice \/graphql on securedEP {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"graphql_service_basic_auth_file_user_store.server.out", "output":"# As a prerequisite, ensure that the `Config.toml` file is populated correctly\n# with the user information.\necho '[[\"ballerina.auth.users\"]]\nusername=\"alice\"\npassword=\"password1\"\nscopes=[\"scope1\"]\n[[\"ballerina.auth.users\"]]\nusername=\"bob\"\npassword=\"password2\"\nscopes=[\"scope2\", \"scope3\"]' > Config.toml\n\n# You may need to change the certificate file path and private key file path.\nbal run graphql_service_basic_auth_file_user_store.bal"}], "description":"\/\/ A GraphQL service can be secured using Basic auth and optionally by\n\/\/ enforcing authorization. Then, it validates the Basic auth token sent in the\n\/\/ `Authorization` header against the provided configurations. This reads data\n\/\/ from a file, which has a TOML format. This stores the usernames, passwords\n\/\/ for authentication, and scopes for authorization.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s).<br\/>\n\/\/ In the authorization phase, the scopes of the service are compared\n\/\/ against the scope included in the user store for at least one match between\n\/\/ the two sets.<br\/>\n\/\/ `Config.toml` has defined three users - alice, ldclakmal and eve. Each user has a\n\/\/ password and optionally assigned scopes as an array.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Auth module](https:\/\/docs.central.ballerina.io\/ballerina\/auth\/latest\/).", "metatags":"description: BBE on how to secure GraphQL service with Basic auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, graphql, auth, basic auth"}, {"bbeName":"graphql-service-basic-auth-ldap-user-store", "resources":[{"tag":"store", "balFileName":"graphql_service_basic_auth_ldap_user_store.bal", "bal":"import ballerina\/graphql;\n\nlistener graphql:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with Basic auth and can be authorized  optionally.\n\/\/ Basic auth using the LDAP user store can be enabled by setting the\n\/\/ `graphql:LdapUserStoreConfig` configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@graphql:ServiceConfig {\n    auth: [\n        {\n            ldapUserStoreConfig: {\n                domainName: \"avix.lk\",\n                connectionUrl: \"ldap:\/\/localhost:389\",\n                connectionName: \"cn=admin,dc=avix,dc=lk\",\n                connectionPassword: \"avix123\",\n                userSearchBase: \"ou=Users,dc=avix,dc=lk\",\n                userEntryObjectClass: \"inetOrgPerson\",\n                userNameAttribute: \"uid\",\n                userNameSearchFilter: \"(&(objectClass=inetOrgPerson)(uid=?))\",\n                userNameListFilter: \"(objectClass=inetOrgPerson)\",\n                groupSearchBase: [\"ou=Groups,dc=avix,dc=lk\"],\n                groupEntryObjectClass: \"groupOfNames\",\n                groupNameAttribute: \"cn\",\n                groupNameSearchFilter: \"(&(objectClass=groupOfNames)(cn=?))\",\n                groupNameListFilter: \"(objectClass=groupOfNames)\",\n                membershipAttribute: \"member\",\n                userRolesCacheEnabled: true,\n                connectionPoolingEnabled: false,\n                connectionTimeout: 5,\n                readTimeout: 60\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice \/graphql on securedEP {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"graphql_service_basic_auth_ldap_user_store.server.out", "output":"# You may need to change the certificate file path and private key file path.\nbal run graphql_service_basic_auth_ldap_user_store.bal"}], "description":"\/\/ A GraphQL service can be secured using Basic auth and by enforcing\n\/\/ authorization optionally. Then, it validates the Basic auth token sent in\n\/\/ the `Authorization` header against the provided configurations. This reads\n\/\/ data from the configured LDAP. This stores usernames, passwords for\n\/\/ authentication, and scopes for authorization.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s).<br\/>\n\/\/ In the authorization phase, the scopes of the service are compared\n\/\/ against the scope included in the user store for at least one match between\n\/\/ the two sets.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Auth module](https:\/\/docs.central.ballerina.io\/ballerina\/auth\/latest\/).", "metatags":"description: BBE on how to secure GraphQL service with Basic auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, graphql, auth, basic auth"}, {"bbeName":"graphql-service-jwt-auth", "resources":[{"tag":"auth", "balFileName":"graphql_service_jwt_auth.bal", "bal":"import ballerina\/graphql;\n\nlistener graphql:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with JWT authentication and can be authorized\n\/\/ optionally. JWT authentication can be enabled by setting the\n\/\/ `graphql:JwtValidatorConfig` configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@graphql:ServiceConfig {\n    auth: [\n        {\n            jwtValidatorConfig: {\n                issuer: \"wso2\",\n                audience: \"ballerina\",\n                signatureConfig: {\n                    certFile: \"..\/resource\/path\/to\/public.crt\"\n                },\n                scopeKey: \"scp\"\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice \/graphql on securedEP {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"graphql_service_jwt_auth.server.out", "output":"# You may need to change the certificate file path and private key file path.\nbal run graphql_service_jwt_auth.bal"}], "description":"\/\/ A GraphQL service can be secured using JWT and by enforcing\n\/\/ authorization optionally. Then, it validates the JWT sent in the\n\/\/ `Authorization` header against the provided configurations.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s). The scope can be included\n\/\/ in the JWT using a custom claim attribute. That custom claim attribute\n\/\/ also can be configured as the `scopeKey`.<br\/>\n\/\/ In the authorization phase, the scopes of the service are compared\n\/\/ against the scope included in the JWT for at least one match between the two\n\/\/ sets.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [JWT module](https:\/\/docs.central.ballerina.io\/ballerina\/jwt\/latest\/).", "metatags":"description: BBE on how to secure GraphQL service with JWT auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, graphql, auth, jwt auth"}, {"bbeName":"graphql-service-mutual-ssl", "resources":[{"tag":"ssl", "balFileName":"graphql_service_mutual_ssl.bal", "bal":"import ballerina\/graphql;\nimport ballerina\/http;\n\n\/\/ An GraphQL listener can be configured to accept new connections that are\n\/\/ secured via mutual SSL.\n\/\/ The [`graphql:ListenerSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/graphql\/latest\/records\/ListenerSecureSocket) record provides the SSL-related listener configurations.\nlistener graphql:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        },\n        \/\/ Enables mutual SSL.\n        mutualSsl: {\n            verifyClient: http:REQUIRE,\n            cert: \"..\/resource\/path\/to\/public.crt\"\n        },\n        \/\/ Enables the preferred SSL protocol and its versions.\n        protocol: {\n            name: http:TLS,\n            versions: [\"TLSv1.2\", \"TLSv1.1\"]\n        },\n        \/\/ Configures the preferred ciphers.\n        ciphers: [\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\"]\n\n    }\n);\n\nservice \/graphql on securedEP {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"graphql_service_mutual_ssl.server.out", "output":"# You may need to change the certificate file path, private key file path, and\n# trusted certificate file path.\nbal run graphql_service_mutual_ssl.bal"}], "description":"\/\/ Ballerina supports mutual SSL, which is a certificate-based authentication\n\/\/ process in which two parties (the client and server) authenticate each other by\n\/\/ verifying the digital certificates. It ensures that both parties are assured\n\/\/ of each other's identity.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [GraphQL module](https:\/\/docs.central.ballerina.io\/ballerina\/graphql\/latest\/).", "metatags":"description: BBE on how to secure GraphQL listener with mutual SSL.\nkeywords: ballerina, ballerina by example, bbe, graphql, mutual ssl, ssl protocols, ciphers"}, {"bbeName":"graphql-service-oauth2", "resources":[{"tag":"oauth2", "balFileName":"graphql_service_oauth2.bal", "bal":"import ballerina\/graphql;\n\nlistener graphql:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with OAuth2 authentication and can be authorized\n\/\/ optionally. OAuth2 authentication can be enabled by setting the\n\/\/ `graphql:OAuth2IntrospectionConfig` configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@graphql:ServiceConfig {\n    auth: [\n        {\n            oauth2IntrospectionConfig: {\n                url: \"https:\/\/localhost:9445\/oauth2\/introspect\",\n                tokenTypeHint: \"access_token\",\n                scopeKey: \"scp\",\n                clientConfig: {\n                    customHeaders: {\"Authorization\": \"Basic YWRtaW46YWRtaW4=\"},\n                    secureSocket: {\n                        cert: \"..\/resource\/path\/to\/public.crt\"\n                    }\n                }\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice \/graphql on securedEP {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"graphql_service_oauth2.server.out", "output":"# You may need to change the certificate file path and private key file path.\nbal run graphql_service_oauth2.bal"}], "description":"\/\/ A GraphQL service can be secured using OAuth2 and by enforcing\n\/\/ authorization optionally. Then, it validates the OAuth2 token sent in the\n\/\/ `Authorization` header against the provided configurations. This calls the\n\/\/ configured introspection endpoint to validate.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s). The scope can be included\n\/\/ in the introspection response using a custom claim attribute. That custom\n\/\/ claim attribute also can be configured as the `scopeKey`.<br\/>\n\/\/ In the authorization phase, the scopes of the service are compared\n\/\/ against the scope included in the introspection response for at least one\n\/\/ match between the two sets.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure GraphQL service with OAuth2 in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, graphql, auth, oauth2, introspection"}, {"bbeName":"graphql-service-ssl-tls", "resources":[{"tag":"tls", "balFileName":"graphql_service_ssl_tls.bal", "bal":"import ballerina\/graphql;\n\n\/\/ A GraphQL listener can be configured to communicate through HTTPS as well.\n\/\/ To secure a listener using HTTPS, the listener needs to be configured with\n\/\/ a certificate file and a private key file for the listener.\n\/\/ The [`graphql:ListenerSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/graphql\/latest\/records\/ListenerSecureSocket) record\n\/\/ provides the SSL-related listener configurations of the listener.\nlistener graphql:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\nservice \/graphql on securedEP {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"graphql_service_ssl_tls.service.out", "output":"# You may need to change the certificate file path and private key file path.\nbal run graphql_service_ssl_tls.bal"}], "description":"\/\/ You can use the GraphQL listener to connect to or interact with an HTTPS client.\n\/\/ Provide the `graphql:ListenerSecureSocket` configurations to the server to\n\/\/ expose an HTTPS connection.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [GraphQL module](https:\/\/docs.central.ballerina.io\/ballerina\/graphql\/latest\/).", "metatags":"description: BBE on how to secure GraphQL listener with SSL.\nkeywords: ballerina, ballerina by example, bbe, graphql, ssl, tls"}, {"bbeName":"grpc-bidirectional-streaming", "resources":[{"tag":"streaming", "balFileName":"", "bal":"", "outputFileName":"grpc_bidirectional_streaming.out", "output":"# Create new Protocol Buffers definition file `grpc_bidirectional_streaming.proto` and add service definition.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_bidirectional_streaming.proto  --output stubs\n\n# Once you run the command, `grpc_bidirectional_streaming_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"service", "balFileName":"grpc_bidirectional_streaming_service.bal", "bal":"\/\/ This is the server implementation of the bidirectional streaming scenario.\nimport ballerina\/grpc;\n\n@grpc:ServiceDescriptor {\n    descriptor: ROOT_DESCRIPTOR_GRPC_BIDIRECTIONAL_STREAMING,\n    descMap: getDescriptorMapGrpcBidirectionalStreaming()\n}\nservice \"Chat\" on new grpc:Listener(9090) {\n    remote function chat(ChatStringCaller caller,\n                    stream<ChatMessage, error?> clientStream) returns error? {\n        \/\/ Reads and processes each message in the client stream.\n        check clientStream.forEach(function(ChatMessage chatMsg) {\n            checkpanic caller->sendString(\n                                string `${chatMsg.name}: ${chatMsg.message}`);\n        });\n        \/\/ Once the client sends a notification to indicate the end of the stream, '()' is returned by the stream.\n        check caller->complete();\n    }\n}", "outputFileName":"grpc_bidirectional_streaming_service.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_bidirectional_streaming_pb.bal` stub file to the package.\n# For example, if you create a package named `service`, copy the stub file to the `service` package.\n\n# Create a new `grpc_bidirectional_streaming.bal` Ballerina file inside the `service` package and add the service implementation.\n\n# Execute the command below to build the 'service' package.\nbal build service\n\n# Run the service using the command below.\nbal run service\/target\/bin\/service.jar"}, {"tag":"client", "balFileName":"grpc_bidirectional_streaming_service_client.bal", "bal":"\/\/ This is the client implementation of the bidirectional streaming scenario.\nimport ballerina\/io;\n\n\/\/ Creates a gRPC client to interact with the remote server.\nChatClient ep = check new(\"http:\/\/localhost:9090\");\n\npublic function main () returns error? {\n    \/\/ Executes the RPC call and receives the customized streaming client.\n    ChatStreamingClient streamingClient = check ep->chat();\n\n    \/\/ Reads server responses in another strand.\n    future<error?> f1 = start readResponse(streamingClient);\n\n    \/\/ Sends multiple messages to the server.\n    ChatMessage[] messages = [\n        {name: \"Sam\", message: \"Hi\"},\n        {name: \"Ann\", message: \"Hey\"},\n        {name: \"John\", message: \"Hello\"}\n    ];\n    foreach ChatMessage msg in messages {\n        check streamingClient->sendChatMessage(msg);\n    }\n    \/\/ Once all the messages are sent, the client sends the message to notify the server about the completion.\n    check streamingClient->complete();\n\n    \/\/ Waits until all server messages are received.\n    check wait f1;\n}\n\nfunction readResponse(ChatStreamingClient streamingClient) returns error? {\n    \/\/ Receives the server stream response iteratively.\n    string? result = check streamingClient->receiveString();\n    while !(result is ()) {\n        io:println(result);\n        result = check streamingClient->receiveString();\n    }\n}", "outputFileName":"grpc_bidirectional_streaming_service_client.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_bidirectional_streaming_pb.bal` stub file to the package.\n# For example, if you create a package named `client`, copy the stub file to the `client` package.\n\n# Create a new `grpc_bidirectional_streaming_client.bal` Ballerina file inside the `client` package and add the client implementation.\n\n# Execute the command below to build the 'client' package.\nbal build client\n\n# Run the client using the command below.\nbal run client\/target\/bin\/client.jar"}], "description":"\/\/ The gRPC Server Connector exposes the gRPC service over HTTP2.\n\/\/ This example demonstrates how a gRPC bidirectional streaming service and a client\n\/\/ operate when each of them sends a sequence of messages using a read-write stream. \n\/\/ In such scenarios, the two streams operate independently. Therefore, clients and servers can read and write in any order.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [GRPC module](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/).", "metatags":"description: This Ballerina by Example has a gRPC streaming service and a streaming client. Both the client and the server sends a stream of messages to each other.\nkeywords: ballerina, ballerina by example, bbe, grpc, bidirectional streaming"}, {"bbeName":"grpc-client-basic-auth", "resources":[{"tag":"client", "balFileName":"", "bal":"", "outputFileName":"grpc_client.out", "output":"# Create a new Protocol Buffers definition file named `grpc_client.proto` and add the service definition to it.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_client.proto --output stubs\n\n# Once you run the command, `grpc_client_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"auth", "balFileName":"grpc_client_basic_auth.bal", "bal":"import ballerina\/io;\n\n\/\/ Defines the gRPC client to call the Basic auth secured APIs.\n\/\/ The client metadata is enriched with the `Authorization: Basic <token>`\n\/\/ header by passing the [`grpc:CredentialsConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/records\/CredentialsConfig) for the `auth` configuration\n\/\/ of the client.\nHelloWorldClient securedEP = check new(\"https:\/\/localhost:9090\",\n    auth = {\n        username: \"ldclakmal\",\n        password: \"ldclakmal@123\"\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string result = check securedEP->hello();\n    io:println(result);\n}", "outputFileName":"grpc_client_basic_auth.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_secured_pb.bal` stub file to the package.\n# For example, if you create a package named `client`, copy the stub file to the `client` package.\n\n# Create a new `grpc_client_basic_auth.bal` Ballerina file inside the `client` package and add the client implementation.\n\n# Execute the command below to build the 'client' package.\n# You may need to change the trusted certificate file path.\n`bal build client`\n\n# Run the client using the command below.\n# As a prerequisite, start a sample service secured with Basic Auth.\nbal run client\/target\/bin\/client.jar\nHello, World!"}], "description":"\/\/ A client, which is secured with Basic auth can be used to connect to\n\/\/ a secured service.<br\/>\n\/\/ The client metadata is enriched with the `Authorization: Basic <token>`\n\/\/ header by passing the `grpc:CredentialsConfig` for the `auth` configuration\n\/\/ of the client.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Auth module](https:\/\/docs.central.ballerina.io\/ballerina\/auth\/latest\/).", "metatags":"description: BBE on how to secure gRPC client with Basic auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, grpc, auth, basic auth"}, {"bbeName":"grpc-client-bearer-token-auth", "resources":[{"tag":"client", "balFileName":"", "bal":"", "outputFileName":"grpc_client.out", "output":"# Create a new Protocol Buffers definition file named `grpc_client.proto` and add the service definition to it.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_client.proto --output stubs\n\n# Once you run the command, `grpc_client_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"auth", "balFileName":"grpc_client_bearer_token_auth.bal", "bal":"import ballerina\/io;\n\n\/\/ Defines the gRPC client to call the secured APIs.\n\/\/ The client metadata is enriched with the `Authorization: Bearer <token>`\n\/\/ header by passing the [`grpc:BearerTokenConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/records\/BearerTokenConfig) for the `auth` configuration\n\/\/ of the client.\nHelloWorldClient securedEP = check new(\"https:\/\/localhost:9090\",\n    auth = {\n        token: \"56ede317-4511-44b4-8579-a08f094ee8c5\"\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string result = check securedEP->hello();\n    io:println(result);\n}", "outputFileName":"grpc_client_bearer_token_auth.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_secured_pb.bal` stub file to the package.\n# For example, if you create a package named `client`, copy the stub file to the `client` package.\n\n# Create a new `grpc_client_bearer_token_auth.bal` Ballerina file inside the `client` package and add the client implementation.\n\n# Execute the command below to build the 'client' package.\n# You may need to change the trusted certificate file path.\n`bal build client`\n\n# Run the client using the command below.\n# As a prerequisite, start a secured sample service.\nbal run client\/target\/bin\/client.jar\nHello, World!"}], "description":"\/\/ A client, which is secured with Bearer token auth can be used to connect to\n\/\/ a secured service.<br\/>\n\/\/ The client metadata is enriched with the `Authorization: Bearer <token>`\n\/\/ header by passing the `grpc:BearerTokenConfig` for the `auth` configuration\n\/\/ of the client.", "metatags":"description: BBE on how to secure gRPC client with Bearer token auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, grpc, auth, jwt auth"}, {"bbeName":"grpc-client-mutual-ssl", "resources":[{"tag":"client", "balFileName":"", "bal":"", "outputFileName":"grpc_client.out", "output":"# Create a new Protocol Buffers definition file named `grpc_client.proto` and add the service definition to it.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_client.proto --output stubs\n\n# Once you run the command, `grpc_client_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"ssl", "balFileName":"grpc_client_mutual_ssl.bal", "bal":"import ballerina\/grpc;\nimport ballerina\/io;\n\n\/\/ A gRPC client can be configured to initiate new connections that are\n\/\/ secured via mutual SSL.\n\/\/ The [`grpc:ClientSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/records\/ClientSecureSocket) record provides the SSL-related configurations.\nHelloWorldClient securedEP = check new(\"https:\/\/localhost:9090\",\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        },\n        cert: \"..\/resource\/path\/to\/public.crt\",\n        protocol: {\n            name: grpc:TLS\n        },\n        ciphers: [\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\"]\n\n    }\n);\n\npublic function main() returns error? {\n    string result = check securedEP->hello();\n    io:println(result);\n}", "outputFileName":"grpc_client_mutual_ssl.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_secured_pb.bal` stub file to the package.\n# For example, if you create a package named `client`, copy the stub file to the `client` package.\n\n# Create a new `grpc_client_mutual_ssl.bal` Ballerina file inside the `client` package and add the client implementation.\n\n# Execute the command below to build the 'client' package.\n# You may need to change the certificate file path, private key file path, and\n# trusted certificate file path.\n`bal build client`\n\n# Run the client using the command below.\n# As a prerequisite, start a sample service secured with mutual SSL.\nbal run client\/target\/bin\/client.jar\nHello, World!"}], "description":"\/\/ Ballerina supports mutual SSL, which is a certificate-based authentication\n\/\/ process in which two parties (the client and server) authenticate each other by\n\/\/ verifying the digital certificates. It ensures that both parties are assured\n\/\/ of each other's identity.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [gRPC module](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/).", "metatags":"description: BBE on how to secure gRPC client with mutual SSL.\nkeywords: ballerina, ballerina by example, bbe, grpc, mutual ssl, ssl protocols, ciphers"}, {"bbeName":"grpc-client-oauth2-client-credentials-grant-type", "resources":[{"tag":"client", "balFileName":"", "bal":"", "outputFileName":"grpc_client.out", "output":"# Create a new Protocol Buffers definition file named `grpc_client.proto` and add the service definition to it.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_client.proto --output stubs\n\n# Once you run the command, `grpc_client_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"type", "balFileName":"grpc_client_oauth2_client_credentials_grant_type.bal", "bal":"import ballerina\/io;\n\n\/\/ Defines the gRPC client to call the OAuth2 secured APIs.\n\/\/ The client metadata is enriched with the `Authorization: Bearer <token>`\n\/\/ header by passing the [`grpc:OAuth2ClientCredentialsGrantConfig`]((https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/records\/OAuth2ClientCredentialsGrantConfig) for the\n\/\/ `auth` configuration of the client.\nHelloWorldClient securedEP = check new(\"https:\/\/localhost:9090\",\n    auth = {\n        tokenUrl: \"https:\/\/localhost:9445\/oauth2\/token\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: [\"admin\"],\n        clientConfig: {\n            secureSocket: {\n                cert: \"..\/resource\/path\/to\/public.crt\"\n            }\n        }\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string result = check securedEP->hello();\n    io:println(result);\n}", "outputFileName":"grpc_client_oauth2_client_credentials_grant_type.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_secured_pb.bal` stub file to the package.\n# For example, if you create a package named `client`, copy the stub file to the `client` package.\n\n# Create a new `grpc_client_oauth2_client_credentials_grant_type.bal` Ballerina file inside the `client` package and add the client implementation.\n\n# Execute the command below to build the 'client' package.\n# You may need to change the trusted certificate file path.\n`bal build client`\n\n# Run the client using the command below.\n# As a prerequisite, start a sample service secured with OAuth2.\nbal run client\/target\/bin\/client.jar\nHello, World!"}], "description":"\/\/ A client, which is secured with OAuth2 client credentials grant type\n\/\/ can be used to connect to a secured service.<br\/>\n\/\/ The client metadata is enriched with the `Authorization: Bearer <token>`\n\/\/ header by passing the `grpc:OAuth2ClientCredentialsGrantConfig` for the\n\/\/ `auth` configuration of the client.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure gRPC client with OAuth2 client credentials grant type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, grpc, auth, oauth2, client credentials grant type"}, {"bbeName":"grpc-client-oauth2-jwt-bearer-grant-type", "resources":[{"tag":"client", "balFileName":"", "bal":"", "outputFileName":"grpc_client.out", "output":"# Create a new Protocol Buffers definition file named `grpc_client.proto` and add the service definition to it.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_client.proto --output stubs\n\n# Once you run the command, `grpc_client_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"type", "balFileName":"grpc_client_oauth2_jwt_bearer_grant_type.bal", "bal":"import ballerina\/io;\n\n\/\/ Defines the gRPC client to call the OAuth2 secured APIs.\n\/\/ The client metadata is enriched with the `Authorization: Bearer <token>`\n\/\/ header by passing the [`grpc:OAuth2JwtBearerGrantConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/records\/OAuth2JwtBearerGrantConfig) for the `auth`\n\/\/ configuration of the client.\nHelloWorldClient securedEP = check new(\"https:\/\/localhost:9090\",\n    auth = {\n        tokenUrl: \"https:\/\/localhost:9445\/oauth2\/token\",\n        assertion: \"eyJhbGciOiJFUzI1NiIsImtpZCI6Ij[...omitted for brevity...]\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: [\"admin\"],\n        clientConfig: {\n            secureSocket: {\n                cert: \"..\/resource\/path\/to\/public.crt\"\n            }\n        }\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string result = check securedEP->hello();\n    io:println(result);\n}", "outputFileName":"grpc_client_oauth2_jwt_bearer_grant_type.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_secured_pb.bal` stub file to the package.\n# For example, if you create a package named `client`, copy the stub file to the `client` package.\n\n# Create a new `grpc_client_oauth2_jwt_bearer_grant_type.bal` Ballerina file inside the `client` package and add the client implementation.\n\n# Execute the command below to build the 'client' package.\n# You may need to change the trusted certificate file path.\n`bal build client`\n\n# Run the client using the command below.\n# As a prerequisite, start a sample service secured with OAuth2.\nbal run client\/target\/bin\/client.jar\nHello, World!"}], "description":"\/\/ A client, which is secured with an OAuth2 JWT bearer grant type can be\n\/\/ used to connect to a secured service.<br\/>\n\/\/ The client metadata is enriched with the `Authorization: Bearer <token>`\n\/\/ header by passing the `grpc:OAuth2JwtBearerGrantConfig` to the `auth`\n\/\/ configuration of the client.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure gRPC client with OAuth2 JWT bearer grant type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, grpc, auth, oauth2, jwt bearer grant type"}, {"bbeName":"grpc-client-oauth2-password-grant-type", "resources":[{"tag":"client", "balFileName":"", "bal":"", "outputFileName":"grpc_client.out", "output":"# Create a new Protocol Buffers definition file named `grpc_client.proto` and add the service definition to it.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_client.proto --output stubs\n\n# Once you run the command, `grpc_client_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"type", "balFileName":"grpc_client_oauth2_password_grant_type.bal", "bal":"import ballerina\/io;\n\n\/\/ Defines the gRPC client to call the OAuth2 secured APIs.\n\/\/ The client metadata is enriched with the `Authorization: Bearer <token>`\n\/\/ header by passing the [`grpc:OAuth2PasswordGrantConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/records\/OAuth2PasswordGrantConfig) to the `auth`\n\/\/ configuration of the client.\nHelloWorldClient securedEP = check new(\"https:\/\/localhost:9090\",\n    auth = {\n        tokenUrl: \"https:\/\/localhost:9445\/oauth2\/token\",\n        username: \"admin\",\n        password: \"admin\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: [\"admin\"],\n        refreshConfig: {\n            refreshUrl: \"https:\/\/localhost:9445\/oauth2\/token\",\n            scopes: [\"hello\"],\n            clientConfig: {\n                secureSocket: {\n                    cert: \"..\/resource\/path\/to\/public.crt\"\n                }\n            }\n        },\n        clientConfig: {\n            secureSocket: {\n                cert: \"..\/resource\/path\/to\/public.crt\"\n            }\n        }\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string result = check securedEP->hello();\n    io:println(result);\n}", "outputFileName":"grpc_client_oauth2_password_grant_type.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_secured_pb.bal` stub file to the package.\n# For example, if you create a package named `client`, copy the stub file to the `client` package.\n\n# Create a new `grpc_client_oauth2_password_grant_type.bal` Ballerina file inside the `client` package and add the client implementation.\n\n# Execute the command below to build the 'client' package.\n# You may need to change the trusted certificate file path.\n`bal build client`\n\n# Run the client using the command below.\n# As a prerequisite, start a sample service secured with OAuth2.\nbal run client\/target\/bin\/client.jar\nHello, World!"}], "description":"\/\/ A client, which is secured with OAuth2 password grant type can be used to\n\/\/ connect to a secured service.<br\/>\n\/\/ The client metadata is enriched with the `Authorization: Bearer <token>`\n\/\/ header by passing the `grpc:OAuth2PasswordGrantConfig` to the `auth`\n\/\/ configuration of the client.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure gRPC client with OAuth2 password grant type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, grpc, auth, oauth2, password grant type"}, {"bbeName":"grpc-client-oauth2-refresh-token-grant-type", "resources":[{"tag":"client", "balFileName":"", "bal":"", "outputFileName":"grpc_client.out", "output":"# Create a new Protocol Buffers definition file named `grpc_client.proto` and add the service definition to it.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_client.proto --output stubs\n\n# Once you run the command, `grpc_client_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"type", "balFileName":"grpc_client_oauth2_refresh_token_grant_type.bal", "bal":"import ballerina\/io;\n\n\/\/ Defines the gRPC client to call the OAuth2 secured APIs.\n\/\/ The client metadata is enriched with the `Authorization: Bearer <token>`\n\/\/ header by passing the [`grpc:OAuth2RefreshTokenGrantConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/records\/OAuth2RefreshTokenGrantConfig) for the `auth`\n\/\/ configuration of the client.\nHelloWorldClient securedEP = check new(\"https:\/\/localhost:9090\",\n    auth = {\n        refreshUrl: \"https:\/\/localhost:9445\/oauth2\/token\",\n        refreshToken: \"24f19603-8565-4b5f-a036-88a945e1f272\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: [\"admin\"],\n        clientConfig: {\n            secureSocket: {\n                cert: \"..\/resource\/path\/to\/public.crt\"\n            }\n        }\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string result = check securedEP->hello();\n    io:println(result);\n}", "outputFileName":"grpc_client_oauth2_refresh_token_grant_type.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_secured_pb.bal` stub file to the package.\n# For example, if you create a package named `client`, copy the stub file to the `client` package.\n\n# Create a new `grpc_client_oauth2_refresh_token_grant_type.bal` Ballerina file inside the `client` package and add the client implementation.\n\n# Execute the command below to build the 'client' package.\n# You may need to change the trusted certificate file path.\n`bal build client`\n\n# Run the client using the command below.\n# As a prerequisite, start a sample service secured with OAuth2.\nbal run client\/target\/bin\/client.jar\nHello, World!"}], "description":"\/\/ A client, which is secured with an OAuth2 refresh token grant type can be\n\/\/ used to connect to a secured service.<br\/>\n\/\/ The client metadata is enriched with the `Authorization: Bearer <token>`\n\/\/ header by passing the `grpc:OAuth2RefreshTokenGrantConfig` to the `auth`\n\/\/ configuration of the client.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure gRPC client with OAuth2 refresh token grant type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, grpc, auth, oauth2, refresh token grant type"}, {"bbeName":"grpc-client-self-signed-jwt-auth", "resources":[{"tag":"client", "balFileName":"", "bal":"", "outputFileName":"grpc_client.out", "output":"# Create a new Protocol Buffers definition file named `grpc_client.proto` and add the service definition to it.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_client.proto --output stubs\n\n# Once you run the command, `grpc_client_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"auth", "balFileName":"grpc_client_self_signed_jwt_auth.bal", "bal":"import ballerina\/io;\n\n\/\/ Defines the gRPC client to call the JWT auth secured APIs.\n\/\/ The client metadata is enriched with the `Authorization: Bearer <token>`\n\/\/ header by passing the [`grpc:JwtIssuerConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/records\/JwtIssuerConfig) for the `auth` configuration\n\/\/ of the client. A self-signed JWT is issued before the request is sent.\nHelloWorldClient securedEP = check new(\"https:\/\/localhost:9090\",\n    auth = {\n        username: \"ballerina\",\n        issuer: \"wso2\",\n        audience: [\"ballerina\", \"ballerina.org\", \"ballerina.io\"],\n        keyId: \"5a0b754-895f-4279-8843-b745e11a57e9\",\n        jwtId: \"JlbmMiOiJBMTI4Q0JDLUhTMjU2In\",\n        customClaims: { \"scp\": \"admin\" },\n        expTime: 3600,\n        signatureConfig: {\n            config: {\n                keyFile: \"..\/resource\/path\/to\/private.key\"\n            }\n        }\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string result = check securedEP->hello();\n    io:println(result);\n}", "outputFileName":"grpc_client_self_signed_jwt_auth.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_secured_pb.bal` stub file to the package.\n# For example, if you create a package named `client`, copy the stub file to the `client` package.\n\n# Create a new `grpc_client_oauth2_refresh_token_grant_type.bal` Ballerina file inside the `client` package and add the client implementation.\n\n# Execute the command below to build the 'client' package.\n# You may need to change the trusted certificate file path and private key file path.\n`bal build client`\n\n# Run the client using the command below.\n# As a prerequisite, start a sample service secured with OAuth2.\nbal run client\/target\/bin\/client.jar\nHello, World!"}], "description":"\/\/ A client, which is secured with self-signed JWT can be used to connect to\n\/\/ a secured service.<br\/>\n\/\/ The client metadata is enriched with the `Authorization: Bearer <token>`\n\/\/ header by passing the `http:JwtIssuerConfig` to the `auth` configuration\n\/\/ of the client. A self-signed JWT is issued before the request is sent.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure gRPC client with self-signed JWT auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, grpc, auth, jwt auth"}, {"bbeName":"grpc-client-ssl-tls", "resources":[{"tag":"client", "balFileName":"", "bal":"", "outputFileName":"grpc_client.out", "output":"# Create a new Protocol Buffers definition file named `grpc_client.proto` and add the service definition to it.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_client.proto --output stubs\n\n# Once you run the command, `grpc_client_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"tls", "balFileName":"grpc_client_ssl_tls.bal", "bal":"import ballerina\/io;\n\n\/\/ A gRPC client can be configured to communicate through SSL\/TLS as well.\n\/\/ To secure a client using SSL\/TLS, the client needs to be configured with\n\/\/ a certificate file of the listener.\n\/\/ The [`grpc:ClientSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/records\/ClientSecureSocket) record\n\/\/ provides the SSL-related configurations of the client.\nHelloWorldClient securedEP = check new(\"https:\/\/localhost:9090\",\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string result = check securedEP->hello();\n    io:println(result);\n}", "outputFileName":"grpc_client_ssl_tls.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_secured_pb.bal` stub file to the package.\n# For example, if you create a package named `client`, copy the stub file to the `client` package.\n\n# Create a new `grpc_client_ssl_tls.bal` Ballerina file inside the `client` package and add the client implementation.\n\n# Execute the command below to build the 'client' package.\n# You may need to change the trusted certificate file path.\n`bal build client`\n\n# Run the client using the command below.\n# As a prerequisite, start a sample service secured with SSL.\nbal run client\/target\/bin\/client.jar\nHello, World!"}], "description":"\/\/ You can use the gRPC client to connect or interact with a gRPC listener\n\/\/ secured with SSL\/TLS.\n\/\/ Provide the `grpc:ClientSecureSocket` configurations to the client to\n\/\/ initiate an HTTPS connection over HTTP\/2.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [gRPC module](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/).", "metatags":"description: BBE on how to secure gRPC client with SSL.\nkeywords: ballerina, ballerina by example, bbe, grpc, ssl, tls"}, {"bbeName":"grpc-client-streaming", "resources":[{"tag":"streaming", "balFileName":"", "bal":"", "outputFileName":"grpc_client_streaming.out", "output":"# Create new Protocol Buffers definition file `grpc_client_streaming.proto` and add service definition.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_client_streaming.proto  --output stubs\n\n# Once you run the command, `grpc_client_streaming_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"service", "balFileName":"grpc_client_streaming_service.bal", "bal":"\/\/ This is the server implementation of the client streaming scenario.\nimport ballerina\/grpc;\nimport ballerina\/log;\n\n@grpc:ServiceDescriptor {\n    descriptor: ROOT_DESCRIPTOR_GRPC_CLIENT_STREAMING,\n    descMap: getDescriptorMapGrpcClientStreaming()\n}\nservice \"HelloWorld\" on new grpc:Listener(9090) {\n    remote function lotsOfGreetings(stream<string, grpc:Error?> clientStream)\n                                    returns string|error {\n        log:printInfo(\"Client connected successfully.\");\n        \/\/ Reads and processes each message in the client stream.\n        check clientStream.forEach(isolated function(string name) {\n            log:printInfo(\"Greet received: \" + name);\n        });\n        \/\/ Once the client sends a notification to indicate the end of the stream, '()' is returned by the stream.\n        return \"Ack\";\n    }\n}", "outputFileName":"grpc_client_streaming_service.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_client_streaming_pb.bal` stub file to the package.\n# For example, if you create a package named `service`, copy the stub file to the `service` package.\n\n# Create a new `grpc_client_streaming.bal` Ballerina file inside the `service` package and add the service implementation.\n\n# Execute the command below to build the 'service' package.\nbal build service\n\n# Run the service using the command below.\nbal run service\/target\/bin\/service.jar"}, {"tag":"client", "balFileName":"grpc_client_streaming_service_client.bal", "bal":"\/\/ This is the client implementation of the client streaming scenario.\nimport ballerina\/io;\n\n\/\/ Creates a gRPC client to interact with the remote server.\nHelloWorldClient ep = check new(\"http:\/\/localhost:9090\");\n\npublic function main () returns error? {\n    \/\/ Executes the client-streaming RPC call and receives the streaming client.\n    LotsOfGreetingsStreamingClient streamingClient = check\n    ep->lotsOfGreetings();\n\n    \/\/ Sends multiple messages to the server.\n    string[] requests = [\"Hi Sam\", \"Hey Sam\", \"GM Sam\"];\n    foreach var greet in requests {\n        check streamingClient->sendString(greet);\n    }\n\n    \/\/ Once all the messages are sent, the server notifies the caller with a `complete` message.\n    check streamingClient->complete();\n\n    \/\/ Receives the server response.\n    string? response = check streamingClient->receiveString();\n    io:println(response);\n\n}", "outputFileName":"grpc_client_streaming_service_client.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_client_streaming_pb.bal` stub file to the package.\n# For example, if you create a package named `client`, copy the stub file to the `client` package.\n\n# Create a new `grpc_client_streaming_client.bal` Ballerina file inside the `client` package and add the client implementation.\n\n# Execute the command below to build the 'client' package.\nbal build client\n\n# Run the client using the command below.\nbal run client\/target\/bin\/client.jar"}], "description":"\/\/ The gRPC Server Connector is used to expose gRPC services over HTTP\/2.\n\/\/ This example includes a gRPC client streaming service and a client. The client writes a sequence of messages and sends them to the server.\n\/\/ Once the client has finished writing the messages, it waits for the server to read them and return a response.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [GRPC module](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/).", "metatags":"description: This Ballerina by Example has a gRPC service and a streaming client. The client sends a stream of request messages and gets a response message.\nkeywords: ballerina, ballerina by example, bbe, grpc, client streaming"}, {"bbeName":"grpc-server-streaming", "resources":[{"tag":"streaming", "balFileName":"", "bal":"", "outputFileName":"grpc_server_streaming.out", "output":"# Create new Protocol Buffers definition file `grpc_server_streaming.proto` and add service definition.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_server_streaming.proto  --output stubs\n\n# Once you run the command, `grpc_server_streaming_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"service", "balFileName":"grpc_server_streaming_service.bal", "bal":"\/\/ This is the server implementation of the server streaming scenario.\nimport ballerina\/grpc;\nimport ballerina\/log;\n\n@grpc:ServiceDescriptor {\n    descriptor: ROOT_DESCRIPTOR_GRPC_SERVER_STREAMING,\n    descMap: getDescriptorMapGrpcServerStreaming()\n}\nservice \"HelloWorld\" on new grpc:Listener(9090) {\n    remote function lotsOfReplies(string name)\n                        returns stream<string, error?>|error {\n        log:printInfo(\"Server received hello from \" + name);\n        string[] greets = [\"Hi\", \"Hey\", \"GM\"];\n        \/\/ Creates the array of responses by appending the received name.\n        int i = 0;\n        foreach string greet in greets {\n            greets[i] = greet + \" \" + name;\n            i += 1;\n        }\n        \/\/ Returns the stream of messages back to the client.\n        return greets.toStream();\n    }\n}", "outputFileName":"grpc_server_streaming_service.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_server_streaming_pb.bal` stub file to the package.\n# For example, if you create a package named `service`, copy the stub file to the `service` package.\n\n# Create a new `grpc_server_streaming.bal` Ballerina file inside the `service` package and add the service implementation.\n\n# Execute the command below to build the 'service' package.\nbal build service\n\n# Run the service using the command below.\nbal run service\/target\/bin\/service.jar"}, {"tag":"client", "balFileName":"grpc_server_streaming_service_client.bal", "bal":"\/\/ This is the client implementation for the server streaming scenario.\nimport ballerina\/grpc;\nimport ballerina\/io;\n\n\/\/ Creates a gRPC client to interact with the remote server.\nHelloWorldClient ep = check new(\"http:\/\/localhost:9090\");\n\npublic function main () returns error? {\n    \/\/ Executes the streaming RPC call and gets the response as a stream.\n    stream<string, grpc:Error?> result = check ep->lotsOfReplies(\"WSO2\");\n    \/\/ Iterates through the stream and prints the content.\n    check result.forEach(function(string str) {\n        io:println(str);\n    });\n}", "outputFileName":"grpc_server_streaming_service_client.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_server_streaming_pb.bal` stub file to the package.\n# For example, if you create a package named `client`, copy the stub file to the `client` package.\n\n# Create a new `grpc_server_streaming_client.bal` Ballerina file inside the `client` package and add the client implementation.\n\n# Execute the command below to build the 'client' package.\nbal build client\n\n# Run the client using the command below.\nbal run client\/target\/bin\/client.jar"}], "description":"\/\/ The gRPC Server Connector is used to expose gRPC services over HTTP\/2.\n\/\/ This example includes a gRPC server streaming service and a client. The\n\/\/ client sends a request to the server and gets a stream to read the messages until all the messages are read.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [GRPC module](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/).", "metatags":"description: This Ballerina by Example has a gRPC streaming service and a client. The client sends a request to the server and receives a stream of messages.\nkeywords: ballerina, ballerina by example, bbe, grpc, server streaming"}, {"bbeName":"grpc-service-basic-auth-file-user-store", "resources":[{"tag":"service", "balFileName":"", "bal":"", "outputFileName":"grpc_service.out", "output":"# Create a new Protocol Buffers definition file named `grpc_service.proto` and add the service definition to it.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_service.proto --output stubs\n\n# Once you run the command, `grpc_service_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"store", "balFileName":"grpc_service_basic_auth_file_user_store.bal", "bal":"import ballerina\/grpc;\n\nlistener grpc:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with Basic auth and can be authorized optionally.\n\/\/ Using Basic auth with the file user store can be enabled by setting the\n\/\/ [`grpc:FileUserStoreConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/records\/FileUserStoreConfig) configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@grpc:ServiceConfig {\n    auth: [\n        {\n            fileUserStoreConfig: {},\n            scopes: [\"admin\"]\n        }\n    ]\n}\n@grpc:ServiceDescriptor {\n    descriptor: ROOT_DESCRIPTOR_GRPC_SERVICE,\n    descMap: getDescriptorMapGrpcService()\n}\nservice \"HelloWorld\" on securedEP {\n    remote function hello() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"grpc_service_basic_auth_file_user_store.server.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_secured_pb.bal` stub file to the package.\n# For example, if you create a package named `service`, copy the stub file to the `service` package.\n\n# Create a new `grpc_service_basic_auth_file_user_store.bal` Ballerina file inside the `service` package and add the service implementation.\n\n# As a prerequisite, ensure that the `Config.toml` file is populated correctly\n# with the user information.\necho '[[\"ballerina.auth.users\"]]\nusername=\"alice\"\npassword=\"password1\"\nscopes=[\"scope1\"]\n[[\"ballerina.auth.users\"]]\nusername=\"bob\"\npassword=\"password2\"\nscopes=[\"scope2\", \"scope3\"]' > Config.toml\n\n# Execute the command below to build the 'service' package.\n# You may need to change the certificate file path and private key file path.\n`bal build service`\n\n# Run the service using the command below.\nbal run service\/target\/bin\/service.jar"}], "description":"\/\/ A gRPC service\/resource can be secured using Basic auth and optionally by\n\/\/ enforcing authorization. Then, it validates the Basic auth token sent as the\n\/\/ `Authorization` metadata against the provided configurations. This reads data\n\/\/ from a file, which has a TOML format. This stores the usernames, passwords\n\/\/ for authentication, and scopes for authorization.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s).<br\/>\n\/\/ In the authorization phase, the scopes of the service\/resource are compared\n\/\/ against the scope included in the user store for at least one match between\n\/\/ the two sets.<br\/>\n\/\/ `Config.toml` has defined three users - alice, ldclakmal, and eve. Each user has a\n\/\/ password and optionally assigned scopes as an array.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Auth module](https:\/\/docs.central.ballerina.io\/ballerina\/auth\/latest\/).", "metatags":"description: BBE on how to secure gRPC service with Basic auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, grpc, auth, basic auth"}, {"bbeName":"grpc-service-basic-auth-ldap-user-store", "resources":[{"tag":"service", "balFileName":"", "bal":"", "outputFileName":"grpc_service.out", "output":"# Create a new Protocol Buffers definition file named `grpc_service.proto` and add the service definition to it.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_service.proto --output stubs\n\n# Once you run the command, `grpc_service_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"store", "balFileName":"grpc_service_basic_auth_ldap_user_store.bal", "bal":"import ballerina\/grpc;\n\nlistener grpc:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with Basic auth and can be authorized optionally.\n\/\/ Basic auth using the LDAP user store can be enabled by setting the\n\/\/ [`grpc:LdapUserStoreConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/records\/LdapUserStoreConfig) configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@grpc:ServiceConfig {\n    auth: [\n        {\n            ldapUserStoreConfig: {\n                domainName: \"avix.lk\",\n                connectionUrl: \"ldap:\/\/localhost:389\",\n                connectionName: \"cn=admin,dc=avix,dc=lk\",\n                connectionPassword: \"avix123\",\n                userSearchBase: \"ou=Users,dc=avix,dc=lk\",\n                userEntryObjectClass: \"inetOrgPerson\",\n                userNameAttribute: \"uid\",\n                userNameSearchFilter: \"(&(objectClass=inetOrgPerson)(uid=?))\",\n                userNameListFilter: \"(objectClass=inetOrgPerson)\",\n                groupSearchBase: [\"ou=Groups,dc=avix,dc=lk\"],\n                groupEntryObjectClass: \"groupOfNames\",\n                groupNameAttribute: \"cn\",\n                groupNameSearchFilter: \"(&(objectClass=groupOfNames)(cn=?))\",\n                groupNameListFilter: \"(objectClass=groupOfNames)\",\n                membershipAttribute: \"member\",\n                userRolesCacheEnabled: true,\n                connectionPoolingEnabled: false,\n                connectionTimeout: 5,\n                readTimeout: 60\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\n@grpc:ServiceDescriptor {\n    descriptor: ROOT_DESCRIPTOR_GRPC_SERVICE,\n    descMap: getDescriptorMapGrpcService()\n}\nservice \"HelloWorld\" on securedEP {\n    remote function hello() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"grpc_service_basic_auth_ldap_user_store.server.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_secured_pb.bal` stub file to the package.\n# For example, if you create a package named `service`, copy the stub file to the `service` package.\n\n# Create a new `grpc_service_basic_auth_ldap_user_store.bal` Ballerina file inside the `service` package and add the service implementation.\n\n# Execute the command below to build the 'service' package.\n# You may need to change the certificate file path and private key file path.\n`bal build service`\n\n# Run the service using the command below.\nbal run service\/target\/bin\/service.jar"}], "description":"\/\/ A gRPC service\/resource can be secured using Basic auth and by enforcing\n\/\/ authorization optionally. Then, it validates the Basic auth token sent in\n\/\/ the `Authorization` metadata against the provided configurations. This reads\n\/\/ data from the configured LDAP. This stores usernames, passwords for\n\/\/ authentication, and scopes for authorization.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s).<br\/>\n\/\/ In the authorization phase, the scopes of the service\/resource are compared\n\/\/ against the scope included in the user store for at least one match between\n\/\/ the two sets.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Auth module](https:\/\/docs.central.ballerina.io\/ballerina\/auth\/latest\/).", "metatags":"description: BBE on how to secure gRPC service with Basic auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, grpc, auth, basic auth"}, {"bbeName":"grpc-service-jwt-auth", "resources":[{"tag":"service", "balFileName":"", "bal":"", "outputFileName":"grpc_service.out", "output":"# Create a new Protocol Buffers definition file named `grpc_service.proto` and add the service definition to it.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_service.proto --output stubs\n\n# Once you run the command, `grpc_service_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"auth", "balFileName":"grpc_service_jwt_auth.bal", "bal":"import ballerina\/grpc;\n\nlistener grpc:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with JWT authentication and can be authorized\n\/\/ optionally. JWT authentication can be enabled by setting the\n\/\/ [`grpc:JwtValidatorConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/records\/JwtValidatorConfig) configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@grpc:ServiceConfig {\n    auth: [\n        {\n            jwtValidatorConfig: {\n                issuer: \"wso2\",\n                audience: \"ballerina\",\n                signatureConfig: {\n                    certFile: \"..\/resource\/path\/to\/public.crt\"\n                },\n                scopeKey: \"scp\"\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\n@grpc:ServiceDescriptor {\n    descriptor: ROOT_DESCRIPTOR_GRPC_SERVICE,\n    descMap: getDescriptorMapGrpcService()\n}\nservice \"HelloWorld\" on securedEP {\n    remote function hello() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"grpc_service_jwt_auth.server.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_secured_pb.bal` stub file to the package.\n# For example, if you create a package named `service`, copy the stub file to the `service` package.\n\n# Create a new `grpc_service_jwt_auth.bal` Ballerina file inside the `service` package and add the service implementation.\n\n# Execute the command below to build the 'service' package.\n# You may need to change the certificate file path and private key file path.\n`bal build service`\n\n# Run the service using the command below.\nbal run service\/target\/bin\/service.jar"}], "description":"\/\/ A gRPC service\/resource can be secured using JWT and by enforcing\n\/\/ authorization optionally. Then, it validates the JWT sent in the\n\/\/ `Authorization` metadata against the provided configurations.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s). The scope can be included\n\/\/ in the JWT using a custom claim attribute. That custom claim attribute\n\/\/ also can be configured as the `scopeKey`.<br\/>\n\/\/ In the authorization phase, the scopes of the service\/resource are compared\n\/\/ against the scope included in the JWT for at least one match between the two\n\/\/ sets.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [JWT module](https:\/\/docs.central.ballerina.io\/ballerina\/jwt\/latest\/).", "metatags":"description: BBE on how to secure gRPC service with JWT auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, grpc, auth, jwt auth"}, {"bbeName":"grpc-service-mutual-ssl", "resources":[{"tag":"service", "balFileName":"", "bal":"", "outputFileName":"grpc_service.out", "output":"# Create a new Protocol Buffers definition file named `grpc_service.proto` and add the service definition to it.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_service.proto --output stubs\n\n# Once you run the command, `grpc_service_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"ssl", "balFileName":"grpc_service_mutual_ssl.bal", "bal":"import ballerina\/grpc;\n\n\/\/ A gRPC listener can be configured to accept new connections that are\n\/\/ secured via mutual SSL.\n\/\/ The [`grpc:ListenerSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/records\/ListenerSecureSocket) record provides the SSL-related listener configurations.\nlistener grpc:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        },\n        \/\/ Enables mutual SSL.\n        mutualSsl: {\n            verifyClient: grpc:REQUIRE,\n            cert: \"..\/resource\/path\/to\/public.crt\"\n        },\n        \/\/ Enables the preferred SSL protocol and its versions.\n        protocol: {\n            name: grpc:TLS,\n            versions: [\"TLSv1.2\", \"TLSv1.1\"]\n        },\n        \/\/ Configures the preferred ciphers.\n        ciphers: [\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\"]\n\n    }\n);\n\n@grpc:ServiceDescriptor {\n    descriptor: ROOT_DESCRIPTOR_GRPC_SERVICE,\n    descMap: getDescriptorMapGrpcService()\n}\nservice \"HelloWorld\" on securedEP {\n    remote function hello() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"grpc_service_mutual_ssl.server.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_secured_pb.bal` stub file to the package.\n# For example, if you create a package named `service`, copy the stub file to the `service` package.\n\n# Create a new `grpc_service_mutual_ssl.bal` Ballerina file inside the `service` package and add the service implementation.\n\n# Execute the command below to build the 'service' package.\n# You may need to change the certificate file path, private key file path, and\n# trusted certificate file path.\n`bal build service`\n\n# Run the service using the command below.\nbal run service\/target\/bin\/service.jar"}], "description":"\/\/ Ballerina supports mutual SSL, which is a certificate-based authentication\n\/\/ process in which two parties (the client and server) authenticate each other by\n\/\/ verifying the digital certificates. It ensures that both parties are assured\n\/\/ of each other's identity.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [gRPC module](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/).", "metatags":"description: BBE on how to secure gRPC listener with mutual SSL.\nkeywords: ballerina, ballerina by example, bbe, grpc, mutual ssl, ssl protocols, ciphers"}, {"bbeName":"grpc-service-oauth2", "resources":[{"tag":"service", "balFileName":"", "bal":"", "outputFileName":"grpc_service.out", "output":"# Create a new Protocol Buffers definition file named `grpc_service.proto` and add the service definition to it.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_service.proto --output stubs\n\n# Once you run the command, `grpc_service_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"oauth2", "balFileName":"grpc_service_oauth2.bal", "bal":"import ballerina\/grpc;\n\nlistener grpc:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with OAuth2 authentication and can be authorized\n\/\/ optionally. OAuth2 authentication can be enabled by setting the\n\/\/ [`grpc:OAuth2IntrospectionConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/records\/OAuth2IntrospectionConfig) configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@grpc:ServiceConfig {\n    auth: [\n        {\n            oauth2IntrospectionConfig: {\n                url: \"https:\/\/localhost:9445\/oauth2\/introspect\",\n                tokenTypeHint: \"access_token\",\n                scopeKey: \"scp\",\n                clientConfig: {\n                    customHeaders: {\"Authorization\": \"Basic YWRtaW46YWRtaW4=\"},\n                    secureSocket: {\n                        cert: \"..\/resource\/path\/to\/public.crt\"\n                    }\n                }\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\n@grpc:ServiceDescriptor {\n    descriptor: ROOT_DESCRIPTOR_GRPC_SERVICE,\n    descMap: getDescriptorMapGrpcService()\n}\nservice \"HelloWorld\" on securedEP {\n    remote function hello() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"grpc_service_oauth2.server.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_secured_pb.bal` stub file to the package.\n# For example, if you create a package named `service`, copy the stub file to the `service` package.\n\n# Create a new `grpc_service_oauth2.bal` Ballerina file inside the `service` package and add the service implementation.\n\n# Execute the command below to build the 'service' package.\n# You may need to change the certificate file path and private key file path.\n`bal build service`\n\n# Run the service using the command below.\nbal run service\/target\/bin\/service.jar"}], "description":"\/\/ A gRPC service\/resource can be secured using OAuth2 and by enforcing\n\/\/ authorization optionally. Then, it validates the OAuth2 token sent in the\n\/\/ `Authorization` metadata against the provided configurations. This calls the\n\/\/ configured introspection endpoint to validate.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s). The scope can be included\n\/\/ in the introspection response using a custom claim attribute. That custom\n\/\/ claim attribute also can be configured as the `scopeKey`.<br\/>\n\/\/ In the authorization phase, the scopes of the service\/resource are compared\n\/\/ against the scope included in the introspection response for at least one\n\/\/ match between the two sets.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure gRPC service with OAuth2 in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, grpc, auth, oauth2, introspection"}, {"bbeName":"grpc-service-ssl-tls", "resources":[{"tag":"service", "balFileName":"", "bal":"", "outputFileName":"grpc_service.out", "output":"# Create a new Protocol Buffers definition file named `grpc_service.proto` and add the service definition to it.\n# Run the command below in the Ballerina tools distribution for stub generation.\nbal grpc --input grpc_service.proto --output stubs\n\n# Once you run the command, `grpc_service_pb.bal` file is generated inside stubs directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"tls", "balFileName":"grpc_service_ssl_tls.bal", "bal":"import ballerina\/grpc;\n\n\/\/ A gRPC listener can be configured to communicate through SSL\/TLS as well.\n\/\/ To secure a listener using SSL\/TLS, the listener needs to be configured\n\/\/ with a certificate file and a private key file for the listener.\n\/\/ The [`grpc:ListenerSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/records\/ListenerSecureSocket) record\n\/\/ provides the SSL-related listener configurations of the listener.\nlistener grpc:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \".\/resources\/public.crt\",\n            keyFile: \".\/resources\/private.key\"\n        }\n    }\n);\n\n@grpc:ServiceDescriptor {\n    descriptor: ROOT_DESCRIPTOR_GRPC_SERVICE,\n    descMap: getDescriptorMapGrpcService()\n}\nservice \"HelloWorld\" on securedEP {\n    remote function hello() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"grpc_service_ssl_tls.server.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_secured_pb.bal` stub file to the package.\n# For example, if you create a package named `service`, copy the stub file to the `service` package.\n\n# Create a new `grpc_service_ssl_tls.bal` Ballerina file inside the `service` package and add the service implementation.\n\n# Execute the command below to build the 'service' package.\n# You may need to change the certificate file path and private key file path.\n`bal build service`\n\n# Run the service using the command below.\nbal run service\/target\/bin\/service.jar"}], "description":"\/\/ You can use the gRPC listener to connect to or interact with a gRPC client\n\/\/ secured with SSL\/TLS.\n\/\/ Provide the `grpc:ListenerSecureSocket` configurations to the server to\n\/\/ expose an HTTPS connection over HTTP\/2.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [gRPC module](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/).", "metatags":"description: BBE on how to secure gRPC listener with SSL.\nkeywords: ballerina, ballerina by example, bbe, grpc, ssl, tls"}, {"bbeName":"grpc-simple", "resources":[{"tag":"simple", "balFileName":"", "bal":"", "outputFileName":"grpc_simple.out", "output":"# Create a new Protocol Buffers definition file named `grpc_simple.proto` and add the service definition.\n# Run the command below from the Ballerina tools distribution for stub generation.\n`bal grpc --input grpc_simple.proto  --output stubs`\n\n# Once you run the command, the `grpc_simple_pb.bal` file is generated inside the `stubs` directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"service", "balFileName":"grpc_simple_service.bal", "bal":"\/\/ This is the server implementation of the simple RPC scenario.\nimport ballerina\/grpc;\n\n@grpc:ServiceDescriptor {\n    descriptor: ROOT_DESCRIPTOR_GRPC_SIMPLE,\n    descMap: getDescriptorMapGrpcSimple()\n}\nservice \"HelloWorld\" on new grpc:Listener(9090) {\n\n    remote function hello(string request) returns string|error {\n        \/\/ Reads the request message and sends a response.\n        return \"Hello \" + request;\n    }\n}", "outputFileName":"grpc_simple_service.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_simple_pb.bal` stub file to the package.\n# For example, if you create a package named `service`, copy the stub file to the `service` package.\n\n# Create a new `grpc_simple.bal` Ballerina file inside the `service` package and add the service implementation.\n\n# Execute the command below to build the 'service' package.\n`bal build service`\n\n# Run the service using the command below.\nbal run service\/target\/bin\/service.jar"}, {"tag":"client", "balFileName":"grpc_simple_service_client.bal", "bal":"\/\/ This is the client implementation of the simple RPC scenario.\nimport ballerina\/io;\n\n\/\/ Creates a gRPC client to interact with the remote server.\nHelloWorldClient ep = check new(\"http:\/\/localhost:9090\");\n\npublic function main () returns error? {\n    \/\/ Executes a simple remote call.\n    string result = check ep->hello(\"WSO2\");\n    \/\/ Prints the received result.\n    io:println(result);\n}", "outputFileName":"grpc_simple_service_client.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_unary_blocking_pb.bal` stub file to the package.\n# For example, if you create a package named `client`, copy the stub file to the `client` package.\n\n# Create a new `grpc_unary_blocking_client.bal` Ballerina file inside the `client` package and add the client implementation.\n\n# Execute the command below to build the 'client' package.\nbal build client\n\n# Run the client using the command below.\nbal run client\/target\/bin\/client.jar"}], "description":"\/\/ The gRPC Server Connector exposes the gRPC service over HTTP2.\n\/\/ This example demonstrates how the gRPC simple service interacts with the gRPC client.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [GRPC module](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/).", "metatags":"description: This Ballerina by Example has a gRPC simple service and a client and the client sends and receives messages through a remote call.\nkeywords: ballerina, ballerina by example, bbe, grpc, unary, simple"}, {"bbeName":"grpc-simple-with-headers", "resources":[{"tag":"headers", "balFileName":"", "bal":"", "outputFileName":"grpc_simple_with_headers.out", "output":"# Create a new Protocol Buffers definition file named `grpc_simple_with_headers.proto` and add the service definition.\n# Run the command below in the Ballerina tools distribution for stub generation.\n`bal grpc --input grpc_simple_with_headers.proto  --output stubs`\n\n# Once you run the command, the `grpc_simple_with_headers_pb.bal` file is generated inside the `stubs` directory.\n\n# For more information on how to use the Ballerina Protocol Buffers tool, see the [Proto To Ballerina](https:\/\/ballerina.io\/learn\/by-example\/proto-to-ballerina.html) example."}, {"tag":"service", "balFileName":"grpc_simple_with_headers_service.bal", "bal":"\/\/ This is the server implementation of the simple RPC scenario.\nimport ballerina\/grpc;\nimport ballerina\/log;\nimport ballerina\/protobuf.types.wrappers;\n\n@grpc:ServiceDescriptor {\n    descriptor: ROOT_DESCRIPTOR_GRPC_SIMPLE_WITH_HEADERS,\n    descMap: getDescriptorMapGrpcSimpleWithHeaders()\n}\nservice \"HelloWorld\" on new grpc:Listener(9090) {\n\n    remote function hello(wrappers:ContextString request)\n                        returns wrappers:ContextString|error {\n        \/\/ Reads the request message and creates a response.\n        string message = \"Hello \" + request.content;\n\n        \/\/ Reads the header value in the request message by passing the request header map and header key.\n        string reqHeader = check grpc:getHeader(request.headers,\n                \"client_header_key\");\n        log:printInfo(\"Server received header value: \" + reqHeader);\n\n        \/\/ Sends the response with the header.\n        return {content: message, headers: {server_header_key:\n        \"Response Header value\"}};\n    }\n}", "outputFileName":"grpc_simple_with_headers_service.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_simple_with_headers_pb.bal` stub file to the package.\n# For example, if you create a package named `service`, copy the stub file to the `service` package.\n\n# Create a new `grpc_simple_with_headers.bal` Ballerina file inside the `service` package and add the service implementation.\n\n# Execute the command below to build the 'service' package.\n`bal build service`\n\n# Run the service using the command below.\n`bal run service\/target\/bin\/service.jar`"}, {"tag":"client", "balFileName":"grpc_simple_with_headers_service_client.bal", "bal":"\/\/ This is the client implementation of the simple RPC scenario.\nimport ballerina\/grpc;\nimport ballerina\/io;\nimport ballerina\/protobuf.types.wrappers;\n\n\/\/ Creates a gRPC client to interact with the remote server.\nHelloWorldClient ep = check new(\"http:\/\/localhost:9090\");\n\npublic function main () returns error? {\n    \/\/ Creates the request message with the header value.\n    wrappers:ContextString requestMessage =\n    {content: \"WSO2\", headers: {client_header_key: \"0987654321\"}};\n\n    \/\/ Executes a simple remote call.\n    wrappers:ContextString result = check ep->helloContext(requestMessage);\n\n    \/\/ Prints the received result.\n    io:println(result.content);\n\n    \/\/ Reads the header value in the response message and prints it.\n    io:println(check grpc:getHeader(result.headers, \"server_header_key\"));\n}", "outputFileName":"grpc_simple_with_headers_service_client.out", "output":"# Create a Ballerina package.\n# Copy the generated `grpc_simple_with_headers_pb.bal` stub file to the package.\n# For example, if you create a package named `client`, copy the stub file to the `client` package.\n\n# Create a new `grpc_simple_with_headers_client.bal` Ballerina file inside the `client` package and add the client implementation.\n\n# Execute the command below to build the 'client' package.\n`bal build client`\n\n# Run the client using the command below.\n`bal run client\/target\/bin\/client.jar`"}], "description":"\/\/ The gRPC Server Connector exposes the gRPC service over HTTP2.\n\/\/ This example demonstrates how the gRPC simple service interacts with the gRPC client, and how\n\/\/ header values are handled.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [GRPC module](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/).", "metatags":"description: This Ballerina by Example has a gRPC simple service and a client and the client sends and receives messages and headers through a remote call.\nkeywords: ballerina, ballerina by example, bbe, grpc, unary, simple"}, {"bbeName":"hello-world", "resources":[{"tag":"world", "balFileName":"hello_world.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    io:println(\"Hello, World!\");\n}", "outputFileName":"hello_world.out", "output":"# To run this sample, place the source code in \n# `hello_world.bal` file and use `bal run` command.\nbal run hello_world.bal\nHello, World!"}], "description":"// Let's write the `Hello World` program in Ballerina.", "metatags":"description: The classic \"Hello, World\" program in Ballerina\nkeywords:  ballerina, ballerina by example, bbe,"}, {"bbeName":"hello-world-service", "resources":[{"tag":"service", "balFileName":"hello_world_service.bal", "bal":"import ballerina\/http;\n\nservice \/ on new http:Listener(9090) {\n\n    \/\/ This function responds with `string` value `Hello, World!` to HTTP GET requests.\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n\n}", "outputFileName":"hello_world_service.server.out", "output":"bal run hello_world_service.bal"}], "description":"\/\/ Let's write a simple HTTP service in Ballerina. \n\/\/ This example demonstrates the network primitives in the language that make it simpler to develop services.", "metatags":"description: The Hello World HTTP service in Ballerina\nkeywords:  ballerina, ballerina by example, bbe,"}, {"bbeName":"hierarchical-resources", "resources":[{"tag":"resources", "balFileName":"hierarchical_resources.bal", "bal":"import ballerina\/http;\n\n\/\/ Base path of this service is `\/demo`.\nservice \/demo on new http:Listener(8080) {\n    \/\/ You can combine base path and relative path to get the path of the resource, that is `\/demo\/greeting\/hello`.\n    resource function get greeting\/hello(string name) returns string {\n        return \"Hello, \" + name;\n    }\n\n}", "outputFileName":"hierarchical_resources.server.out", "output":"bal run hierarchical_resources.bal"}], "description":"\/\/ Resource name is relative path, which can have multiple path segments.\n\/\/ Base path is absolute path. A listener can have multiple services each with different base paths.", "metatags":"description: This BBE introduces hierarchical resources concept.\nkeywords:  ballerina, ballerina by example, bbe, resources, hierarchical resources, services"}, {"bbeName":"http-1-1-to-2-0-protocol-switch", "resources":[{"tag":"switch", "balFileName":"http_1_1_to_2_0_protocol_switch.bal", "bal":"import ballerina\/http;\n\n\/\/ HTTP version is set to 2.0.\nhttp:Client http2serviceClientEP =\n        check new (\"http:\/\/localhost:7090\", {httpVersion: \"2.0\"});\n\nservice \/ on new http:Listener(9090) {\n\n    resource function 'default http11Service(http:Request clientRequest)\n            returns json|error {\n        \/\/ Forward the [clientRequest](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/classes\/Request) to the `http2` service.\n        json clientResponse = check\n            http2serviceClientEP->forward(\"\/http2service\", clientRequest);\n\n        \/\/ Send the response back to the caller.\n        return clientResponse;\n\n    }\n}\n\n\/\/ HTTP version is set to 2.0.\nlistener http:Listener http2serviceEP = new (7090,\n    config = {httpVersion: \"2.0\"});\n\nservice \/ on http2serviceEP {\n\n    resource function 'default http2service() returns json {\n        \/\/ Send the response back to the caller (http11Service).\n        return { \n            \"response\": {\n                \"message\":\"response from http2 service\"\n            }\n        };\n    }\n}", "outputFileName":"http_1_1_to_2_0_protocol_switch.server.out", "output":"bal run http_1_1_to_2_0_protocol_switch.bal"}], "description":"\/\/ In this example, the Ballerina HTTP service receives a message over the HTTP\/1.1 protocol and forwards it \n\/\/ to another service over the HTTP\/2.0 protocol.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).  ", "metatags":"description: This BBE shows how the Ballerina HTTP service receives a message over the HTTP\/1.1 protocol and forwards it to another service over the HTTP\/2.0 protocol.\nkeywords: ballerina, ballerina by examples, bbe, http, http\/1.1, http\/2.0, http\/2"}, {"bbeName":"http-100-continue", "resources":[{"tag":"continue", "balFileName":"http_100_continue.bal", "bal":"import ballerina\/http;\nimport ballerina\/log;\n\nservice \/ on new http:Listener(9090) {\n\n    resource function 'default hello(http:Caller caller, http:Request request)\n            returns error? {\n        \/\/ [Check if the client expects a 100-continue response](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/classes\/Request#expects100Continue).\n        if (request.expects100Continue()) {\n            string mediaType = request.getContentType();\n            if (mediaType.toLowerAscii() == \"text\/plain\") {\n\n                \/\/ Send a 100-continue response to the client.\n                var result = caller->continue();\n                if (result is error) {\n                    log:printError(\"Error sending response\", 'error = result);\n                }\n\n            \/\/ Send a 417 response to ignore the payload since content type is mismatched\n            \/\/ with the expected content type.\n            } else {\n                http:Response resp = new;\n                resp.statusCode = http:STATUS_EXPECTATION_FAILED;\n                resp.setPayload(\"Unprocessable Entity\");\n                check caller->respond(resp);\n            }\n        }\n\n        \/\/ The client starts sending the payload once it receives the\n        \/\/ 100-continue response. Retrieve the payload that is sent by the client.\n        var payload = request.getTextPayload();\n        if (payload is string) {\n            log:printInfo(payload);\n            check caller->respond(\"Hello World!\\n\");\n        } else {\n            http:Response resp = new;\n            resp.statusCode = http:STATUS_INTERNAL_SERVER_ERROR;\n            resp.setPayload(payload.message());\n            check caller->respond(resp);\n        }\n    }\n}", "outputFileName":"http_100_continue.server.out", "output":"bal run http_expect_header.bal\ntime = 2021-01-21 20:31:28,347 level = INFO  module = \"\" message = \"TEST 100 CONTINUE\""}], "description":"\/\/ Convenience functions are provided in the HTTP library for ease of use when handling 100-continue scenarios. \n\/\/ 100-continue indicates that the server has received the request headers and the client can proceed with sending the request.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).  ", "metatags":"description: BBE on how HTTP 100-continue can be handled by the Ballerina server and the HTTP client connector.\nkeywords: ballerina, ballerina by example, bbe, http, 100-continue"}, {"bbeName":"http-2-0-server-push", "resources":[{"tag":"service", "balFileName":"http_2_0_service.bal", "bal":"import ballerina\/http;\nimport ballerina\/log;\n\n\/\/ Create an endpoint with port 7090 to accept HTTP requests.\n\/\/ HTTP version is set to 2.0.\nlistener http:Listener http2ServiceEP = new (7090,\n    config = {httpVersion: \"2.0\"});\n\nservice \/http2Service on http2ServiceEP {\n\n    resource function 'default .(http:Caller caller) {\n\n        \/\/ [Send a Push Promise](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/clients\/Caller#promise).\n        http:PushPromise promise1 = new (path = \"\/resource1\", method = \"GET\");\n        var promiseResponse1 = caller->promise(promise1);\n        if (promiseResponse1 is error) {\n            log:printError(\"Error occurred while sending the promise1\",\n                'error = promiseResponse1);\n        }\n\n        \/\/ Send another Push Promise.\n        http:PushPromise promise2 = new (path = \"\/resource2\", method = \"GET\");\n        var promiseResponse2 = caller->promise(promise2);\n        if (promiseResponse2 is error) {\n            log:printError(\"Error occurred while sending the promise2\",\n                'error = promiseResponse2);\n        }\n\n        \/\/ Send one more Push Promise.\n        http:PushPromise promise3 = new (path = \"\/resource3\", method = \"GET\");\n        var promiseResponse3 = caller->promise(promise3);\n        if (promiseResponse3 is error) {\n            log:printError(\"Error occurred while sending the promise3\",\n                'error = promiseResponse3);\n        }\n\n        \/\/ Construct the requested resource.\n        http:Response res = new;\n        json msg = {\"response\": {\"name\": \"main resource\"}};\n        res.setPayload(msg);\n\n        \/\/ Send the requested resource.\n        var response = caller->respond(res);\n        if (response is error) {\n            log:printError(\"Error occurred while sending the response\",\n                'error = response);\n        }\n\n        \/\/ Construct promised resource1.\n        http:Response push1 = new;\n        msg = {\"push\": {\"name\": \"resource1\"}};\n        push1.setPayload(msg);\n\n        \/\/ [Push promised resource1](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/clients\/Caller#pushPromisedResponse).\n        var pushResponse1 = caller->pushPromisedResponse(promise1, push1);\n        if (pushResponse1 is error) {\n            log:printError(\"Error occurred while sending the promised \" +\n                           \"response1\", 'error = pushResponse1);\n        }\n\n        \/\/ Construct promised resource2.\n        http:Response push2 = new;\n        msg = {\"push\": {\"name\": \"resource2\"}};\n        push2.setPayload(msg);\n\n        \/\/ Push promised resource2.\n        var pushResponse2 = caller->pushPromisedResponse(promise2, push2);\n        if (pushResponse2 is error) {\n            log:printError(\"Error occurred while sending the promised \" +\n                            \"response2\", 'error = pushResponse2);\n        }\n\n        \/\/ Construct promised resource3.\n        http:Response push3 = new;\n        msg = {\"push\": {\"name\": \"resource3\"}};\n        push3.setPayload(msg);\n\n        \/\/ Push promised resource3.\n        var pushResponse3 = caller->pushPromisedResponse(promise3, push3);\n        if (pushResponse3 is error) {\n            log:printError(\"Error occurred while sending the promised \" +\n                            \"response3\", 'error = pushResponse3);\n        }\n    }\n}", "outputFileName":"http_2_0_service.out", "output":"bal run http_2.0_service.bal"}, {"tag":"client", "balFileName":"http_client.bal", "bal":"import ballerina\/http;\nimport ballerina\/log;\n\n\/\/ Create an [HTTP client](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/clients\/Client) that can send HTTP\/2 messages.\n\/\/ HTTP version is set to 2.0.\nfinal http:Client clientEP =\n        check new (\"http:\/\/localhost:7090\", {httpVersion: \"2.0\"});\n\npublic function main() {\n\n    http:Request serviceReq = new;\n    http:HttpFuture httpFuture = new;\n    \/\/ [Submit a request](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/clients\/Client#submit).\n    var submissionResult = clientEP->submit(\"GET\", \"\/http2Service\", serviceReq);\n\n    if (submissionResult is http:HttpFuture) {\n        httpFuture = submissionResult;\n    } else {\n        log:printError(\"Error occurred while submitting a request\",\n            'error = submissionResult);\n        return;\n    }\n\n    http:PushPromise?[] promises = [];\n    int promiseCount = 0;\n    \/\/ [Check if promises exists](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/clients\/Client#hasPromise).\n    boolean hasPromise = clientEP->hasPromise(httpFuture);\n\n    while (hasPromise) {\n        http:PushPromise pushPromise = new;\n        \/\/ [Get the next promise](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/clients\/Client#getNextPromise).\n        var nextPromiseResult = clientEP->getNextPromise(httpFuture);\n\n        if (nextPromiseResult is http:PushPromise) {\n            pushPromise = nextPromiseResult;\n        } else {\n            log:printError(\"Error occurred while fetching a push promise\",\n                'error = nextPromiseResult);\n            return;\n        }\n        log:printInfo(\"Received a promise for \" + pushPromise.path);\n\n        if (pushPromise.path == \"\/resource2\") {\n            \/\/ The client is not interested in receiving `\/resource2`.\n            \/\/ Therefore, [reject the promise](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/clients\/Client#rejectPromise).\n            clientEP->rejectPromise(pushPromise);\n\n            log:printInfo(\"Push promise for resource2 rejected\");\n        } else {\n            \/\/ Store the required promises.\n            promises[promiseCount] = pushPromise;\n\n            promiseCount = promiseCount + 1;\n        }\n        hasPromise = clientEP->hasPromise(httpFuture);\n    }\n\n    http:Response response = new;\n    \/\/ [Get the requested resource](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/clients\/Client#getResponse).\n    var result = clientEP->getResponse(httpFuture);\n\n    if (result is http:Response) {\n        response = result;\n    } else {\n        log:printError(\"Error occurred while fetching response\",\n                'error = <error>result);\n        return;\n    }\n\n    var responsePayload = response.getJsonPayload();\n    if (responsePayload is json) {\n        log:printInfo(\"Response : \" + responsePayload.toJsonString());\n    } else {\n        log:printError(\"Expected response payload not received\",\n          'error = responsePayload);\n    }\n\n    \/\/ Fetch required promise responses.\n    foreach var p in promises {\n        http:PushPromise promise = <http:PushPromise>p;\n        http:Response promisedResponse = new;\n        var promisedResponseResult = clientEP->getPromisedResponse(promise);\n        if (promisedResponseResult is http:Response) {\n            promisedResponse = promisedResponseResult;\n        } else {\n            log:printError(\"Error occurred while fetching promised response\",\n                'error = promisedResponseResult);\n            return;\n        }\n        var promisedPayload = promisedResponse.getJsonPayload();\n        if (promisedPayload is json) {\n            log:printInfo(\"Promised resource : \" +\n                           promisedPayload.toJsonString());\n        } else {\n            log:printError(\"Expected promised response payload not received\",\n                'error = promisedPayload);\n        }\n    }\n}", "outputFileName":"http_client.out", "output":"bal run http_client.bal\ntime = 2021-01-21 18:54:45,237 level = INFO  module = \"\" message = \"Received a promise for \/resource1\"\ntime = 2021-01-21 18:54:45,278 level = INFO  module = \"\" message = \"Received a promise for \/resource2\"\ntime = 2021-01-21 18:54:45,281 level = INFO  module = \"\" message = \"Push promise for resource2 rejected\"\ntime = 2021-01-21 18:54:45,283 level = INFO  module = \"\" message = \"Received a promise for \/resource3\"\ntime = 2021-01-21 18:54:45,306 level = INFO  module = \"\" message = \"Response : {\"response\":{\"name\":\"main resource\"}}\"\ntime = 2021-01-21 18:54:45,314 level = INFO  module = \"\" message = \"Promised resource : {\"push\":{\"name\":\"resource1\"}}\"\ntime = 2021-01-21 18:54:45,468 level = INFO  module = \"\" message = \"Promised resource : {\"push\":{\"name\":\"resource3\"}}\""}], "description":"\/\/ This example demonstrates sending and receiving HTTP\/2 Server Push messages in Ballerina HTTP Library. \n\/\/ HTTP\/2 Server Push messages allow the server to send resources to the client before the client requests for it.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).  ", "metatags":"description: This BBE demonstrates sending and receiving HTTP\/2 Server Push messages in Ballerina HTTP Library.\nkeywords: ballerina, ballerina by examples, bbe, http, http\/2.0, http\/2"}, {"bbeName":"http-absolute-path-and-path", "resources":[{"tag":"path", "balFileName":"http_absolute_path_and_path.bal", "bal":"import ballerina\/http;\n\n\/\/ The `absolute resource path` represents the absolute path to the service. When bound to a listener\n\/\/ endpoint, the service will be accessible at the specified path. If the path is omitted, then it defaults to `\/`.\n\/\/ A string literal also can represent the absolute path. E.g., `\"\/foo\"`.\n\/\/ The `type descriptor` represents the respective type of the service. E.g., `http:Service`.\nservice http:Service \/foo on new http:Listener(9090) {\n\n    \/\/ The `resource method name` (`post`) confines the resource to the specified HTTP methods. In this\n    \/\/ instance, only `POST` requests are allowed. The `default` accessor can be used to match with all methods\n    \/\/ including standard HTTP methods and custom methods.\n    \/\/ The `resource path` associates the relative path to the service object's path. E.g., `bar`.\n    resource function post bar(@http:Payload json payload) returns json {\n        return payload;\n    }\n}", "outputFileName":"http_absolute_path_and_path.server.out", "output":"bal run absolute_path_and_path.bal"}], "description":"\/\/ Ballerina supports writing RESTful services according to the JAX-RS specification. \n\/\/ You can use the `absolute-resource-path` and `resource-name` to access a resource function while the `accessor-name`,\n\/\/ which is an HTTP verb as `post` and `get` to constrain your resource function in a RESTful manner.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to use the `absolute-resource-path`, `resource-name`, and `accessor-name` (HTTP verb) in Ballerina to dispatch and constrain the service in a RESTful manner.\nkeywords: ballerina, ballerina by example, bbe, http service, path, verb"}, {"bbeName":"http-access-logs", "resources":[{"tag":"logs", "balFileName":"http_access_logs.bal", "bal":"import ballerina\/http;\n\nservice \/ on new http:Listener(9095) {\n\n    resource function get hello() returns string {\n        return \"Successful\";\n    }\n}", "outputFileName":"http_access_logs.server.out", "output":"# Run the service by setting the configurations in the `Config.toml` file as follows to have logs in the console.\necho '[ballerina.http.accessLogConfig]\nconsole = true' > Config.toml\n\nbal run http_access_logs.bal\nballerina: HTTP access log enabled\n0:0:0:0:0:0:0:1 - - [06\/Oct\/2021:18:54:32 +0530] \"GET \/hello HTTP\/1.1\" 200 10 \"-\" \"curl\/7.64.1\"\n\n# Else, change the `Config.toml` file as follows to direct the log to the specified file.\necho '[ballerina.http.accessLogConfig]\npath = \"testAccessLog.txt\"' > Config.toml\n\nbal run http_access_logs.bal\nballerina: HTTP access log enabled"}], "description":"\/\/ Ballerina supports HTTP access logs for HTTP services. The access log format used is the combined log format.\n\/\/ To enable access logs, set `console=true` under the `ballerina.http.accessLogConfig` in the `Config.toml` file.\n\/\/ Also, the `path` field can be used to specify the file path to save the access logs.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: This BBE demonstrates the access logs for HTTP services in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, access log, service"}, {"bbeName":"http-caching-client", "resources":[{"tag":"client", "balFileName":"http_caching_client.bal", "bal":"import ballerina\/http;\n\n\/\/ Caching can be enabled by setting `enabled:true` in the `cache` config of the client.\n\/\/ In this example, the `isShared` field of the `cacheConfig` is set\n\/\/ to true, as the cache will be a public cache in this particular scenario.\n\/\/\n\/\/ The default caching policy is to cache a response only if it contains a\n\/\/ `cache-control` header and either an `etag` header, or a `last-modified`\n\/\/ header. The user can control this behaviour by setting the `policy` field of\n\/\/ the `cacheConfig`. Currently, there are only 2 policies:\n\/\/ `CACHE_CONTROL_AND_VALIDATORS` (the default policy) and `RFC_7234`.\n\nhttp:Client cachingEP = checkpanic new (\"http:\/\/localhost:8080\",\n                        {cache: {enabled: true, isShared: true}});\nservice \/ on new http:Listener(9090) {\n\n    resource function get cache(http:Request req)\n            returns http:Response|error? {\n        http:Response response = check cachingEP->forward(\"\/hello\", req);\n        \/\/ If the request was successful, an HTTP response will be\n        \/\/ returned.\n        return response;\n    }\n}\n\nservice \/ on new http:Listener(8080) {\n\n    resource function 'default hello() returns http:Response {\n        http:Response res = new;\n        \/\/ The `ResponseCacheControl` object in the `Response` object can be\n        \/\/ used for setting the cache control directives associated with the\n        \/\/ response. In this example, `max-age` directive is set to 15 seconds\n        \/\/ indicating that the response will be fresh for 15 seconds. The\n        \/\/ `must-revalidate` directive instructs that the cache should not\n        \/\/ serve a stale response without validating it with the origin server\n        \/\/ first. The `public` directive is set by setting `isPrivate=false`.\n        \/\/ This indicates that the response can be cached even by intermediary\n        \/\/ caches which serve multiple users.\n        http:ResponseCacheControl resCC = new;\n\n        resCC.maxAge = 15;\n        resCC.mustRevalidate = true;\n        resCC.isPrivate = false;\n        res.cacheControl = resCC;\n        json payload = {\"message\": \"Hello, World!\"};\n\n        \/\/ The `setETag()` function can be used for generating ETags for\n        \/\/ `string`, `json`, and `xml` types. This uses the `getCRC32()`\n        \/\/ function from the `ballerina\/crypto` module for generating the ETag.\n        res.setETag(payload);\n\n        \/\/ The `setLastModified()` function sets the current time as the\n        \/\/ `last-modified` header.\n        res.setLastModified();\n\n        res.setPayload(payload);\n        \/\/ When sending the response, if the `cacheControl` field of the\n        \/\/ response is set, and the user has not already set a `cache-control`\n        \/\/ header, a `cache-control` header will be set using the directives set\n        \/\/ in the `cacheControl` object.\n        return res;\n\n    }\n}", "outputFileName":"http_caching_client.server.out", "output":"# The two services have to be run separately to observe the following output.\n# For clarity, only the relevant parts of the HTTP trace logs have been included here.\nbal run http_caching_client.bal -- -Cballerina.http.traceLogConsole=true\n\n# The caching proxy receives a request from a client.\n[2021-11-26 09:52:32,588] TRACE {http.tracelog.downstream} - [id: 0x6c720951, correlatedSource: n\/a, host:\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50902] INBOUND: DefaultHttpRequest(decodeResult: success, version: HTTP\/1.1)\nGET \/cache HTTP\/1.1\nHost: localhost:9090\nUser-Agent: curl\/7.64.1\nAccept: *\/*\n\n# The proxy in turn, makes a request to the backend service.\n[2021-11-26 09:52:32,780] TRACE {http.tracelog.upstream} - [id: 0x99c1790f, correlatedSource: 0x6c720951, host:\/127.0.0.1:50903 - remote:localhost\/127.0.0.1:8080] OUTBOUND: DefaultHttpRequest(decodeResult: success, version: HTTP\/1.1)\nGET \/hello HTTP\/1.1\nAccept: *\/*\nhost: localhost:8080\nuser-agent: ballerina\nconnection: keep-alive\n\n# The backend service responds with a `200 OK` and it contains `etag` and `cache-control` headers. This response can be cached and as such, the caching client caches it. As seen from the `max-age` directive of the 'cache-control` header, this response is valid for 15 seconds.\n[2021-11-26 09:52:32,896] TRACE {http.tracelog.upstream} - [id: 0x99c1790f, correlatedSource: 0x6c720951, host:\/127.0.0.1:50903 - remote:localhost\/127.0.0.1:8080] INBOUND: DefaultHttpResponse(decodeResult: success, version: HTTP\/1.1)\nHTTP\/1.1 200 OK\netag: 620328e8\nlast-modified: Fri, 26 Nov 2021 04:22:32 GMT\ncontent-type: application\/json\ncache-control: must-revalidate,public,max-age=15\nserver: ballerina\ndate: Fri, 26 Nov 2021 09:52:32 +0530\ncontent-length: 27\n{\"message\":\"Hello, World!\"}\n\n# The response is sent back to the client.\n[2021-11-26 09:52:32,916] TRACE {http.tracelog.downstream} - [id: 0x6c720951, correlatedSource: n\/a, host:localhost\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50902] OUTBOUND: DefaultFullHttpResponse(decodeResult: success, version: HTTP\/1.1, content: CompositeByteBuf(ridx: 0, widx: 27, cap: 27, components=1))\nHTTP\/1.1 200 OK\netag: 620328e8\nlast-modified: Fri, 26 Nov 2021 04:22:32 GMT\ncontent-type: application\/json\ncache-control: must-revalidate,public,max-age=15\ndate: Fri, 26 Nov 2021 09:52:32 +0530\nserver: ballerina\ncontent-length: 27, 27B\n{\"message\":\"Hello, World!\"}\n\n# Subsequent requests to the proxy within the next 15 seconds are served from the proxy's cache. As seen here, the backend service is not contacted.\n[2021-11-26 09:52:40,143] TRACE {http.tracelog.downstream} - [id: 0xc79f9038, correlatedSource: n\/a, host:\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50915] INBOUND: DefaultHttpRequest(decodeResult: success, version: HTTP\/1.1)\nGET \/cache HTTP\/1.1\nHost: localhost:9090\nUser-Agent: curl\/7.64.1\nAccept: *\/*\n\n# Cached response.\n[2021-11-26 09:52:40,181] TRACE {http.tracelog.downstream} - [id: 0xc79f9038, correlatedSource: n\/a, host:localhost\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50915] OUTBOUND: DefaultFullHttpResponse(decodeResult: success, version: HTTP\/1.1, content: CompositeByteBuf(ridx: 0, widx: 27, cap: 27, components=1))\nHTTP\/1.1 200 OK\netag: 620328e8\nlast-modified: Fri, 26 Nov 2021 04:22:32 GMT\ncontent-type: application\/json\ncache-control: must-revalidate,public,max-age=15\ndate: Fri, 26 Nov 2021 09:52:32 +0530\nage: 8\nserver: ballerina\ncontent-length: 27, 27B\n{\"message\":\"Hello, World!\"}\n\n# Another request is sent after remaining idle for a while.\n[2021-11-26 09:52:54,648] TRACE {http.tracelog.downstream} - [id: 0x083aeb7c, correlatedSource: n\/a, host:\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50916] INBOUND: DefaultHttpRequest(decodeResult: success, version: HTTP\/1.1)\nGET \/cache HTTP\/1.1\nHost: localhost:9090\nUser-Agent: curl\/7.64.1\nAccept: *\/*\n\n# This time, the request is not served from the cache. The backend service is contacted. The `if-none-match` header sends the entity tag of the now stale response, so that the backend service may determine whether this response is still valid.\n[2021-11-26 09:52:54,668] TRACE {http.tracelog.upstream} - [id: 0x99c1790f, correlatedSource: 0x083aeb7c, host:\/127.0.0.1:50903 - remote:localhost\/127.0.0.1:8080] OUTBOUND: DefaultHttpRequest(decodeResult: success, version: HTTP\/1.1)\nGET \/hello HTTP\/1.1\nAccept: *\/*\nif-none-match: 620328e8\nif-modified-since: Fri, 26 Nov 2021 04:22:32 GMT\nuser-agent: curl\/7.64.1\nhost: localhost:8080\nconnection: keep-alive\ncontent-length: 0\n\n# The response has not changed. Therefore the backend services respond with a `304 Not Modified` response. Based on this, the proxy will refresh the response, so that it can continue serving the cached response.\n[2021-11-26 09:52:54,673] TRACE {http.tracelog.upstream} - [id: 0x99c1790f, correlatedSource: 0x083aeb7c, host:\/127.0.0.1:50903 - remote:localhost\/127.0.0.1:8080] INBOUND: DefaultHttpResponse(decodeResult: success, version: HTTP\/1.1)\nHTTP\/1.1 304 Not Modified\netag: 620328e8\nlast-modified: Fri, 26 Nov 2021 04:22:54 GMT\ncache-control: must-revalidate,public,max-age=15\nserver: ballerina\ndate: Fri, 26 Nov 2021 09:52:54 +0530\ncontent-length: 0\n\n# The cached response is served yet again since the response has not changed.\n[2021-11-26 09:52:54,688] TRACE {http.tracelog.downstream} - [id: 0x083aeb7c, correlatedSource: n\/a, host:localhost\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50916] OUTBOUND: DefaultFullHttpResponse(decodeResult: success, version: HTTP\/1.1, content: CompositeByteBuf(ridx: 0, widx: 27, cap: 27, components=1))\nHTTP\/1.1 200 OK\ncontent-type: application\/json\ncache-control: must-revalidate,public,max-age=15\ndate: Fri, 26 Nov 2021 09:52:54 +0530\netag: 620328e8\nlast-modified: Fri, 26 Nov 2021 04:22:54 GMT\nage: 0\nserver: ballerina\ncontent-length: 27, 27B\n{\"message\":\"Hello, World!\"}\n\n# The output for the mock service.\nball run  hello_service.bal -- -Cballerina.http.traceLogConsole=true\n\n# For the first request that the caching proxy receives, it sends a request to the hello service.\n[2021-11-26 09:52:32,797] TRACE {http.tracelog.downstream} - [id: 0x318ba81d, correlatedSource: n\/a, host:\/127.0.0.1:8080 - remote:\/127.0.0.1:50903] INBOUND: DefaultHttpRequest(decodeResult: success, version: HTTP\/1.1)\nGET \/hello HTTP\/1.1\nAccept: *\/*\nhost: localhost:8080\nuser-agent: ballerina\nconnection: keep-alive\n\n# The service responds with a `200 OK` with the relevant caching headers set.\n[2021-11-26 09:52:32,890] TRACE {http.tracelog.downstream} - [id: 0x318ba81d, correlatedSource: n\/a, host:localhost\/127.0.0.1:8080 - remote:\/127.0.0.1:50903] OUTBOUND: DefaultFullHttpResponse(decodeResult: success, version: HTTP\/1.1, content: CompositeByteBuf(ridx: 0, widx: 27, cap: 27, components=1))\nHTTP\/1.1 200 OK\netag: 620328e8\nlast-modified: Fri, 26 Nov 2021 04:22:32 GMT\ncontent-type: application\/json\ncache-control: must-revalidate,public,max-age=15\ncontent-length: 27\nserver: ballerina\ndate: Fri, 26 Nov 2021 09:52:32 +0530, 27B\n{\"message\":\"Hello, World!\"}\n\n# The backend service only gets another request when the cached response and the proxy have expired and it wants to validate it again.\n[2021-11-26 09:52:54,669] TRACE {http.tracelog.downstream} - [id: 0x318ba81d, correlatedSource: n\/a, host:localhost\/127.0.0.1:8080 - remote:\/127.0.0.1:50903] INBOUND: DefaultHttpRequest(decodeResult: success, version: HTTP\/1.1)\nGET \/hello HTTP\/1.1\nAccept: *\/*\nif-none-match: 620328e8\nif-modified-since: Fri, 26 Nov 2021 04:22:32 GMT\nuser-agent: curl\/7.64.1\nhost: localhost:8080\nconnection: keep-alive\ncontent-length: 0\n\n# After checking the `if-none-match` header, the service determines that the response is still the same and that the proxy can keep reusing it.\n[2021-11-26 09:52:54,672] TRACE {http.tracelog.downstream} - [id: 0x318ba81d, correlatedSource: n\/a, host:localhost\/127.0.0.1:8080 - remote:\/127.0.0.1:50903] OUTBOUND: DefaultFullHttpResponse(decodeResult: success, version: HTTP\/1.1, content: CompositeByteBuf(ridx: 0, widx: 0, cap: 0, components=1))\nHTTP\/1.1 304 Not Modified\netag: 620328e8\nlast-modified: Fri, 26 Nov 2021 04:22:54 GMT\ncache-control: must-revalidate,public,max-age=15\ncontent-length: 0\nserver: ballerina\ndate: Fri, 26 Nov 2021 09:52:54 +0530, 0B"}], "description":"\/\/ HTTP caching is enabled by default in HTTP client endpoints.\n\/\/ Users can configure caching using the `cache` field in the client configurations.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how the HTTP caching is configured and performed in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, caching"}, {"bbeName":"http-circuit-breaker", "resources":[{"tag":"breaker", "balFileName":"http_circuit_breaker.bal", "bal":"import ballerina\/http;\n\n\/\/ The circuit breaker looks for errors across a rolling time window.\n\/\/ After the circuit is broken, it does not send requests to\n\/\/ the backend until the `resetTime`.\nhttp:Client cbrBackend = check new (\"http:\/\/localhost:8080\", {\n            \/\/ Configuration options that control the behavior of the circuit\n            \/\/ breaker.\n            circuitBreaker: {\n                \/\/ Failure calculation window. This is how long the circuit\n                \/\/ breaker keeps the statistics for the operations.\n                rollingWindow: {\n\n                    \/\/ Time period in seconds for which the failure\n                    \/\/ threshold is calculated.\n                    timeWindow: 10,\n\n                    \/\/ The granularity (in seconds) at which the time\n                    \/\/ window slides. The `RollingWindow` is divided into\n                    \/\/ buckets and slides by these increments.\n                    bucketSize: 2,\n\n                    \/\/ Minimum number of requests in the `RollingWindow` that\n                    \/\/ will trip the circuit.\n                    requestVolumeThreshold: 0\n\n                },\n                \/\/ The threshold for request failures.\n                \/\/ When this threshold exceeds, the circuit trips. This is the\n                \/\/ ratio between failures and total requests. The ratio is\n                \/\/ calculated using the requests received within the given\n                \/\/ rolling window.\n                failureThreshold: 0.2,\n\n                \/\/ The time period (in seconds) to wait before attempting to\n                \/\/ make another request to the upstream service.\n                resetTime: 10,\n\n                \/\/ HTTP response status codes that are considered as failures\n                statusCodes: [400, 404, 500]\n\n            },\n            timeout: 2\n        }\n    );\n\nservice \/ on new http:Listener(9090) {\n    resource function get cb() returns string|error {\n        string payload = check cbrBackend->get(\"\/hello\");\n        return payload;\n    }\n}\n\n\/\/ This sample service is used to mock connection timeouts and service outages.\n\/\/ This should run separately from the above service.\nservice \/ on new http:Listener(8080) {\n    private int counter = 1;\n    resource function get hello() returns string|http:InternalServerError {\n        if (self.counter % 5 == 3) {\n            self.counter += 1;\n            return {body:\"Error occurred while processing the request.\"};\n        } else {\n            self.counter += 1;\n            return \"Hello World!!!\";\n        }\n    }\n}", "outputFileName":"http_circuit_breaker.server.out", "output":"bal run http_circuit_breaker.bal\n"}], "description":"\/\/ The Circuit Breaker is used to gracefully handle network related errors, which occur when using the HTTP Client. Behavior of this example is something similar to as follows,\n\/\/ 1) First two requests works, 2) Third request fails and the circuit breaker trips, 3) As a result subsequent requests fails immediately until the timeout period is reached,\n\/\/ 4) Timeout is reached and the circuit breaker falls back to closed state. <br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to use an HTTP circuit breaker in Ballerina. This will allow to handle requests when a backend is failing.\nkeywords: ballerina, ballerina by examples, bbe, http, resiliency, circuit breaker, circuit break"}, {"bbeName":"http-client-basic-auth", "resources":[{"tag":"auth", "balFileName":"http_client_basic_auth.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\n\n\/\/ Defines the HTTP client to call the Basic auth secured APIs.\n\/\/ The client is enriched with the `Authorization: Basic <token>` header by\n\/\/ passing the [`http:CredentialsConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/CredentialsConfig) for the `auth` configuration of the\n\/\/ client.\nhttp:Client securedEP = check new(\"https:\/\/localhost:9090\",\n    auth = {\n        username: \"ldclakmal\",\n        password: \"ldclakmal@123\"\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string response = check securedEP->get(\"\/foo\/bar\");\n    io:println(response);\n}", "outputFileName":"http_client_basic_auth.out", "output":"# As a prerequisite, start a sample service secured with Basic Auth.\n# You may need to change the trusted certificate file path.\nbal run http_client_basic_auth.bal\nHello, World!"}], "description":"\/\/ A client, which is secured with Basic auth can be used to connect to\n\/\/ a secured service.<br\/>\n\/\/ The client is enriched with the `Authorization: Basic <token>` header by\n\/\/ passing the `http:CredentialsConfig` for the `auth` configuration of the\n\/\/ client.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Auth module](https:\/\/docs.central.ballerina.io\/ballerina\/auth\/latest\/).", "metatags":"description: BBE on how to secure HTTP client with Basic auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, auth, basic auth"}, {"bbeName":"http-client-bearer-token-auth", "resources":[{"tag":"auth", "balFileName":"http_client_bearer_token_auth.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\n\n\/\/ Defines the HTTP client to call the secured APIs.\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the [`http:BearerTokenConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/BearerTokenConfig) for the `auth` configuration of the\n\/\/ client.\nhttp:Client securedEP = check new(\"https:\/\/localhost:9090\",\n    auth = {\n        token: \"56ede317-4511-44b4-8579-a08f094ee8c5\"\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string response = check securedEP->get(\"\/foo\/bar\");\n    io:println(response);\n}", "outputFileName":"http_client_bearer_token_auth.out", "output":"# As a prerequisite, start a secured sample service.\n# You may need to change the trusted certificate file path.\nbal run http_client_bearer_token_auth.bal\nHello, World!"}], "description":"\/\/ A client, which is secured with Bearer token auth can be used to connect to\n\/\/ a secured service.<br\/>\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the `http:BearerTokenConfig` for the `auth` configuration of the\n\/\/ client.", "metatags":"description: BBE on how to secure HTTP client with Bearer token auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, auth, jwt auth"}, {"bbeName":"http-client-data-binding", "resources":[{"tag":"binding", "balFileName":"http_client_data_binding.bal", "bal":"import ballerina\/http;\nimport ballerina\/log;\n\ntype Person record {|\n    string name;\n    int age;\n|};\n\nhttp:Client backendClient = check new(\"http:\/\/localhost:9092\");\n\nservice \/call on new http:Listener(9090) {\n\n    resource function get all() returns json|error {\n        \/\/ Binding the payload to a string type. The `targetType` is inferred from the LHS variable type.\n        string result = check backendClient->get(\"\/backend\/string\");\n        log:printInfo(\"String payload: \" + result);\n\n        \/\/ A `record` and `record[]` are also possible types for data binding.\n        Person person = check backendClient->get(\"\/backend\/person\");\n        log:printInfo(\"Person name: \" + person.name);\n        return person;\n    }\n\n    \/\/ When the data binding is expected to happen and if the `post` remote function gets a 5XX response from the\n    \/\/ backend, the response will be returned as an [http:RemoteServerError](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/errors#RemoteServerError)\n    \/\/ including the error payload, headers, and status code.\n    resource function get '5xx() returns json {\n        json|error res = backendClient->post(\"\/backend\/5XX\", \"want 500\");\n        if (res is http:RemoteServerError) {\n            http:Detail detail = res.detail();\n            return { code:detail.statusCode, payload:<string>detail.body};\n        } else {\n            return { code: \"invalid\" };\n        }\n    }\n\n    \/\/ When the data binding is expected to happen and if the client remote function gets a 4XX response from the\n    \/\/ backend, the response will be returned as an [http:ClientRequestError](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/errors#ClientRequestError)\n    \/\/ including the error payload, headers, and status code.\n    resource function get '4xx() returns json {\n        json|error res = backendClient->post(\"\/backend\/err\", \"want 400\");\n        if (res is http:ClientRequestError) {\n            http:Detail detail = res.detail();\n            return { code:detail.statusCode, payload:<string>detail.body};\n        } else {\n            return { code: \"invalid\" };\n        }\n    }\n}\n\nservice \/backend on new http:Listener(9092) {\n\n    resource function get 'string() returns string {\n        return \"Hello ballerina!!!!\";\n    }\n\n    resource function get person() returns record {|*http:Ok; Person body;|} {\n        return {body: {name: \"Smith\", age: 15}};\n    }\n\n    resource function post '5XX() returns http:NotImplemented {\n        return {body:\"data-binding-failed-with-501\"};\n    }\n}", "outputFileName":"http_client_data_binding.server.out", "output":"bal run http_client_data_binding.bal\ntime = 2021-01-21 19:29:10,007 level = INFO  module = \"\" message = \"String payload: Hello ballerina!!!!\"\ntime = 2021-01-21 19:29:10,092 level = INFO  module = \"\" message = \"Person name: Smith\""}], "description":"\/\/ Through client data binding, the response payload can be accessed directly. The payload type is inferred from the\n\/\/ contextually-expected type or from the `targetType` argument. A possible payload type out of `string`|`xml`|`json`|\n\/\/ `map<json>`|`byte[]`|`record`|`record[]` and `http:Response` is expected as return value type.\n\/\/ When the user expects client data binding to happen, the HTTP error responses (4XX, 5XX) will be categorized\n\/\/ as an `error` (`http:ClientRequestError`, `http:RemoteServerError`) of the client remote operation.\n\/\/ For more information on the underlying module,\n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE demonstrates the data-binding capability of an HTTP client.\nkeywords: ballerina, ballerina by example, bbe, http, client, data binding"}, {"bbeName":"http-client-endpoint", "resources":[{"tag":"endpoint", "balFileName":"http_client_endpoint.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\n\npublic function main() returns error? {\n    \/\/ Creates a new client with the backend URL.\n    final http:Client clientEndpoint = \n                        check new (\"http:\/\/postman-echo.com\");\n    \n    \/\/ Sends a `GET` request to the specified endpoint.\n    io:println(\"GET request:\");\n    json resp = check clientEndpoint->get(\"\/get?test=123\");\n    io:println(resp.toJsonString());\n\n    \/\/ The `get()`, `head()`, and `options()` have the optional headers parameter to send out headers,\n    io:println(\"\\nGET request with Headers:\");\n    resp = check clientEndpoint->get(\"\/get\",\n            {\"Sample-Name\": \"http-client-connector\"});\n    io:println(resp.toJsonString());\n\n    \/\/ Sends a `POST` request to the specified endpoint.\n    io:println(\"\\nPOST request:\");\n    resp = check clientEndpoint->post(\"\/post\", \"POST: Hello World\");\n    io:println(resp.toJsonString());\n\n    \/\/ Uses the `execute()` remote function for custom HTTP verbs.\n    io:println(\"\\nUse custom HTTP verbs:\");\n    http:Response response = check clientEndpoint->execute(\n                        \"COPY\", \"\/get\", \"CUSTOM: Hello World\");\n\n    io:println(\"Status code: \" + response.statusCode.toString());\n}", "outputFileName":"http_client_endpoint.out", "output":"bal run http_client_endpoint.bal\nGET request:\n{\"args\":{\"test\":\"123\"}, \"headers\":{\"x-forwarded-proto\":\"http\", \"x-forwarded-port\":\"80\", \"host\":\"postman-echo.com\", \"x-amzn-trace-id\":\"Root=1-60b723e3-2cec8477340e121571a5df88\", \"user-agent\":\"ballerina\"}, \"url\":\"http:\/\/postman-echo.com\/get?test=123\"}\n\nGET request with Headers:\n{\"args\":{}, \"headers\":{\"x-forwarded-proto\":\"http\", \"x-forwarded-port\":\"80\", \"host\":\"postman-echo.com\", \"x-amzn-trace-id\":\"Root=1-60b723e6-124af9746490533b1a560cca\", \"sample-name\":\"http-client-connector\", \"user-agent\":\"ballerina\"}, \"url\":\"http:\/\/postman-echo.com\/get\"}\n\nPOST request:\n{\"args\":{}, \"data\":\"POST: Hello World\", \"files\":{}, \"form\":{}, \"headers\":{\"x-forwarded-proto\":\"http\", \"x-forwarded-port\":\"80\", \"host\":\"postman-echo.com\", \"x-amzn-trace-id\":\"Root=1-60b723e6-60ad459c47889ca53a89df90\", \"content-length\":\"17\", \"content-type\":\"text\/plain\", \"user-agent\":\"ballerina\"}, \"json\":null, \"url\":\"http:\/\/postman-echo.com\/post\"}\n\nUse custom HTTP verbs:\nStatus code: 404"}], "description":"\/\/ The HTTP Client Connector can be used to connect to and interact with an HTTP server.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to interact with an HTTP server using Ballerina HTTP Client Connector.\nkeywords: ballerina, ballerina by examples, bbe, http, client"}, {"bbeName":"http-client-mutual-ssl", "resources":[{"tag":"ssl", "balFileName":"http_client_mutual_ssl.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\n\n\/\/ An HTTP client can be configured to initiate new connections that are\n\/\/ secured via mutual SSL.\n\/\/ The [`http:ClientSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/ClientSecureSocket) record provides the SSL-related configurations.\nhttp:Client securedEP = check new(\"https:\/\/localhost:9090\",\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        },\n        cert: \"..\/resource\/path\/to\/public.crt\",\n        protocol: {\n            name: http:TLS\n        },\n        ciphers: [\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\"]\n\n    }\n);\n\npublic function main() returns error? {\n    string response = check securedEP->get(\"\/foo\/bar\");\n    io:println(response);\n}", "outputFileName":"http_client_mutual_ssl.out", "output":"# As a prerequisite, start a sample service secured with mutual SSL.\n# You may need to change the certificate file path, private key file path, and\n# trusted certificate file path.\nbal run http_client_mutual_ssl.bal\nHello, World!"}], "description":"\/\/ Ballerina supports mutual SSL, which is a certificate-based authentication\n\/\/ process in which two parties (the client and server) authenticate each other by\n\/\/ verifying the digital certificates. It ensures that both parties are assured\n\/\/ of each other's identity.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to secure HTTP client with mutual SSL.\nkeywords: ballerina, ballerina by example, bbe, http, mutual ssl, ssl protocols, ciphers"}, {"bbeName":"http-client-oauth2-client-credentials-grant-type", "resources":[{"tag":"type", "balFileName":"http_client_oauth2_client_credentials_grant_type.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\n\n\/\/ Defines the HTTP client to call the OAuth2 secured APIs.\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the [`http:OAuth2ClientCredentialsGrantConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/OAuth2ClientCredentialsGrantConfig) for the `auth` configuration\n\/\/ of the client.\nhttp:Client securedEP = check new(\"https:\/\/localhost:9090\",\n    auth = {\n        tokenUrl: \"https:\/\/localhost:9445\/oauth2\/token\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: [\"admin\"],\n        clientConfig: {\n            secureSocket: {\n                cert: \"..\/resource\/path\/to\/public.crt\"\n            }\n        }\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string response = check securedEP->get(\"\/foo\/bar\");\n    io:println(response);\n}", "outputFileName":"http_client_oauth2_client_credentials_grant_type.out", "output":"# As a prerequisite, start a sample service secured with OAuth2.\n# You may need to change the trusted certificate file path.\nbal run http_client_oauth2_client_credentials_grant_type.bal\nHello, World!"}], "description":"\/\/ A client, which is secured with OAuth2 client credentials grant type\n\/\/ can be used to connect to a secured service.<br\/>\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the `http:OAuth2ClientCredentialsGrantConfig` for the `auth`\n\/\/ configuration of the client.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure HTTP client with OAuth2 client credentials grant type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, auth, oauth2, client credentials grant type"}, {"bbeName":"http-client-oauth2-jwt-bearer-grant-type", "resources":[{"tag":"type", "balFileName":"http_client_oauth2_jwt_bearer_grant_type.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\n\n\/\/ Defines the HTTP client to call the OAuth2 secured APIs.\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the [`http:OAuth2JwtBearerGrantConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/OAuth2JwtBearerGrantConfig) for the `auth` configuration of the\n\/\/ client.\nhttp:Client securedEP = check new(\"https:\/\/localhost:9090\",\n    auth = {\n        tokenUrl: \"https:\/\/localhost:9445\/oauth2\/token\",\n        assertion: \"eyJhbGciOiJFUzI1NiIsImtpZCI6Ij[...omitted for brevity...]\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: [\"admin\"],\n        clientConfig: {\n            secureSocket: {\n                cert: \"..\/resource\/path\/to\/public.crt\"\n            }\n        }\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string response = check securedEP->get(\"\/foo\/bar\");\n    io:println(response);\n}", "outputFileName":"http_client_oauth2_jwt_bearer_grant_type.out", "output":"# As a prerequisite, start a sample service secured with OAuth2.\n# You may need to change the trusted certificate file path.\nbal run http_client_oauth2_jwt_bearer_grant_type.bal\nHello, World!"}], "description":"\/\/ A client, which is secured with an OAuth2 JWT bearer grant type can be\n\/\/ used to connect to a secured service.<br\/>\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the `http:OAuth2JwtBearerGrantConfig` to the `auth`\n\/\/ configuration of the client.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure HTTP client with OAuth2 JWT bearer grant type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, auth, oauth2, jwt bearer grant type"}, {"bbeName":"http-client-oauth2-password-grant-type", "resources":[{"tag":"type", "balFileName":"http_client_oauth2_password_grant_type.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\n\n\/\/ Defines the HTTP client to call the OAuth2 secured APIs.\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the [`http:OAuth2PasswordGrantConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/OAuth2PasswordGrantConfig) to the `auth` configuration of the\n\/\/ client.\nhttp:Client securedEP = check new(\"https:\/\/localhost:9090\",\n    auth = {\n        tokenUrl: \"https:\/\/localhost:9445\/oauth2\/token\",\n        username: \"admin\",\n        password: \"admin\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: [\"admin\"],\n        refreshConfig: {\n            refreshUrl: \"https:\/\/localhost:9445\/oauth2\/token\",\n            scopes: [\"hello\"],\n            clientConfig: {\n                secureSocket: {\n                    cert: \"..\/resource\/path\/to\/public.crt\"\n                }\n            }\n        },\n        clientConfig: {\n            secureSocket: {\n                cert: \"..\/resource\/path\/to\/public.crt\"\n            }\n        }\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string response = check securedEP->get(\"\/foo\/bar\");\n    io:println(response);\n}", "outputFileName":"http_client_oauth2_password_grant_type.out", "output":"# As a prerequisite, start a sample service secured with OAuth2.\n# You may need to change the trusted certificate file path.\nbal run http_client_oauth2_password_grant_type.bal\nHello, World!"}], "description":"\/\/ A client, which is secured with OAuth2 password grant type can be used to\n\/\/ connect to a secured service.<br\/>\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the `http:OAuth2PasswordGrantConfig` to the `auth` configuration of\n\/\/ the client.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure HTTP client with OAuth2 password grant type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, auth, oauth2, password grant type"}, {"bbeName":"http-client-oauth2-refresh-token-grant-type", "resources":[{"tag":"type", "balFileName":"http_client_oauth2_refresh_token_grant_type.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\n\n\/\/ Defines the HTTP client to call the OAuth2 secured APIs.\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the [`http:OAuth2RefreshTokenGrantConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/OAuth2RefreshTokenGrantConfig) for the `auth` configuration of the\n\/\/ client.\nhttp:Client securedEP = check new(\"https:\/\/localhost:9090\",\n    auth = {\n        refreshUrl: \"https:\/\/localhost:9445\/oauth2\/token\",\n        refreshToken: \"24f19603-8565-4b5f-a036-88a945e1f272\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: [\"admin\"],\n        clientConfig: {\n            secureSocket: {\n                cert: \"..\/resource\/path\/to\/public.crt\"\n            }\n        }\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string response = check securedEP->get(\"\/foo\/bar\");\n    io:println(response);\n}", "outputFileName":"http_client_oauth2_refresh_token_grant_type.out", "output":"# As a prerequisite, start a sample service secured with OAuth2.\n# You may need to change the trusted certificate file path.\nbal run http_client_oauth2_refresh_token_grant_type.bal\nHello, World!"}], "description":"\/\/ A client, which is secured with an OAuth2 refresh token grant type can be\n\/\/ used to connect to a secured service.<br\/>\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the `http:OAuth2RefreshTokenGrantConfig` to the `auth`\n\/\/ configuration of the client.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure HTTP client with OAuth2 refresh token grant type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, auth, oauth2, refresh token grant type"}, {"bbeName":"http-client-self-signed-jwt-auth", "resources":[{"tag":"auth", "balFileName":"http_client_self_signed_jwt_auth.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\n\n\/\/ Defines the HTTP client to call the JWT auth secured APIs.\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the [`http:JwtIssuerConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/JwtIssuerConfig) for the `auth` configuration of the\n\/\/ client. A self-signed JWT is issued before the request is sent.\nhttp:Client securedEP = check new(\"https:\/\/localhost:9090\",\n    auth = {\n        username: \"ballerina\",\n        issuer: \"wso2\",\n        audience: [\"ballerina\", \"ballerina.org\", \"ballerina.io\"],\n        keyId: \"5a0b754-895f-4279-8843-b745e11a57e9\",\n        jwtId: \"JlbmMiOiJBMTI4Q0JDLUhTMjU2In\",\n        customClaims: { \"scp\": \"admin\" },\n        expTime: 3600,\n        signatureConfig: {\n            config: {\n                keyFile: \"..\/resource\/path\/to\/private.key\"\n            }\n        }\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string response = check securedEP->get(\"\/foo\/bar\");\n    io:println(response);\n}", "outputFileName":"http_client_self_signed_jwt_auth.out", "output":"# As a prerequisite, start a sample service secured with OAuth2.\n# You may need to change the trusted certificate file path and private key file path.\nbal run http_client_self_signed_jwt_auth.bal\nHello, World!"}], "description":"\/\/ A client, which is secured with self-signed JWT can be used to connect to\n\/\/ a secured service.<br\/>\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the `http:JwtIssuerConfig` to the `auth` configuration of the\n\/\/ client. A self-signed JWT is issued before the request is sent.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure HTTP client with self-signed JWT auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, auth, jwt auth"}, {"bbeName":"http-client-ssl-tls", "resources":[{"tag":"tls", "balFileName":"http_client_ssl_tls.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\n\n\/\/ An HTTP client can be configured to communicate through HTTPS as well.\n\/\/ To secure a client using HTTPS, the client needs to be configured with\n\/\/ a certificate file of the listener.\n\/\/ The [`http:ClientSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/ClientSecureSocket) record\n\/\/ provides the SSL-related configurations of the client.\nhttp:Client securedEP = check new(\"https:\/\/localhost:9090\",\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    string response = check securedEP->get(\"\/foo\/bar\");\n    io:println(response);\n}", "outputFileName":"http_client_ssl_tls.out", "output":"# As a prerequisite, start a sample service secured with SSL.\n# You may need to change the trusted certificate file path.\nbal run http_client_ssl_tls.bal\nHello, World!"}], "description":"\/\/ You can use the HTTPS client to connect or interact with an HTTPS listener.\n\/\/ Provide the `http:ClientSecureSocket` configurations to the client to\n\/\/ initiate an HTTPS connection.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to secure HTTP client with SSL.\nkeywords: ballerina, ballerina by example, bbe, http, ssl, tls"}, {"bbeName":"http-compression", "resources":[{"tag":"compression", "balFileName":"http_compression.bal", "bal":"import ballerina\/http;\n\n\/\/ [COMPRESSION_ALWAYS](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/constants#COMPRESSION_ALWAYS)\n\/\/ guarantees a compressed response entity body. Compression scheme is set to the\n\/\/ value indicated in Accept-Encoding request header. When a particular header is not present or the header\n\/\/ value is \"identity\", encoding is done using the \"gzip\" scheme.\n\/\/ By default, Ballerina compresses any MIME type unless they are mentioned under `contentTypes`.\n\/\/ Compression can be constrained to certain MIME types by specifying them as an array of MIME types.\n\/\/ In this example encoding is applied to \"text\/plain\" responses only.\n@http:ServiceConfig {\n    compression: {\n        enable: http:COMPRESSION_ALWAYS,\n        contentTypes: [\"text\/plain\"]\n    }\n}\nservice \/ on new http:Listener(9090) {\n\n    \/\/ The response entity body is always compressed since MIME type has matched.\n    resource function 'default alwaysCompress() returns string {\n        return \"Type : This is a string\";\n    }\n}", "outputFileName":"http_compression.server.out", "output":"bal run http_compression.bal\nballerina: started HTTP\/WS listener 0.0.0.0:9092\nballerina: started HTTP\/WS listener 0.0.0.0:9090"}], "description":"\/\/ This sample demonstrates how the Ballerina HTTP service is configured to change the compression behaviour. By default, the server\n\/\/ compresses the response entity body with the scheme(gzip, deflate) that is specified in the Accept-Encoding request header. When\n\/\/ the particular header is not present or the header value is \"identity\", the server does not perform any compression. Compression\n\/\/ is disabled when the option is set to `COMPRESSION_NEVER` and always enabled when the option is set to `COMPRESSION_ALWAYS`<br\/><br\/>\n\/\/ In the same way `http:Client` can be configured as well. For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE demonstrates how the Ballerina HTTP service is configured to change the compression behavior.\nkeywords: ballerina, ballerina by example, bbe, http, compression, accept-encoding"}, {"bbeName":"http-cookies", "resources":[{"tag":"server", "balFileName":"cookie_server.bal", "bal":"import ballerina\/http;\n\nlistener http:Listener serverEP = new (9095);\n\nservice \/cookieDemo on serverEP {\n\n    resource function post login(http:Request req)\n            returns http:Response|http:BadRequest {\n        \/\/ Retrieve the JSON payload from the request as it\n        \/\/ contains the login details of a user.\n        json|error details = req.getJsonPayload();\n\n        if (details is json) {\n            \/\/ Retrieve the username and password.\n            json|error name = details.name;\n            json|error password = details.password;\n\n            if (name is json && password is json) {\n                \/\/ Check the password value.\n                if (password == \"p@ssw0rd\") {\n\n                    \/\/ [Create a new cookie](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/classes\/Cookie)\n                    \/\/ by setting `name` as the `username` and `value` as the logged-in user's name. Set the cookies\n                    \/\/ path as `\/` to apply it to all the resources in the service.\n                    http:Cookie cookie = new(\"username\", name.toString(),\n                                                path = \"\/\");\n\n                    http:Response response = new;\n\n                    \/\/ [Add the created cookie to the response](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/classes\/Response#addCookie).\n                    response.addCookie(cookie);\n\n                    \/\/ Set a message payload to inform that the login has\n                    \/\/ been succeeded.\n                    response.setTextPayload(\"Login succeeded\");\n                    return response;\n                }\n            }\n        }\n        return {body: \"Invalid request payload\"};\n    }\n\n    resource function get welcome(http:Request req) returns string {\n        \/\/ [Retrieve cookies from the request](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/classes\/Request#getCookies).\n        http:Cookie[] cookies = req.getCookies();\n\n        \/\/ Get the cookie value of the `username`.\n        http:Cookie[] usernameCookie = cookies.filter(function\n                                (http:Cookie cookie) returns boolean {\n            return cookie.name == \"username\";\n        });\n\n        if (usernameCookie.length() > 0) {\n            string? user = usernameCookie[0].value;\n            if (user is string) {\n                \/\/ Respond with the username added to the welcome message.\n                return \"Welcome back \" + user;\n\n            } else {\n                \/\/ If the user is `nil`, send a login message.\n                return \"Please login\";\n            }\n        } else {\n            \/\/ If the `username` cookie is not presented, send a login message.\n            return \"Please login\";\n        }\n    }\n}", "outputFileName":"cookie_server.out", "output":"bal run cookie_server.bal"}, {"tag":"client", "balFileName":"http_client.bal", "bal":"import ballerina\/http;\nimport ballerina\/log;\n\n\/\/ HTTP client configurations associated with [enabling cookies](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/CookieConfig).\nhttp:ClientConfiguration clientEPConfig = {\n    cookieConfig: {\n        enabled: true\n    }\n};\n\npublic function main() returns error? {\n    \/\/ Create a new HTTP client by giving the URL and the client configuration.\n    http:Client httpClient = check new(\"http:\/\/localhost:9095\/cookieDemo\",\n                                  clientEPConfig);\n\n    \/\/ Initialize an HTTP request.\n    http:Request request = new;\n\n    \/\/ Send a username and a password as a JSON payload to the backend.\n    json jsonPart = {\n        name: \"John\",\n        password: \"p@ssw0rd\"\n    };\n    request.setJsonPayload(jsonPart);\n\n    \/\/ Send an outbound request to the `login` backend resource.\n    http:Response|error loginResp = httpClient->post(\"\/login\", request);\n\n    if (loginResp is error) {\n        log:printError(\"Login failed\", 'error = loginResp);\n    } else {\n        \/\/ When the login is successful, make another request to the\n        \/\/ `\/welcome` resource of the backend service.\n        \/\/ As cookies are enabled in the HTTP client, it automatically handles cookies\n        \/\/ received with the login response and sends the relevant cookies\n        \/\/ to the `welcome` service resource.\n        string welcomeResp = check httpClient->get(\"\/welcome\");\n\n        \/\/ A welcome message with the sent username will get printed.\n        log:printInfo(welcomeResp);\n    }\n}", "outputFileName":"http_client.out", "output":"bal run http_client.bal\ntime = 2020-12-15 16:14:08,691 level = INFO  module = \"\" message = \"Welcome back John\""}], "description":"\/\/ This example demonstrates how to handle HTTP cookies in a Ballerina service and client.\n\/\/ For more information on the underlying module,\n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to handle HTTP cookies in a Ballerina service and a client.\nkeywords: ballerina, ballerina by example, bbe, http, cookies"}, {"bbeName":"http-cors", "resources":[{"tag":"cors", "balFileName":"http_cors.bal", "bal":"import ballerina\/http;\n\n\/\/ Service-level [CORS config](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/CorsConfig) applies\n\/\/ globally to each `resource`.\n@http:ServiceConfig {\n    cors: {\n        allowOrigins: [\"http:\/\/www.m3.com\", \"http:\/\/www.hello.com\"],\n        allowCredentials: false,\n        allowHeaders: [\"CORELATION_ID\"],\n        exposeHeaders: [\"X-CUSTOM-HEADER\"],\n        maxAge: 84900\n    }\n}\nservice \/crossOriginService on new http:Listener(9092) {\n\n    \/\/ Resource-level [CORS config](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/CorsConfig)\n    \/\/ overrides the service-level CORS headers.\n    @http:ResourceConfig {\n        cors: {\n            allowOrigins: [\"http:\/\/www.bbc.com\"],\n            allowCredentials: true,\n            allowHeaders: [\"X-Content-Type-Options\", \"X-PINGOTHER\"]\n        }\n    }\n    resource function get company() returns json {\n        return {\"type\": \"middleware\"};\n    }\n\n    \/\/ Since there are no resource-level CORS configs defined here, the global\n    \/\/ service-level CORS configs will be applied to this resource.\n    resource function post lang() returns json {\n        return {\"lang\": \"Ballerina\"};\n    }\n}", "outputFileName":"http_cors.server.out", "output":"bal run http_cors.bal"}], "description":"\/\/ This sample demonstrates the Ballerina server connector CORS configuration.\n\/\/ CORS headers can be applied in both the service-level and the resource-level. Service-level CORS headers apply to all the resources\n\/\/ unless there are headers configured at the resource-level. Ballerina CORS supports both simple and pre-flight requests.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE demonstrates the HTTP service-level and the resource-level CORS configuration.\nkeywords: ballerina, ballerina by example, bbe, http, cors"}, {"bbeName":"http-data-binding", "resources":[{"tag":"binding", "balFileName":"http_data_binding.bal", "bal":"import ballerina\/http;\n\ntype Student record {\n    string Name;\n    int Grade;\n};\n\nservice \/hello on new http:Listener(9090) {\n\n    \/\/ The `Student` parameter in [Payload annotation](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/Payload)\n    \/\/ represents the entity body of the inbound request.\n    @http:ResourceConfig {\n        consumes: [\"application\/json\"]\n    }\n    resource function post bindStudent(@http:Payload Student student)\n            returns json {\n        string name = student.Name;\n        return {Name: name};\n    }\n\n    \/\/Binds the XML payload of the inbound request to the `store` variable.\n    @http:ResourceConfig {\n        consumes: [\"application\/xml\"]\n    }\n    resource function post bindXML(@http:Payload xml store) returns xml {\n        xml city = store.selectDescendants(\"{http:\/\/www.test.com}city\");\n        return city;\n    }\n}", "outputFileName":"http_data_binding.server.out", "output":"bal run http_data_binding.bal"}], "description":"\/\/ HTTP service data binding helps to access the request payload through a resource signature parameter. The payload\n\/\/ parameter should be declared with the `@Payload` annotation. `string`, `json`, `xml`, `byte[]`, record, and record[]\n\/\/ are supported as parameter types. Binding failures will be responded with 400[Bad Request] response<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how data binding helps to access the payload through the resource signature parameter.\nkeywords: ballerina, ballerina by example, bbe, http, data binding"}, {"bbeName":"http-default-resource", "resources":[{"tag":"resource", "balFileName":"http_default_resource.bal", "bal":"import ballerina\/http;\n\n\/\/ The `absolute resource path` can be omitted. Then, it defaults to `\/`.\nservice on new http:Listener(9090) {\n\n    \/\/ The `default` accessor name can be used to match with all methods including standard HTTP methods\n    \/\/ and custom methods. The rest param is used to represent the wildcard of the `resource path` in which any path\n    \/\/ segment will get dispatched to the resource in the absence of an exact path match.\n    resource function 'default [string... paths](http:Request req)\n            returns json {\n        return {method: req.method, path: paths};\n    }\n}", "outputFileName":"http_default_resource.server.out", "output":"bal run http_default_resource.bal"}], "description":"\/\/ Ballerina provides rest params in the resource path and the default resource method to help designing proxy services\n\/\/ and default resources. It can be used to handle unmatched requests.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to use the `rest-param`, `default` accessor(HTTP verb) in Ballerina to dispatch and constrain the service in a RESTful manner.\nkeywords: ballerina, ballerina by example, bbe, http service, path, verb"}, {"bbeName":"http-disable-chunking", "resources":[{"tag":"chunking", "balFileName":"http_disable_chunking.bal", "bal":"import ballerina\/http;\n\n\/\/ The HTTP client's chunking behavior can be configured as [CHUNKING_AUTO](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/constants#CHUNKING_AUTO),\n\/\/ [CHUNKING_ALWAYS](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/constants#CHUNKING_ALWAYS),\n\/\/ or [CHUNKING_NEVER](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/constants#CHUNKING_NEVER).\n\/\/ In this example, it is set to `CHUNKING_NEVER`, which means that chunking never happens irrespective of the request size. \n\/\/ When chunking is set to `CHUNKING_AUTO`, chunking is done based on the request.\n\/\/ [http1Settings](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/ClientHttp1Settings) annotation\n\/\/ provides the chunking-related configurations.\nfinal http:Client clientEndpoint = check new (\"http:\/\/localhost:9090\",\n                        {http1Settings: {chunking: http:CHUNKING_NEVER}});\n\nservice \/ on new http:Listener(9092) {\n    resource function get chunkingSample() returns json|error {\n        \/\/Invoke endpoint along with a JSON payload.\n        json clientResponse =\n            check clientEndpoint->post(\"\/echo\", {\"name\": \"Ballerina\"});\n        return clientResponse;\n    }\n}\n\n\/\/ A sample backend, which responds according to the chunking behavior.\nservice \/ on new http:Listener(9090) {\n    resource function post echo(@http:Header{name:\"Content-length\"} string cLen)\n             returns json {\n        \/\/Set the response with the content length.\n        string value = \"Length-\" + cLen;\n        return {\"Outbound request content\": value};\n    }\n}", "outputFileName":"http_disable_chunking.server.out", "output":"bal run http_disable_chunking.bal"}], "description":"\/\/This sample demonstrates how to configure the chunking behavior of an `http:Client`. By default, the HTTP client sends messages with the `content-length` header.\n\/\/If the message size is larger than the buffer size (8K), messages are chunked. Chunking can be disabled using the client options.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to configure the chunking behavior of the HTTP client in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, chunked, transfer-encoding"}, {"bbeName":"http-failover", "resources":[{"tag":"failover", "balFileName":"http_failover.bal", "bal":"import ballerina\/http;\nimport ballerina\/lang.runtime;\n\n\/\/ Define the failover client endpoint to call the backend services.\nhttp:FailoverClient foBackendEP = check new ({\n\n    timeout: 5,\n    failoverCodes: [501, 502, 503],\n    interval: 5,\n    \/\/ Define a set of HTTP Clients that are targeted for failover.\n    targets: [\n            {url: \"http:\/\/nonexistentEP\/mock1\"},\n            {url: \"http:\/\/localhost:8080\/echo\"},\n            {url: \"http:\/\/localhost:8080\/mock\"}\n        ]\n});\n\nservice \/ on new http:Listener(9090) {\n    resource function 'default fo() returns string|error {\n        string payload = check foBackendEP->get(\"\/\");\n        return payload;\n    }\n}\n\n\/\/ Define the sample service to mock connection timeouts and service outages.\nservice \/ on new http:Listener(8080) {\n    resource function 'default echo() returns string {\n\n        \/\/ Delay the response for 30 seconds to mimic network level delays.\n        runtime:sleep(30);\n        return \"echo Resource is invoked\";\n    }\n\n    \/\/ Define the sample resource to mock a healthy service.\n    resource function 'default mock() returns string {\n        return \"Mock Resource is Invoked.\";\n    }\n}", "outputFileName":"http_failover.server.out", "output":"bal run http_failover.bal"}], "description":"\/\/ Ballerina users can configure multiple HTTP clients in a given failover group. \n\/\/ If one of the HTTP clients (dependencies) fails, Ballerina automatically fails over to another endpoint.\n\/\/ The following example depicts the `FailoverClient` behaviour with three target services. The first two targets\n\/\/ are configured to mimic failure backends.\n\/\/ After the first invocation the client resumes the failover from the last successful target. In this case it is\n\/\/ the third target and the client will get the immediate response for subsequent calls.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to use an HTTP failover client in Ballerina. The Failover client can be used to handle network-related issues gracefully.\nkeywords: ballerina, ballerina by examples, bbe, http, resiliency, failover"}, {"bbeName":"http-header-param", "resources":[{"tag":"param", "balFileName":"http_header_param.bal", "bal":"import ballerina\/http;\nimport ballerina\/log;\n\nservice \/ on new http:Listener(9090) {\n    \/\/ The `clientKey` method argument is considered as the value for the\n    \/\/ `X-Client-Key` HTTP header.\n    resource function get hello(@http:Header {name: \"X-Client-Key\"}\n            string clientKey) returns string {\n\n        log:printInfo(\"Received header value: \" + clientKey);\n        return clientKey;\n    }\n}", "outputFileName":"http_header_param.server.out", "output":"bal run http_headers.bal\ntime = 2021-06-25T11:56:13.746+05:30 level = INFO module = \"\" message = \"Received header value 0987654321\""}], "description":"\/\/ The `http` module provides support for accessing inbound request headers as resource method arguments.\n\/\/ The header key can be specified as a variable name along with the `@http:Header` annotation. Else, it can be specified\n\/\/ in the `name` field of the annotation. The supported types are `string`, `string[]`, and optional.\n\/\/ The `string[]` type returns all the values for a given header key while `string` returns the first value. Unless the\n\/\/ type is optional, the request will be responded with a 400 Bad request in the absence of the mentioned header.\n\/\/ However, more header manipulations can be done via the `http:Headers` header object, which also can be accessed as\n\/\/ a resource method argument without using the annotation.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to use `@http:Header` annotation to retrieve HTTP headers.\nkeywords: ballerina, ballerina by example, bbe, http, http-headers"}, {"bbeName":"http-load-balancer", "resources":[{"tag":"balancer", "balFileName":"http_load_balancer.bal", "bal":"import ballerina\/http;\n\n\/\/ Create an endpoint with port 8080 for the mock backend services.\nlistener http:Listener backendEP = check new (8080);\n\n\/\/ Define the load balance client endpoint to call the backend services.\nfinal http:LoadBalanceClient lbBackendEP = check new ({\n        \/\/ Define the set of HTTP clients that need to be load balanced.\n        targets: [\n            {url: \"http:\/\/localhost:8080\/mock1\"},\n            {url: \"http:\/\/localhost:8080\/mock2\"},\n            {url: \"http:\/\/localhost:8080\/mock3\"}\n        ],\n\n        timeout: 5\n});\n\nservice \/ on new http:Listener(9090) {\n    resource function 'default lb() returns string|error {\n        string payload = check lbBackendEP->get(\"\/\");\n        return payload;\n    }\n}\n\n\/\/ Define the mock backend services, which are called by the load balancer.\nservice \/mock1 on backendEP {\n    resource function get .() returns string {\n        return \"Mock1 resource was invoked.\";\n    }\n}\n\nservice \/mock2 on backendEP {\n    resource function get .() returns string {\n        return \"Mock2 resource was invoked.\";\n    }\n}\n\nservice \/mock3 on backendEP {\n    resource function get .() returns string {\n        return \"Mock3 resource was invoked.\";\n    }\n}", "outputFileName":"http_load_balancer.server.out", "output":"bal run http_load_balancer.bal"}], "description":"\/\/ An HTTP load balancing endpoint is used when the request load needs to be load balanced across a given \n\/\/ set of target endpoints.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to use an HTTP load balancer in Ballerina. This will allow to balance the load of an endpoint using a given algorithm to select the endpoint.\nkeywords: ballerina, ballerina by examples, bbe, http, resiliency, load balancer, load balance"}, {"bbeName":"http-matrix-param", "resources":[{"tag":"param", "balFileName":"http_matrix_param.bal", "bal":"import ballerina\/http;\n\nservice \/sample on new http:Listener(9090) {\n\n    \/\/ The path param is defined as a part of the resource path along with the type and it is extracted from the\n    \/\/ request URI.\n    resource function get path\/[string foo](http:Request req) returns json {\n\n        \/\/ Gets the [MatrixParams](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/classes\/Request#getMatrixParams).\n        map<any> pathMParams = req.getMatrixParams(\"\/sample\/path\");\n        var a = <string>pathMParams[\"a\"];\n        var b = <string>pathMParams[\"b\"];\n        string pathMatrixStr = string `a=${a}, b=${b}`;\n\n        map<any> fooMParams = req.getMatrixParams(\"\/sample\/path\/\" + foo);\n        var x = <string>fooMParams[\"x\"];\n        var y = <string>fooMParams[\"y\"];\n        string fooMatrixStr = string `x=${x}, y=${y}`;\n        json matrixJson = {\"path\": pathMatrixStr, \"foo\": fooMatrixStr};\n\n        \/\/ Create a JSON payload with the extracted values.\n        json responseJson = {\n            \"pathParam\": foo,\n            \"matrix\": matrixJson\n        };\n        \/\/ Send a response with the JSON payload to the client.\n        return responseJson;\n    }\n}", "outputFileName":"http_matrix_param.server.out", "output":"bal run http_matrix_param.bal"}], "description":"\/\/ Ballerina supports extracting `MatrixParam` values using `http:Request` support method.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to extract values using the `PathParam` and `MatrixParam` parameters in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, matrix param"}, {"bbeName":"http-passthrough", "resources":[{"tag":"passthrough", "balFileName":"http_passthrough.bal", "bal":"import ballerina\/http;\n\nhttp:Client clientEP = check new (\"http:\/\/postman-echo.com\");\n\nservice \/ on new http:Listener(9090) {\n\n    \/\/ The passthrough resource allows all HTTP methods as the accessor is `default`.\n    resource function 'default passthrough(http:Request req)\n            returns http:Response|error? {\n        \/\/ When [forward()](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/clients\/Client#forward) is called on the backend client endpoint, it forwards the request that the passthrough\n        \/\/ resource received to the backend. When forwarding, the request is made using the same HTTP method that was\n        \/\/ used to invoke the passthrough resource. The `forward()` function returns the response from the backend if\n        \/\/ there are no errors.\n        http:Response response = check clientEP->forward(\"\/get\", req);\n        return response;\n    }\n}", "outputFileName":"http_passthrough.server.out", "output":"bal run passthrough.bal"}], "description":"\/\/The passthrough sample exhibits the process of an HTTP client connector. The 'Echo Service' is used as a sample backend.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: This BBE demonstrates the process of an HTTP client connector in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, passthrough, client"}, {"bbeName":"http-path-param", "resources":[{"tag":"param", "balFileName":"http_path_param.bal", "bal":"import ballerina\/http;\n\nservice \/company on new http:Listener(9090) {\n\n    \/\/ The path param is defined as a part of the resource path along with the type and it is extracted from the\n    \/\/ request URI.\n    resource function get empId\/[int id]() returns json {\n        return {empId: id};\n    }\n\n    resource function get empName\/[string first]\/[string last]() returns json {\n        return {firstName: first, lastName: last};\n    }\n}", "outputFileName":"http_path_param.server.out", "output":"bal run http_path_param.bal"}], "description":"\/\/ HTTP module provides first class support for specifying `Path parameters` in the resource path along with the type.\n\/\/ The supported types are string, int, float, boolean, and decimal (e.g., path\/[string foo]).<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to extract values using the `PathParam` and `MatrixParam` parameters in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, path param"}, {"bbeName":"http-query-parameter", "resources":[{"tag":"parameter", "balFileName":"http_query_parameter.bal", "bal":"import ballerina\/http;\n\nservice \/product on new http:Listener(9090) {\n\n    \/\/ The `a`, `b` method arguments are considered as query parameters.\n    resource function get count(int a, int b) returns json {\n        return { count : a + b};\n    }\n\n    \/\/ The query param type is nilable which means the URI may contain the param.\n    \/\/ In the absence of the query param `id` the type is nil.\n    resource function get name(string? id) returns string {\n        if (id is string) {\n            return \"product_\" + id;\n        }\n        return \"product_0000\";\n    }\n\n    \/\/ The multiple query param values also can be accommodate to an array.\n    resource function get detail(string[]? colour) returns json {\n        return { product_colour : colour};\n    }\n}", "outputFileName":"http_query_parameter.server.out", "output":"bal run http_query_parameter.bal"}], "description":"\/\/ HTTP module provides first class support for reading URL query parameters as resource method argument.\n\/\/ The supported types are string, int, float, boolean, decimal, and the array types of the aforementioned types. The\n\/\/ query param type can be nilable (e.g., (string? bar)). The request also provide certain method to retrieve query\n\/\/ param at their convenience <br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to use the `query parameters` in an HTTP service.\nkeywords: ballerina, ballerina by example, bbe, http service, query parameter"}, {"bbeName":"http-redirects", "resources":[{"tag":"redirects", "balFileName":"http_redirects.bal", "bal":"import ballerina\/http;\n\n\/\/ Creates an HTTP client to interact with a remote endpoint.\n\/\/ [followRedirects](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/FollowRedirects) record provides configurations associated with HTTP redirects.\nhttp:Client clientEndpoint = check new (\"http:\/\/localhost:9092\", {\n        followRedirects: {enabled: true, maxCount: 5}\n    }\n);\n\nservice \/ on new http:Listener(9090) {\n\n    resource function get hello() returns string|error {\n        \/\/ Sends a `GET` request to the specified endpoint and Retrieved the text payload from the response.\n        string returnResult = check clientEndpoint->get(\"\/redirect1\");\n        return \"Response received : \" + returnResult;\n    }\n}\n\nservice \/ on new http:Listener(9092) {\n\n    resource function get redirect1(http:Caller caller) returns error? {\n        http:Response res = new;\n        \/\/ Sends a redirect response with a location.\n        check caller->redirect(res,\n            http:REDIRECT_TEMPORARY_REDIRECT_307,\n            [\"http:\/\/localhost:9093\/redirect2\"]);\n    }\n}\n\nservice \/redirect2 on new http:Listener(9093) {\n\n    resource function get .() returns string {\n        \/\/ Sends a response to the caller.\n        return \"Hello World!\";\n    }\n}", "outputFileName":"http_redirects.server.out", "output":"bal run http_redirects.bal"}], "description":"\/\/ This example demonstrates an HTTP redirect. \n\/\/ To follow redirects when calling an external HTTP server using the Ballerina HTTP client connector, set `followRedirect`\n\/\/ to true.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to do HTTP redirect with the Ballerina HTTP client connector.\nkeywords: ballerina, ballerina by example, bbe, http, redirect"}, {"bbeName":"http-request-error-interceptor", "resources":[{"tag":"interceptor", "balFileName":"http_request_error_interceptor.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\n\n\/\/ Header name checked by the first request interceptor.\nfinal string interceptor_check_header = \"X-requestCheckHeader\";\n\n\/\/ Header value to be set to the request in the request error interceptor.\nfinal string interceptor_check_header_value = \"RequestErrorInterceptor\";\n\nservice class RequestInterceptor1 {\n    *http:RequestInterceptor;\n\n    resource function 'default [string... path](http:RequestContext ctx, \n                            http:Request req) returns http:NextService|error? {\n        io:println(\"Executing Request Interceptor 1\");\n        \/\/ Tries to read the header. This will return a `HeaderNotFoundError` if you do not set this header. Then, the execution will \n        \/\/ jump to the nearest `RequestErrorInterceptor`.\n        string checkHeader = check req.getHeader(interceptor_check_header);\n        io:println(\"Check Header Value : \" + checkHeader);\n        return ctx.next();\n    }\n}\n\nRequestInterceptor1 requestInterceptor1 = new;\n\nservice class RequestInterceptor2 {\n    *http:RequestInterceptor;\n\n    resource function get [string... path](http:RequestContext ctx) \n            returns http:NextService|error? {\n        io:println(\"Executing Request Interceptor 2\");\n        return ctx.next();\n    }\n}\n\nRequestInterceptor2 requestInterceptor2 = new;\n\n\/\/ A Request Error Interceptor service class implementation. It intercepts the request when an error occurrs in the interceptor execution,\n\/\/ and adds a header before it is dispatched to the target HTTP resource. Also, a Request Error Interceptor service class can have only one resource function.\nservice class RequestErrorInterceptor {\n    *http:RequestErrorInterceptor;\n\n    \/\/ The resource function inside a `RequestErrorInterceptor` is only allowed to have the default method and path. The error occurred\n    \/\/ in the interceptor execution can be accessed by the `error` parameter.\n    resource function 'default [string... path](http:RequestContext ctx, \n                http:Request req, error err) returns http:NextService|error? {\n        io:println(\"Executing Request Error Interceptor\");\n        io:println(\"Error occurred : \" + err.message());\n        \/\/ Sets a header to the request.\n        req.setHeader(interceptor_check_header, interceptor_check_header_value);\n        return ctx.next();\n    }\n}\n\n\/\/ Creates a new Request Error Interceptor.\nRequestErrorInterceptor requestErrorInterceptor = new;\n\nlistener http:Listener interceptorListener = new http:Listener(9090, config = { \n    \/\/ A `RequestErrorInterceptor` can be added anywhere in the interceptor pipeline.\n    interceptors: [requestInterceptor1, requestInterceptor2, \n                   requestErrorInterceptor] \n});\n\nservice \/ on interceptorListener {\n\n    resource function get greeting(http:Request req) \n            returns http:Response|error? {\n        io:println(\"Executing Target Resource\");\n        \/\/ Creates a new response.\n        http:Response response = new;\n        \/\/ Sets the headers from the request.\n        response.setHeader(interceptor_check_header, \n                        check req.getHeader(interceptor_check_header));\n        response.setTextPayload(\"Greetings!\");\n        return response;\n    }\n}", "outputFileName":"http_request_error_interceptor.server.out", "output":"# Run the service.\nbal run http_request_error_interceptor.bal\n\nExecuting Request Interceptor 1\nerror: Http header does not exist\n        at ballerina.http.2:externRequestGetHeader(http_request.bal:733)\n           ballerina.http.2.Request:getHeader(http_request.bal:147)\n           RequestInterceptor1:$default$**(http_request_error_interceptor.bal:18)\nExecuting Request Error Interceptor\nError occurred : Http header does not exist\nExecuting Target Resource"}], "description":"\/\/ A `RequestErrorInterceptor` is used to handle the errors that occurred in the interceptor pipeline execution. \n\/\/ When an error is returned from a `RequestInterceptor` service, the interceptor pipeline execution jumps to the\n\/\/ nearest `RequestErrorInterceptor`. However, if there is no `RequestErrorInterceptor` in the pipeline, then, \n\/\/ the error response is returned to the client without executing the actual resource in the target service.\n\/\/ For more information, see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: This BBE demonstrates the HTTP Request Error Interceptors in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, interceptor, request, error, filter"}, {"bbeName":"http-request-interceptor-at-listener", "resources":[{"tag":"listener", "balFileName":"http_request_interceptor_at_listener.bal", "bal":"import ballerina\/http;\n\n\/\/ Header name to be set to the request in the request interceptor.\nfinal string interceptor_header1 = \"X-requestHeader1\";\nfinal string interceptor_header2 = \"X-requestHeader2\";\n\n\/\/ Header value to be set to the request in the request interceptor.\nfinal string interceptor_header_value1 = \"RequestInterceptor1\";\nfinal string interceptor_header_value2 = \"RequestInterceptor2\";\n\n\/\/ A Request Interceptor service class implementation. It intercepts the request and adds a header before it is dispatched to the \n\/\/ target HTTP Resource. A Request Interceptor service class can have only one resource function.\nservice class RequestInterceptor1 {\n    *http:RequestInterceptor;\n\n    \/\/ A default resource function, which will be executed for all requests. A `RequestContext` is used to share data between \n    \/\/ interceptors. Resource methods are only allowed to return an `http:NextService|error?`.\n    resource function 'default [string... path](http:RequestContext ctx, \n                            http:Request req) returns http:NextService|error? {\n        \/\/ Sets a header to the request inside the interceptor service.\n        req.setHeader(interceptor_header1, interceptor_header_value1);\n        \/\/ Returns the next interceptor or the target service in the pipeline. An error is returned when the call fails.\n        return ctx.next();\n    }\n}\n\n\/\/ Creates a new Request Interceptor.\nRequestInterceptor1 requestInterceptor1 = new;\n\n\/\/ Another Request Interceptor service class.\nservice class RequestInterceptor2 {\n    *http:RequestInterceptor;\n\n    \/\/ This interceptor is only executed for GET requests with the default path. \n    resource function get [string... path](http:RequestContext ctx, \n                            http:Request req) returns http:NextService|error? {\n        req.setHeader(interceptor_header2, interceptor_header_value2);\n        return ctx.next();\n    }\n}\n\n\/\/ Creates another new Request Interceptor.\nRequestInterceptor2 requestInterceptor2 = new;\n\n\/\/ Creates an HTTP Listener and assigns the interceptors as a config parameter. \n\/\/ Interceptor services will be executed in the configured order.\nlistener http:Listener interceptorListener = new http:Listener(9090, config = { \n    \/\/ Interceptor pipeline. Only interceptors with default path can be engaged \n    \/\/ at listener level.\n    interceptors: [requestInterceptor1, requestInterceptor2] \n});\n\nservice \/ on interceptorListener {\n\n    resource function get greeting(http:Request req) \n            returns http:Response|error? {\n        \/\/ Create a new response.\n        http:Response response = new;\n        \/\/ Set the interceptor headers from request\n        response.setHeader(interceptor_header1, \n                            check req.getHeader(interceptor_header1));\n        response.setHeader(interceptor_header2, \n                            check req.getHeader(interceptor_header2));\n        response.setTextPayload(\"Greetings!\");\n        return response;\n    }\n}", "outputFileName":"http_request_interceptor_at_listener.server.out", "output":"# Run the service\nbal run http_request_interceptor_at_listener.bal"}], "description":"\/\/ The HTTP Listener supports intercepting requests in the request path. It is possible to\n\/\/ define a `RequestInterceptor` service class with a resource function to execute \n\/\/ custom logic and engage with an HTTP Listener. The request will go through the \n\/\/ interceptor services before its dispatched to the actual resource in the target \n\/\/ service. Interceptors engaged at listener level can only have default path. \n\/\/ For more information, see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: This BBE demonstrates the HTTP Request Interceptors in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, listener, interceptor, request, filter"}, {"bbeName":"http-request-interceptor-at-service", "resources":[{"tag":"service", "balFileName":"http_request_interceptor_at_service.bal", "bal":"import ballerina\/http;\n\n\/\/ Header name to be set to the request in the request interceptor.\nfinal string interceptor_header1 = \"X-requestHeader1\";\nfinal string interceptor_header2 = \"X-requestHeader2\";\n\n\/\/ Header value to be set to the request in the request interceptor.\nfinal string interceptor_header_value1 = \"RequestInterceptor1\";\nfinal string interceptor_header_value2 = \"RequestInterceptor2\";\n\nservice class RequestInterceptor1 {\n    *http:RequestInterceptor;\n\n    resource function 'default [string... path](http:RequestContext ctx, \n                            http:Request req) returns http:NextService|error? {\n        \/\/ Sets a header to the request inside the interceptor service.\n        req.setHeader(interceptor_header1, interceptor_header_value1);\n        return ctx.next();\n    }\n}\n\nRequestInterceptor1 requestInterceptor1 = new;\n\n\/\/ Interceptor service class with specific path. This interceptor can only be engaged at service\n\/\/ level.\nservice class RequestInterceptor2 {\n    *http:RequestInterceptor;\n\n    \/\/ This interceptor is only executed for GET requests with the relative path \"greeting\". \n    resource function get greeting(http:RequestContext ctx, \n                            http:Request req) returns http:NextService|error? {\n        req.setHeader(interceptor_header2, interceptor_header_value2);\n        return ctx.next();\n    }\n}\n\nRequestInterceptor2 requestInterceptor2 = new;\n\nlistener http:Listener interceptorListener = new http:Listener(9090);\n\n\/\/ Engage interceptors at service level.\n@http:ServiceConfig {\n    \/\/ The base path of interceptor services is same as the target service.\n    interceptors: [requestInterceptor1, requestInterceptor2]\n}\nservice \/user on interceptorListener {\n\n    resource function get greeting(http:Request req) \n            returns http:Response|error? {\n        \/\/ Create a new response.\n        http:Response response = new;\n        \/\/ Set the interceptor headers from request\n        response.setHeader(interceptor_header1, \n                            check req.getHeader(interceptor_header1));\n        response.setHeader(interceptor_header2, \n                            check req.getHeader(interceptor_header2));\n        response.setTextPayload(\"Greetings!\");\n        return response;\n    }\n}", "outputFileName":"http_request_interceptor_at_service.server.out", "output":"# Run the service\nbal run http_request_interceptor_at_service.bal"}], "description":"\/\/ When you want to engage a `RequestInterceptor` for a specific service path, you can engage interceptors at\n\/\/ the service level through the `ServiceConfig` annotation. The interceptors engaged at the service level will have the \n\/\/ base path same as the target service.\n\/\/ For more information, see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: This BBE demonstrates the HTTP Request Interceptors in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, service, interceptor, request, filter"}, {"bbeName":"http-request-with-multiparts", "resources":[{"tag":"multiparts", "balFileName":"http_request_with_multiparts.bal", "bal":"import ballerina\/http;\nimport ballerina\/log;\nimport ballerina\/mime;\n\nhttp:Client clientEP = check new (\"http:\/\/localhost:9090\");\n\n\/\/Binds the listener to the service.\nservice \/multiparts on new http:Listener(9090) {\n\n    resource function post decode(http:Request request)\n            returns http:Response|http:InternalServerError{\n        http:Response response = new;\n        \/\/ [Extracts bodyparts](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/classes\/Request#getBodyParts) from the request.\n        var bodyParts = request.getBodyParts();\n\n        if (bodyParts is mime:Entity[]) {\n            foreach var part in bodyParts {\n                handleContent(part);\n            }\n            response.setPayload(bodyParts);\n            return response;\n        } else {\n            log:printError(bodyParts.message());\n            return {body:\"Error in decoding multiparts!\"};\n        }\n    }\n\n    resource function get encode(http:Request req)\n            returns http:Response|http:InternalServerError {\n        \/\/Create a json body part.\n        mime:Entity jsonBodyPart = new;\n        jsonBodyPart.setContentDisposition(\n                        getContentDispositionForFormData(\"json part\"));\n        jsonBodyPart.setJson({\"name\": \"wso2\"});\n        \/\/Create an `xml` body part as a file upload.\n        mime:Entity xmlFilePart = new;\n        xmlFilePart.setContentDisposition(\n                       getContentDispositionForFormData(\"xml file part\"));\n        \/\/ This file path is relative to where the ballerina is running.\n        \/\/ If your file is located outside, please\n        \/\/ give the absolute file path instead.\n        xmlFilePart.setFileAsEntityBody(\".\/files\/test.xml\",\n                                        contentType = mime:APPLICATION_XML);\n        \/\/ Create an array to hold all the body parts.\n        mime:Entity[] bodyParts = [jsonBodyPart, xmlFilePart];\n        http:Request request = new;\n        \/\/ [Set the body parts](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/classes\/Request#setBodyParts) to the request.\n        \/\/ Here the content-type is set as multipart form data.\n        \/\/ This also works with any other multipart media type.\n        \/\/ eg:- `multipart\/mixed`, `multipart\/related` etc.\n        \/\/ You need to pass the content type that suit your requirement.\n        request.setBodyParts(bodyParts, contentType = mime:MULTIPART_FORM_DATA);\n        http:Response|error returnResponse =\n            clientEP->post(\"\/multiparts\/decode\", request);\n        if (returnResponse is http:Response) {\n            return returnResponse;\n        } else {\n            return {body:\"Error occurred while sending multipart request!\"};\n        }\n    }\n}\n\n\/\/ The content logic that handles the body parts vary based on your requirement.\nfunction handleContent(mime:Entity bodyPart) {\n    \/\/ [Get the media type](https:\/\/docs.central.ballerina.io\/ballerina\/mime\/latest\/functions#getMediaType) from the body part retrieved from the request.\n    var mediaType = mime:getMediaType(bodyPart.getContentType());\n    if (mediaType is mime:MediaType) {\n        string baseType = mediaType.getBaseType();\n        if (mime:APPLICATION_XML == baseType || mime:TEXT_XML == baseType) {\n            \/\/[Extracts `xml` data](https:\/\/docs.central.ballerina.io\/ballerina\/mime\/latest\/classes\/Entity#getXml) from the body part.\n            var payload = bodyPart.getXml();\n            if (payload is xml) {\n                log:printInfo(payload.toString());\n            } else {\n                log:printError(payload.message());\n            }\n        } else if (mime:APPLICATION_JSON == baseType) {\n            \/\/[Extracts `json` data](https:\/\/docs.central.ballerina.io\/ballerina\/mime\/latest\/classes\/Entity#getJson) from the body part.\n            var payload = bodyPart.getJson();\n            if (payload is json) {\n                log:printInfo(payload.toJsonString());\n            } else {\n                log:printError(payload.message());\n            }\n        } else if (mime:TEXT_PLAIN == baseType) {\n            \/\/[Extracts text data](https:\/\/docs.central.ballerina.io\/ballerina\/mime\/latest\/classes\/Entity#getText) from the body part.\n            var payload = bodyPart.getText();\n            if (payload is string) {\n                log:printInfo(payload);\n            } else {\n                log:printError(payload.message());\n            }\n        }\n    }\n}\n\nfunction getContentDispositionForFormData(string partName)\n                                    returns (mime:ContentDisposition) {\n    mime:ContentDisposition contentDisposition = new;\n    contentDisposition.name = partName;\n    contentDisposition.disposition = \"form-data\";\n    return contentDisposition;\n}", "outputFileName":"http_request_with_multiparts.server.out", "output":"# In the directory, which contains the `.bal` file, create a directory named `file`,\n# and add an XML files named `test.xml` in it.\nbal run request_with_multiparts.bal\ntime = 2021-01-21 22:00:17,167 level = INFO  module = \"\" message = \"{\"name\":\"ballerina\"}\"\ntime = 2021-01-21 22:01:18,466 level = INFO  module = \"\" message = \"{\"name\":\"wso2\"}\"\ntime = 2021-01-21 22:01:18,682 level = INFO  module = \"\" message = \"<ballerinalang>\n    <version>0.963<\/version>\n    <test>test xml file to be used as a file part<\/test>\n<\/ballerinalang>\"\n^C[ballerina\/http] stopped HTTP\/WS listener 0.0.0.0:9090"}], "description":"\/\/ Ballerina supports encoding and decoding multipart content in http requests along with nested parts.\n\/\/ When you request multiparts from the HTTP inbound request, you get an array of body parts (an array of entities).\n\/\/ You can loop through this array and handle the received body parts according to your requirement.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [Mime module](https:\/\/docs.central.ballerina.io\/ballerina\/mime\/latest\/).", "metatags":"description: BBE on how Ballerina supports encoding and decoding multipart content in HTTP requests along with nested parts.\nkeywords: ballerina, ballerina by example, bbe, mime, multiparts, entity"}, {"bbeName":"http-resource-returns", "resources":[{"tag":"returns", "balFileName":"http_resource_returns.bal", "bal":"import ballerina\/http;\n\ntype PersonAccount record {\n    string name;\n    int accountNo;\n};\n\nservice \/bank on new http:Listener(9090) {\n\n    \/\/ The resource returns the json type values and the `Content-type` header is set according to the `mediaType`\n    \/\/ field of [@http:Payload](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/HttpPayload)\n    \/\/ annotation.\n    resource function get branch() returns\n            @http:Payload {mediaType:\"application\/json+id\"} json {\n        return { branch : [\"Colombo, Srilanka\"]};\n    }\n\n    \/\/ The [StatusCodeResponse](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/types#StatusCodeResponse)\n    \/\/ can be state as return type to send responses with specific HTTP status codes.\n    resource function get [string 'type]()\n            returns http:Ok|http:InternalServerError {\n        if 'type == \"open\" {\n\n            \/\/ Creates response with 200 status code and set body as response payload.\n            http:Ok ok = {body: \"Bank is open\"};\n            return ok;\n        } else {\n\n            \/\/ Creates response with 500 status code and set body as response payload.\n            http:InternalServerError err = {body: \"Bank is closed\"};\n            return err;\n        }\n    }\n\n    \/\/ Inline response records are useful to return headers and body along with status code. In this instance the\n    \/\/ return type is a subtype of [http:Created](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/Created)\n    \/\/ record, hence 201 response will be sent.\n    resource function put account(@http:Payload string name)\n            returns record {|*http:Created; PersonAccount body;|} {\n        PersonAccount account = {accountNo: 84230, name: name};\n        return {\n            mediaType: \"application\/account+json\",\n            headers: {\n                \"Location\": \"\/myServer\/084230\"\n            },\n            body: account\n        };\n    }\n}", "outputFileName":"http_resource_returns.server.out", "output":"bal run http_resource_returns.bal"}], "description":"\/\/ The resource method can return `anydata` type, an `http:Response` object, `StatusCodeResponse` records along with\n\/\/ `error?`. Instead of using an `http:Caller`, the response can be sent similarly by returning from the method.\n\/\/ When returning `anydata`, the `@http:Payload` annotation can be used to specify the `Content-type` of the response\n\/\/ additionally. Otherwise, the default content type of the respective return value type will be added.\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to use the statusCode records and return types in an HTTP resource methods.\nkeywords: ballerina, ballerina by example, bbe, http resource, return types, statusCode records"}, {"bbeName":"http-response-with-multiparts", "resources":[{"tag":"multiparts", "balFileName":"http_response_with_multiparts.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\nimport ballerina\/log;\nimport ballerina\/mime;\n\n\/\/ Creates an endpoint for the client.\nhttp:Client clientEP = check new (\"http:\/\/localhost:9092\");\n\nservice \/multiparts on new http:Listener(9092) {\n\n    resource function get encode_out_response() returns http:Response {\n        \/\/ Creates an enclosing entity to hold the child parts.\n        mime:Entity parentPart = new;\n\n        \/\/ Creates a child part with the JSON content.\n        mime:Entity childPart1 = new;\n        childPart1.setJson({\"name\": \"wso2\"});\n        \/\/ Creates another child part with a file.\n        mime:Entity childPart2 = new;\n        \/\/ This file path is relative to where the Ballerina is running.\n        \/\/If your file is located outside, please give the\n        \/\/absolute file path instead.\n        childPart2.setFileAsEntityBody(\".\/files\/test.xml\",\n            contentType = mime:TEXT_XML);\n        \/\/ Creates an array to hold the child parts.\n        mime:Entity[] childParts = [childPart1, childPart2];\n        \/\/ [Sets the child parts to the parent part](https:\/\/docs.central.ballerina.io\/ballerina\/mime\/latest\/classes\/Entity#setBodyParts).\n        parentPart.setBodyParts(childParts,\n            contentType = mime:MULTIPART_MIXED);\n        \/\/ Creates an array to hold the parent part and set it to the response.\n        mime:Entity[] immediatePartsToResponse = [parentPart];\n        http:Response outResponse = new;\n        outResponse.setBodyParts(immediatePartsToResponse,\n            contentType = mime:MULTIPART_FORM_DATA);\n        return outResponse;\n    }\n}\n\n\/\/ Binds the listener to the service.\nservice \/multiparts on new http:Listener(9090) {\n\n    \/\/ This resource accepts multipart responses.\n    resource function get decode_in_response()\n            returns string|http:InternalServerError {\n        http:Response|error returnResult = clientEP->get(\n                        \"\/multiparts\/encode_out_response\");\n        if (returnResult is http:Response) {\n            \/\/ [Extracts the body parts](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/classes\/Response#getBodyParts)  from the response.\n            var parentParts = returnResult.getBodyParts();\n            if (parentParts is mime:Entity[]) {\n                \/\/Loops through body parts.\n                foreach var parentPart in parentParts {\n                    handleNestedParts(parentPart);\n                }\n                return \"Body Parts Received!\";\n            } else {\n                return { body: \"Invalid payload\"};\n            }\n        } else {\n            return { body: \"Connection error\"};\n        }\n    }\n}\n\n\/\/ Gets the child parts that are nested within the parent.\nfunction handleNestedParts(mime:Entity parentPart) {\n    string contentTypeOfParent = parentPart.getContentType();\n    if (contentTypeOfParent.startsWith(\"multipart\/\")) {\n        var childParts = parentPart.getBodyParts();\n        if (childParts is mime:Entity[]) {\n            log:printInfo(\"Nested Parts Detected!\");\n            foreach var childPart in childParts {\n                handleContent(childPart);\n            }\n        } else {\n            log:printError(\"Error retrieving child parts! \" +\n                            childParts.message());\n        }\n    }\n}\n\n\/\/The content logic that handles the body parts\n\/\/vary based on your requirement.\nfunction handleContent(mime:Entity bodyPart) {\n    string baseType = getBaseType(bodyPart.getContentType());\n    if (mime:APPLICATION_XML == baseType || mime:TEXT_XML == baseType) {\n        \/\/ [Extracts XML data](https:\/\/docs.central.ballerina.io\/ballerina\/mime\/latest\/classes\/Entity#getXml) from the body part.\n        var payload = bodyPart.getXml();\n        if (payload is xml) {\n             log:printInfo(\"XML data: \" + payload.toString());\n        } else {\n             log:printError(\"Error in parsing XML data\", 'error = payload);\n        }\n    } else if (mime:APPLICATION_JSON == baseType) {\n        \/\/ [Extracts JSON data](https:\/\/docs.central.ballerina.io\/ballerina\/mime\/latest\/classes\/Entity#getJson) from the body part.\n        var payload = bodyPart.getJson();\n        if (payload is json) {\n            log:printInfo(\"JSON data: \" + payload.toJsonString());\n        } else {\n             log:printError(\"Error in parsing JSON data\", 'error = payload);\n        }\n    } else if (mime:TEXT_PLAIN == baseType) {\n        \/\/ [Extracts text data](https:\/\/docs.central.ballerina.io\/ballerina\/mime\/latest\/classes\/Entity#getText) from the body part.\n        var payload = bodyPart.getText();\n        if (payload is string) {\n            log:printInfo(\"Text data: \" + payload);\n        } else {\n            log:printError(\"Error in parsing text data\", 'error = payload);\n        }\n    } else if (mime:APPLICATION_PDF == baseType) {\n        \/\/ [Extracts the byte stream](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/classes\/Response#getByteStream) from the body part and saves it as a file.\n        var payload = bodyPart.getByteStream();\n        if (payload is stream<byte[], io:Error?>) {\n            \/\/Writes the incoming stream to a file using `io:fileWriteBlocksFromStream` API by providing the file location to which the content should be written to.\n            io:Error? result = io:fileWriteBlocksFromStream(\n                                    \".\/files\/ReceivedFile.pdf\", payload);\n\n            if (result is error) {\n                log:printError(\"Error occurred while writing \",\n                                'error = result);\n            }\n            close(payload);\n        } else {\n            log:printError(\"Error in parsing byte channel :\",\n                            'error = payload);\n        }\n    }\n}\n\n\/\/Gets the base type from a given content type.\nfunction getBaseType(string contentType) returns string {\n    var result = mime:getMediaType(contentType);\n    if (result is mime:MediaType) {\n        return result.getBaseType();\n    } else {\n        panic result;\n    }\n}\n\n\/\/Closes the byte stream.\nfunction close(stream<byte[], io:Error?> byteStream) {\n    var cr = byteStream.close();\n    if (cr is error) {\n        log:printError(\"Error occurred while closing the stream: \",\n                       'error = cr);\n    }\n}", "outputFileName":"http_response_with_multiparts.server.out", "output":"# In the directory, which contains the `.bal` file, create a directory named `files`,\n# and add an XML file named `test.xml` in it.\nbal run response_with_multiparts.bal\ntime = 2021-01-21 22:20:38,143 level = INFO  module = \"\" message = \"Nested Parts Detected!\" \ntime = 2021-01-21 22:20:38,185 level = INFO  module = \"\" message = \"JSON data: {\"name\":\"wso2\"}\" \ntime = 2021-01-21 22:20:38,324 level = INFO  module = \"\" message = \"XML data: <ballerinalang>\n    <version>0.963<\/version>\n    <test>test xml file to be used as a file part<\/test>\n<\/ballerinalang>\" "}], "description":"\/\/ Ballerina supports encoding and decoding multipart content in HTTP responses along with the nested parts.\n\/\/ When you request multiparts from an HTTP inbound response, you get an array of the parts of the body (an array of\n\/\/ entities). If the received parts contain nested parts, you can loop through the parent parts and get the child parts.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [Mime module](https:\/\/docs.central.ballerina.io\/ballerina\/mime\/latest\/).", "metatags":"description: BBE on how Ballerina supports encoding and decoding multipart content in HTTP responses along with nested parts.\nkeywords: ballerina, ballerina by example, bbe, mime, multiparts, entity"}, {"bbeName":"http-restrict-by-media-type", "resources":[{"tag":"type", "balFileName":"http_restrict_by_media_type.bal", "bal":"import ballerina\/http;\n\nservice on new http:Listener(9092) {\n    \/\/ The `consumes` and `produces` annotations of the [resource configuration](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/HttpResourceConfig)\n    \/\/ contain MIME types as an array of strings. The resource can only consume\/accept `text\/json` and\n    \/\/ `application\/json` media types. Therefore, the `Content-Type` header\n    \/\/ of the request must be in one of these two types. The resource can produce\n    \/\/ `application\/xml` payloads. Therefore, you need to set the `Accept` header accordingly.\n    @http:ResourceConfig {\n        consumes: [\"text\/json\", \"application\/json\"],\n        produces: [\"application\/xml\"]\n    }\n    resource function post infoService(@http:Payload json msg)\n            returns xml|http:InternalServerError {\n        json|error nameString = msg.name;\n        if (nameString is json) {\n            xml name = xml `<name>${<string>nameString}<\/name>`;\n            return name;\n        }\n        return { body: \"Invalid json: `name` not present\"};\n    }\n}", "outputFileName":"http_restrict_by_media_type.server.out", "output":"bal run restrict_by_media_type.bal"}], "description":"\/\/ You can configure resources of HTTP services to restrict the types of media they consume and produce.\n\/\/ This is done through the `consumes` and `produces` annotation attributes of the `ResourceConfig` annotation,\n\/\/ which is used with resources.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how the resources can be configured to restrict the types of media they consume and produce in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, content-type, accept"}, {"bbeName":"http-retry", "resources":[{"tag":"retry", "balFileName":"http_retry.bal", "bal":"import ballerina\/http;\nimport ballerina\/log;\nimport ballerina\/lang.runtime;\n\nhttp:Client backendClientEP = check new (\"http:\/\/localhost:8080\", {\n            \/\/ Retry configuration options.\n            retryConfig: {\n\n                \/\/ Initial retry interval in seconds.\n                interval: 3,\n\n                \/\/ Number of retry attempts before giving up.\n                count: 3,\n\n                \/\/ Multiplier of the retry interval to exponentially increase\n                \/\/ the retry interval.\n                backOffFactor: 2.0,\n\n                \/\/ Upper limit of the retry interval in seconds. If\n                \/\/ `interval` into `backOffFactor` value exceeded\n                \/\/ `maxWaitInterval` interval value,\n                \/\/ `maxWaitInterval` will be considered as the retry\n                \/\/ interval.\n                maxWaitInterval: 20\n\n            },\n            timeout: 2\n        }\n    );\n\n\nservice \/ on new http:Listener(9090) {\n    resource function 'default 'retry() returns string|error {\n        string payload = check backendClientEP->get(\"\/hello\");\n        return payload;\n    }\n}\n\n\n\/\/ This sample service is used to mock connection timeouts and service outages.\n\/\/ The service outage is mocked by stopping\/starting this service.\n\/\/ This should run separately from the `retry` service.\nservice \/ on new http:Listener(8080) {\n    private int counter = 0;\n\n    resource function get hello() returns string {\n        self.counter += 1;\n        \/\/ Delay the response by 5 seconds to mimic network level delays.\n        if (self.counter % 4 != 0) {\n            log:printInfo(\n                \"Request received from the client to delayed service.\");\n            runtime:sleep(5);\n\n            return \"Hello World!!!\";\n        } else {\n            log:printInfo(\n                \"Request received from the client to healthy service.\");\n            return \"Hello World!!!\";\n        }\n    }\n}", "outputFileName":"http_retry.server.out", "output":"bal run http_retry.bal.bal\ntime = 2021-01-21 19:00:21,374 level = INFO  module = \"\" message = \"Request received from the client to delayed service.\"\ntime = 2021-01-21 19:00:26,379 level = INFO  module = \"\" message = \"Request received from the client to delayed service.\"\ntime = 2021-01-21 19:00:34,402 level = INFO  module = \"\" message = \"Request received from the client to delayed service.\"\ntime = 2021-01-21 19:00:48,404 level = INFO  module = \"\" message = \"Request received from the client to healthy service.\""}], "description":"\/\/ The HTTP retry client tries sending over the same request to the backend service when there is a network level failure.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to use an HTTP retry in Ballerina. The retry client can be used to automatically retry when an erroneous response is received.\nkeywords: ballerina, ballerina by examples, bbe, http, resiliency, retry"}, {"bbeName":"http-service-basic-auth-file-user-store", "resources":[{"tag":"store", "balFileName":"http_service_basic_auth_file_user_store.bal", "bal":"import ballerina\/http;\n\nlistener http:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with Basic auth and can be authorized optionally.\n\/\/ Using Basic auth with the file user store can be enabled by setting the\n\/\/ [`http:FileUserStoreConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/FileUserStoreConfig) configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@http:ServiceConfig {\n    auth: [\n        {\n            fileUserStoreConfig: {},\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice \/foo on securedEP {\n\n    \/\/ It is optional to override the authentication and authorization\n    \/\/ configurations at the resource levels. Otherwise, the service auth\n    \/\/ configurations will be applied automatically to the resources as well.\n    resource function get bar() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"http_service_basic_auth_file_user_store.server.out", "output":"# As a prerequisite, ensure that the `Config.toml` file is populated correctly\n# with the user information.\necho '[[\"ballerina.auth.users\"]]\nusername=\"alice\"\npassword=\"password1\"\nscopes=[\"scope1\"]\n[[\"ballerina.auth.users\"]]\nusername=\"bob\"\npassword=\"password2\"\nscopes=[\"scope2\", \"scope3\"]' > Config.toml\n\n# You may need to change the certificate file path and private key file path.\nbal run http_service_basic_auth_file_user_store.bal"}], "description":"\/\/ An HTTP service\/resource can be secured using Basic auth and optionally by\n\/\/ enforcing authorization. Then, it validates the Basic auth token sent in the\n\/\/ `Authorization` header against the provided configurations. This reads data\n\/\/ from a file, which has a TOML format. This stores the usernames, passwords\n\/\/ for authentication, and scopes for authorization.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s).<br\/>\n\/\/ In the authorization phase, the scopes of the service\/resource are compared\n\/\/ against the scope included in the user store for at least one match between\n\/\/ the two sets.<br\/>\n\/\/ `Config.toml` has defined three users - alice, ldclakmal and eve. Each user has a\n\/\/ password and optionally assigned scopes as an array.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Auth module](https:\/\/docs.central.ballerina.io\/ballerina\/auth\/latest\/).", "metatags":"description: BBE on how to secure HTTP service with Basic auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, auth, basic auth"}, {"bbeName":"http-service-basic-auth-ldap-user-store", "resources":[{"tag":"store", "balFileName":"http_service_basic_auth_ldap_user_store.bal", "bal":"import ballerina\/http;\n\nlistener http:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with Basic auth and can be authorized  optionally.\n\/\/ Basic auth using the LDAP user store can be enabled by setting the\n\/\/ [`http:LdapUserStoreConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/LdapUserStoreConfig) configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@http:ServiceConfig {\n    auth: [\n        {\n            ldapUserStoreConfig: {\n                domainName: \"avix.lk\",\n                connectionUrl: \"ldap:\/\/localhost:389\",\n                connectionName: \"cn=admin,dc=avix,dc=lk\",\n                connectionPassword: \"avix123\",\n                userSearchBase: \"ou=Users,dc=avix,dc=lk\",\n                userEntryObjectClass: \"inetOrgPerson\",\n                userNameAttribute: \"uid\",\n                userNameSearchFilter: \"(&(objectClass=inetOrgPerson)(uid=?))\",\n                userNameListFilter: \"(objectClass=inetOrgPerson)\",\n                groupSearchBase: [\"ou=Groups,dc=avix,dc=lk\"],\n                groupEntryObjectClass: \"groupOfNames\",\n                groupNameAttribute: \"cn\",\n                groupNameSearchFilter: \"(&(objectClass=groupOfNames)(cn=?))\",\n                groupNameListFilter: \"(objectClass=groupOfNames)\",\n                membershipAttribute: \"member\",\n                userRolesCacheEnabled: true,\n                connectionPoolingEnabled: false,\n                connectionTimeout: 5,\n                readTimeout: 60\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice \/foo on securedEP {\n\n    \/\/ It is optional to override the authentication and authorization\n    \/\/ configurations at the resource levels. Otherwise, the service auth\n    \/\/ configurations will be applied automatically to the resources as well.\n    resource function get bar() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"http_service_basic_auth_ldap_user_store.server.out", "output":"# You may need to change the certificate file path and private key file path.\nbal run http_service_basic_auth_ldap_user_store.bal"}], "description":"\/\/ An HTTP service\/resource can be secured using Basic auth and by enforcing\n\/\/ authorization optionally. Then, it validates the Basic auth token sent in\n\/\/ the `Authorization` header against the provided configurations. This reads\n\/\/ data from the configured LDAP. This stores usernames, passwords for\n\/\/ authentication, and scopes for authorization.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s).<br\/>\n\/\/ In the authorization phase, the scopes of the service\/resource are compared\n\/\/ against the scope included in the user store for at least one match between\n\/\/ the two sets.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Auth module](https:\/\/docs.central.ballerina.io\/ballerina\/auth\/latest\/).", "metatags":"description: BBE on how to secure HTTP service with Basic auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, auth, basic auth"}, {"bbeName":"http-service-jwt-auth", "resources":[{"tag":"auth", "balFileName":"http_service_jwt_auth.bal", "bal":"import ballerina\/http;\n\nlistener http:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with JWT authentication and can be authorized\n\/\/ optionally. JWT authentication can be enabled by setting the\n\/\/ [`http:JwtValidatorConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/JwtValidatorConfig) configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@http:ServiceConfig {\n    auth: [\n        {\n            jwtValidatorConfig: {\n                issuer: \"wso2\",\n                audience: \"ballerina\",\n                signatureConfig: {\n                    certFile: \"..\/resource\/path\/to\/public.crt\"\n                },\n                scopeKey: \"scp\"\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice \/foo on securedEP {\n\n    \/\/ It is optional to override the authentication and authorization\n    \/\/ configurations at the resource levels. Otherwise, the service auth\n    \/\/ configurations will be applied automatically to the resources as well.\n    resource function get bar() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"http_service_jwt_auth.server.out", "output":"# You may need to change the certificate file path and private key file path.\nbal run http_service_jwt_auth.bal"}], "description":"\/\/ An HTTP service\/resource can be secured using JWT and by enforcing\n\/\/ authorization optionally. Then, it validates the JWT sent in the\n\/\/ `Authorization` header against the provided configurations.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s). The scope can be included\n\/\/ in the JWT using a custom claim attribute. That custom claim attribute\n\/\/ also can be configured as the `scopeKey`.<br\/>\n\/\/ In the authorization phase, the scopes of the service\/resource are compared\n\/\/ against the scope included in the JWT for at least one match between the two\n\/\/ sets.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [JWT module](https:\/\/docs.central.ballerina.io\/ballerina\/jwt\/latest\/).", "metatags":"description: BBE on how to secure HTTP service with JWT auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, auth, jwt auth"}, {"bbeName":"http-service-mutual-ssl", "resources":[{"tag":"ssl", "balFileName":"http_service_mutual_ssl.bal", "bal":"import ballerina\/http;\n\n\/\/ An HTTP listener can be configured to accept new connections that are\n\/\/ secured via mutual SSL.\n\/\/ The [`http:ListenerSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/ListenerSecureSocket) record provides the SSL-related listener configurations.\nlistener http:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        },\n        \/\/ Enables mutual SSL.\n        mutualSsl: {\n            verifyClient: http:REQUIRE,\n            cert: \"..\/resource\/path\/to\/public.crt\"\n        },\n        \/\/ Enables the preferred SSL protocol and its versions.\n        protocol: {\n            name: http:TLS,\n            versions: [\"TLSv1.2\", \"TLSv1.1\"]\n        },\n        \/\/ Configures the preferred ciphers.\n        ciphers: [\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\"]\n\n    }\n);\n\nservice \/foo on securedEP {\n    resource function get bar() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"http_service_mutual_ssl.server.out", "output":"# You may need to change the certificate file path, private key file path, and\n# trusted certificate file path.\nbal run http_service_mutual_ssl.bal"}], "description":"\/\/ Ballerina supports mutual SSL, which is a certificate-based authentication\n\/\/ process in which two parties (the client and server) authenticate each other by\n\/\/ verifying the digital certificates. It ensures that both parties are assured\n\/\/ of each other's identity.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to secure HTTP listener with mutual SSL.\nkeywords: ballerina, ballerina by example, bbe, http, mutual ssl, ssl protocols, ciphers"}, {"bbeName":"http-service-oauth2", "resources":[{"tag":"oauth2", "balFileName":"http_service_oauth2.bal", "bal":"import ballerina\/http;\n\nlistener http:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with OAuth2 authentication and can be authorized\n\/\/ optionally. OAuth2 authentication can be enabled by setting the\n\/\/ [`http:OAuth2IntrospectionConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/OAuth2IntrospectionConfig) configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@http:ServiceConfig {\n    auth: [\n        {\n            oauth2IntrospectionConfig: {\n                url: \"https:\/\/localhost:9445\/oauth2\/introspect\",\n                tokenTypeHint: \"access_token\",\n                scopeKey: \"scp\",\n                clientConfig: {\n                    customHeaders: {\"Authorization\": \"Basic YWRtaW46YWRtaW4=\"},\n                    secureSocket: {\n                        cert: \"..\/resource\/path\/to\/public.crt\"\n                    }\n                }\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice \/foo on securedEP {\n\n    \/\/ It is optional to override the authentication and authorization\n    \/\/ configurations at the resource levels. Otherwise, the service auth\n    \/\/ configurations will be applied automatically to the resources as well.\n    resource function get bar() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"http_service_oauth2.server.out", "output":"# You may need to change the certificate file path and private key file path.\nbal run http_service_oauth2.bal"}], "description":"\/\/ An HTTP service\/resource can be secured using OAuth2 and by enforcing\n\/\/ authorization optionally. Then, it validates the OAuth2 token sent in the\n\/\/ `Authorization` header against the provided configurations. This calls the\n\/\/ configured introspection endpoint to validate.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s). The scope can be included\n\/\/ in the introspection response using a custom claim attribute. That custom\n\/\/ claim attribute also can be configured as the `scopeKey`.<br\/>\n\/\/ In the authorization phase, the scopes of the service\/resource are compared\n\/\/ against the scope included in the introspection response for at least one\n\/\/ match between the two sets.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure HTTP service with OAuth2 in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, auth, oauth2, introspection"}, {"bbeName":"http-service-ssl-tls", "resources":[{"tag":"tls", "balFileName":"http_service_ssl_tls.bal", "bal":"import ballerina\/http;\n\n\/\/ An HTTP listener can be configured to communicate through HTTPS as well.\n\/\/ To secure a listener using HTTPS, the listener needs to be configured with\n\/\/ a certificate file and a private key file for the listener.\n\/\/ The [`http:ListenerSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/records\/ListenerSecureSocket) record\n\/\/ provides the SSL-related listener configurations of the listener.\nlistener http:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\nservice \/foo on securedEP {\n    resource function get bar() returns string {\n        return \"Hello, World!\";\n    }\n}", "outputFileName":"http_service_ssl_tls.server.out", "output":"# You may need to change the certificate file path and private key file path.\nbal run http_service_ssl_tls.bal"}], "description":"\/\/ You can use the HTTPS listener to connect to or interact with an HTTPS client.\n\/\/ Provide the `http:ListenerSecureSocket` configurations to the server to\n\/\/ expose an HTTPS connection.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to secure HTTP listener with SSL.\nkeywords: ballerina, ballerina by example, bbe, http, ssl, tls"}, {"bbeName":"http-streaming", "resources":[{"tag":"streaming", "balFileName":"http_streaming.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\nimport ballerina\/mime;\n\n\/\/ Creates an endpoint for the [client](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/clients\/Client).\nhttp:Client clientEndpoint = check new (\"http:\/\/localhost:9090\");\n\nservice \/'stream on new http:Listener(9090) {\n\n    resource function get fileupload() returns http:Response|error? {\n        http:Request request = new;\n\n        \/\/[Sets the file](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/classes\/Request#setFileAsPayload) as the request payload.\n        request.setFileAsPayload(\".\/files\/BallerinaLang.pdf\",\n            contentType = mime:APPLICATION_PDF);\n\n        \/\/Sends the request to the client with the file content.\n        http:Response clientResponse =\n            check clientEndpoint->post(\"\/stream\/receiver\", request);\n\n        \/\/ forward received response to caller\n        return clientResponse;\n    }\n\n    resource function post receiver(http:Caller caller,\n                                    http:Request request) returns error? {\n        \/\/[Retrieve the byte stream](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/classes\/Request#getByteStream).\n        stream<byte[], io:Error?> streamer = check request.getByteStream();\n\n        \/\/Writes the incoming stream to a file using `io:fileWriteBlocksFromStream` API by providing the file location to which the content should be written to.\n        check io:fileWriteBlocksFromStream(\n                                    \".\/files\/ReceivedFile.pdf\", streamer);\n        check streamer.close();\n        check caller->respond(\"File Received!\");\n    }\n}", "outputFileName":"http_streaming.server.out", "output":"# In the directory, which contains the `.bal` file, create a directory named `files`,\n# and add a PDF file named `BallerinaLang.pdf` in it.\nbal run http_streaming.bal"}], "description":"\/\/ Ballerina supports HTTP input and output streaming capability based on the Ballerina `stream` type.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: This BBE demonstrates the input and the output streaming capability in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, streaming"}, {"bbeName":"http-timeout", "resources":[{"tag":"timeout", "balFileName":"http_timeout.bal", "bal":"import ballerina\/http;\nimport ballerina\/lang.runtime;\n\nfinal http:Client backendClientEP = check new (\"http:\/\/localhost:8080\", {\n    \/\/ Timeout configuration.\n    timeout: 10\n});\n\n\/\/ Create an HTTP service bound to the listener endpoint.\nservice \/ on new http:Listener(9090) {\n\n    resource function get timeout() returns string|http:InternalServerError {\n        string|error response = backendClientEP->get(\"\/hello\");\n\n        \/\/ If `response` is a `string` (text\/plain), it is sent back to the\n        \/\/ client. If `response` is an `http:ClientError`, an internal\n        \/\/ server error is returned to the client.\n        if (response is string) {\n            return response;\n        } else {\n            if (response is http:IdleTimeoutError) {\n                return { body: \n                \"Request timed out. Please try again in sometime.\"};\n            } else {\n                return { body: response.message()};\n            }\n        }\n\n    }\n}\n\n\/\/ This sample service is used to mock connection timeouts.\nservice \/ on new http:Listener(8080) {\n\n    resource function get hello() returns string {\n        \/\/ Delay the response by 15 seconds to mimic the network level delays.\n        runtime:sleep(15);\n        return \"Hello World!!!\";\n    }\n}", "outputFileName":"http_timeout.server.out", "output":"bal run http_timeout.bal"}], "description":"\/\/ The Timeout is used to gracefully handle network timeouts, which occur when using the HTTP Client.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how to use an HTTP timeout in Ballerina. This will set a timeout for the requests to get a response and will return an error if a response is not returned within the given timeout.\nkeywords: ballerina, ballerina by examples, bbe, http, resiliency, timeout"}, {"bbeName":"http-trace-logs", "resources":[{"tag":"logs", "balFileName":"http_trace_logs.bal", "bal":"import ballerina\/http;\n\nservice \/hello on new http:Listener(9090) {\n\n    resource function get .(http:Request req) returns http:Response|error {\n        http:Client clientEP = check new (\"http:\/\/httpstat.us\");\n        http:Response resp = check clientEP->forward(\"\/200\", req);\n        return resp;\n    }\n}", "outputFileName":"http_trace_logs.server.out", "output":"bal run http_trace_logs.bal -- -Cballerina.http.traceLogConsole=true\nballerina: HTTP trace log enabled\n\n# In the logs, `http.downstream` refers to the HTTP traffic that flows between the client and Ballerina\n# while `http.upstream` refers to the HTTP traffic that flows between Ballerina and the backend.\n\n[2021-10-06 18:18:11,118] TRACE {http.tracelog.downstream} - [id: 0x91dfb8c7] REGISTERED\n[2021-10-06 18:18:11,151] TRACE {http.tracelog.downstream} - [id: 0x91dfb8c7, correlatedSource: n\/a, host:\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50367] ACTIVE\n[2021-10-06 18:18:11,187] TRACE {http.tracelog.downstream} - [id: 0x91dfb8c7, correlatedSource: n\/a, host:\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50367] INBOUND: DefaultHttpRequest(decodeResult: success, version: HTTP\/1.1)\nGET \/hello HTTP\/1.1\nHost: localhost:9090\nUser-Agent: curl\/7.64.1\nAccept: *\/*\n[2021-10-06 18:18:11,223] TRACE {http.tracelog.downstream} - [id: 0x91dfb8c7, correlatedSource: n\/a, host:localhost\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50367] INBOUND: EmptyLastHttpContent, 0B\n[2021-10-06 18:18:11,225] TRACE {http.tracelog.downstream} - [id: 0x91dfb8c7, correlatedSource: n\/a, host:localhost\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50367] READ COMPLETE\n[2021-10-06 18:18:11,418] TRACE {http.tracelog.upstream} - [id: 0xf7c32f4c] REGISTERED\n[2021-10-06 18:18:11,418] TRACE {http.tracelog.upstream} - [id: 0xf7c32f4c] CONNECT: httpstat.us\/172.67.134.121:80, null\n[2021-10-06 18:18:11,661] TRACE {http.tracelog.upstream} - [id: 0xf7c32f4c, correlatedSource: n\/a, host:\/192.168.1.21:50368 - remote:httpstat.us\/172.67.134.121:80] DEREGISTER\n[2021-10-06 18:18:11,664] TRACE {http.tracelog.upstream} - [id: 0xf7c32f4c, correlatedSource: n\/a, host:\/192.168.1.21:50368 - remote:httpstat.us\/172.67.134.121:80] ACTIVE\n[2021-10-06 18:18:11,665] TRACE {http.tracelog.upstream} - [id: 0xf7c32f4c, correlatedSource: n\/a, host:\/192.168.1.21:50368 - remote:httpstat.us\/172.67.134.121:80] UNREGISTERED\n[2021-10-06 18:18:11,665] TRACE {http.tracelog.upstream} - [id: 0xf7c32f4c] REGISTERED\n[2021-10-06 18:18:11,671] TRACE {http.tracelog.upstream} - [id: 0xf7c32f4c, correlatedSource: 0x91dfb8c7, host:\/192.168.1.21:50368 - remote:httpstat.us\/172.67.134.121:80] OUTBOUND: DefaultHttpRequest(decodeResult: success, version: HTTP\/1.1)\nGET \/200 HTTP\/1.1\nAccept: *\/*\nhost: httpstat.us\nuser-agent: ballerina\nconnection: keep-alive\n[2021-10-06 18:18:11,674] TRACE {http.tracelog.upstream} - [id: 0xf7c32f4c, correlatedSource: 0x91dfb8c7, host:\/192.168.1.21:50368 - remote:httpstat.us\/172.67.134.121:80] OUTBOUND: EmptyLastHttpContent, 0B\n[2021-10-06 18:18:11,675] TRACE {http.tracelog.upstream} - [id: 0xf7c32f4c, correlatedSource: 0x91dfb8c7, host:\/192.168.1.21:50368 - remote:httpstat.us\/172.67.134.121:80] FLUSH\n[2021-10-06 18:18:12,027] TRACE {http.tracelog.upstream} - [id: 0xf7c32f4c, correlatedSource: 0x91dfb8c7, host:\/192.168.1.21:50368 - remote:httpstat.us\/172.67.134.121:80] INBOUND: DefaultHttpResponse(decodeResult: success, version: HTTP\/1.1)\nHTTP\/1.1 200 OK\nDate: Wed, 06 Oct 2021 12:48:11 GMT\nContent-Type: text\/plain; charset=utf-8\nTransfer-Encoding: chunked\nConnection: keep-alive\ncache-control: private\nvary: Accept-Encoding\nx-aspnetmvc-version: 5.1\naccess-control-allow-origin: *\naccess-control-expose-headers: Link, Content-Range, Location, WWW-Authenticate, Proxy-Authenticate, Retry-After\naccess-control-expose-headers: Request-Context\nx-aspnet-version: 4.0.30319\nrequest-context: appId=cid-v1:7585021b-2db7-4da6-abff-2cf23005f0a9\nx-powered-by: ASP.NET\nset-cookie: ARRAffinity=dd9ed9b645068a439255e4a6e0a4e0f2b5c11799187f1613a5766939d04a2bc0;Path=\/;HttpOnly;Domain=httpstat.us\nCF-Cache-Status: DYNAMIC\nReport-To: {\"endpoints\":[{\"url\":\"https:\\\/\\\/a.nel.cloudflare.com\\\/report\\\/v3?s=Df0k19O1x6RNB6Uc0hwC%2BFcQZS27%2BOuWb1JATwpu15Zhvdxc3Yd465533%2BuB2PIJKEBfRrCyHSgNLMiDje2EMkli18C83LScpe4czBPDKbUV77XLGuzwGdu9oGoCpQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}\nNEL: {\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}\nServer: cloudflare\nCF-RAY: 699f00a99def15af-EWR\nalt-svc: h3=\":443\"; ma=86400, h3-29=\":443\"; ma=86400, h3-28=\":443\"; ma=86400, h3-27=\":443\"; ma=86400\n[2021-10-06 18:18:12,040] TRACE {http.tracelog.upstream} - [id: 0xf7c32f4c, correlatedSource: 0x91dfb8c7, host:\/192.168.1.21:50368 - remote:httpstat.us\/172.67.134.121:80] INBOUND: DefaultHttpContent(data: PooledSlicedByteBuf(ridx: 0, widx: 6, cap: 6\/6, unwrapped: PooledUnsafeDirectByteBuf(ridx: 1172, widx: 1177, cap: 2048)), decoderResult: success), 6B\n200 OK\n[2021-10-06 18:18:12,041] TRACE {http.tracelog.upstream} - [id: 0xf7c32f4c, correlatedSource: 0x91dfb8c7, host:\/192.168.1.21:50368 - remote:httpstat.us\/172.67.134.121:80] INBOUND: EmptyLastHttpContent, 0B\n[2021-10-06 18:18:12,043] TRACE {http.tracelog.upstream} - [id: 0xf7c32f4c, correlatedSource: 0x91dfb8c7, host:\/192.168.1.21:50368 - remote:httpstat.us\/172.67.134.121:80] READ COMPLETE\n[2021-10-06 18:18:12,046] TRACE {http.tracelog.downstream} - [id: 0x91dfb8c7, correlatedSource: n\/a, host:localhost\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50367] OUTBOUND: DefaultHttpResponse(decodeResult: success, version: HTTP\/1.1)\nHTTP\/1.1 200 OK\nDate: Wed, 06 Oct 2021 12:48:11 GMT\nContent-Type: text\/plain; charset=utf-8\nTransfer-Encoding: chunked\ncache-control: private\nvary: Accept-Encoding\nx-aspnetmvc-version: 5.1\naccess-control-allow-origin: *\naccess-control-expose-headers: Link, Content-Range, Location, WWW-Authenticate, Proxy-Authenticate, Retry-After\naccess-control-expose-headers: Request-Context\nx-aspnet-version: 4.0.30319\nrequest-context: appId=cid-v1:7585021b-2db7-4da6-abff-2cf23005f0a9\nx-powered-by: ASP.NET\nset-cookie: ARRAffinity=dd9ed9b645068a439255e4a6e0a4e0f2b5c11799187f1613a5766939d04a2bc0;Path=\/;HttpOnly;Domain=httpstat.us\nCF-Cache-Status: DYNAMIC\nReport-To: {\"endpoints\":[{\"url\":\"https:\\\/\\\/a.nel.cloudflare.com\\\/report\\\/v3?s=Df0k19O1x6RNB6Uc0hwC%2BFcQZS27%2BOuWb1JATwpu15Zhvdxc3Yd465533%2BuB2PIJKEBfRrCyHSgNLMiDje2EMkli18C83LScpe4czBPDKbUV77XLGuzwGdu9oGoCpQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}\nNEL: {\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}\nCF-RAY: 699f00a99def15af-EWR\nalt-svc: h3=\":443\"; ma=86400, h3-29=\":443\"; ma=86400, h3-28=\":443\"; ma=86400, h3-27=\":443\"; ma=86400\nserver: cloudflare\n[2021-10-06 18:18:12,048] TRACE {http.tracelog.downstream} - [id: 0x91dfb8c7, correlatedSource: n\/a, host:localhost\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50367] OUTBOUND: DefaultHttpContent(data: PooledSlicedByteBuf(ridx: 0, widx: 6, cap: 6\/6, unwrapped: PooledUnsafeDirectByteBuf(ridx: 1177, widx: 1177, cap: 2048)), decoderResult: success), 6B\n200 OK\n[2021-10-06 18:18:12,049] TRACE {http.tracelog.downstream} - [id: 0x91dfb8c7, correlatedSource: n\/a, host:localhost\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50367] FLUSH\n[2021-10-06 18:18:12,054] TRACE {http.tracelog.downstream} - [id: 0x91dfb8c7, correlatedSource: n\/a, host:localhost\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50367] OUTBOUND: DefaultLastHttpContent(data: UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf(ridx: 0, widx: 0, cap: 0), decoderResult: success), 0B\n[2021-10-06 18:18:12,055] TRACE {http.tracelog.downstream} - [id: 0x91dfb8c7, correlatedSource: n\/a, host:localhost\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50367] FLUSH\n[2021-10-06 18:18:12,057] TRACE {http.tracelog.downstream} - [id: 0x91dfb8c7, correlatedSource: n\/a, host:localhost\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50367] READ COMPLETE\n[2021-10-06 18:18:12,058] TRACE {http.tracelog.downstream} - [id: 0x91dfb8c7, correlatedSource: n\/a, host:localhost\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50367] INACTIVE\n[2021-10-06 18:18:12,061] TRACE {http.tracelog.downstream} - [id: 0x91dfb8c7, correlatedSource: n\/a, host:localhost\/0:0:0:0:0:0:0:1:9090 - remote:\/0:0:0:0:0:0:0:1:50367] UNREGISTERED"}], "description":"\/\/ The HTTP trace logs can be used to monitor the HTTP traffic that goes in and out of Ballerina.\n\/\/ To enable trace logs, the log level has to be set to `TRACE` using the runtime argument:\n\/\/ <br> `-Cballerina.http.traceLogConsole=true`. <br>\n\/\/ The configurations can be set in the `Config.toml` file for advanced use cases such as specifying the file path\n\/\/ to save the trace logs and specifying the hostname and port of a socket service to publish the trace logs.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [HTTP module](https:\/\/docs.central.ballerina.io\/ballerina\/http\/latest\/).", "metatags":"description: BBE on how trace logs can be used to monitor the HTTP traffic in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, http, trace logs"}, {"bbeName":"identifiers", "resources":[{"tag":"identifiers", "balFileName":"identifiers.bal", "bal":"import ballerina\/io;\n\n\/\/ You can have Unicode identifiers.\nfunction ?????????(string ????) {\n    \/\/ Use \\u{H} to specify character using Unicode code point in hex.\n   io:println(???\\u{E2D});\n\n}\n\n\/\/ Prefix reserved keywords with a single quote.\nstring 'from = \"contact@ballerina.io\";\n\n\/\/ Prefix non-identifier character with a \\.\nstring first\\ name = \"Ballerina\";\n\npublic function main() {\n    ?????????(\"????????\");\n}", "outputFileName":"identifiers.out", "output":"bal run identifiers.bal\n????????"}], "description":"// Identifier syntax is similar to C. Keywords are reserved. ", "metatags":"description: This BBE introduces identifiers in Ballerina.\nkeywords:  ballerina, ballerina by example, bbe, identifiers"}, {"bbeName":"io-bytes", "resources":[{"tag":"bytes", "balFileName":"io_bytes.bal", "bal":"import ballerina\/io;\n\npublic function main() returns error? {\n    \/\/ Initializes the image paths.\n    string imagePath = \".\/files\/ballerina.jpg\";\n    string imageCopyPath1 = \".\/files\/ballerinaCopy1.jpg\";\n    string imageCopyPath2 = \".\/files\/ballerinaCopy2.jpg\";\n\n    \/\/ Reads the file content as a byte array using the given file path.\n    byte[] bytes = check io:fileReadBytes(imagePath);\n    \/\/ Writes the already-read content to the given destination file.\n    check io:fileWriteBytes(imageCopyPath1, bytes);\n    io:println(\"Successfully copied the image as a byte array.\");\n\n    \/\/ Reads the file as a stream of blocks. The default block size is 4KB.\n    \/\/ Here, the default size is overridden by the value 2KB.\n    stream<io:Block, io:Error?> blockStream = check\n    io:fileReadBlocksAsStream(imagePath, 2048);\n    \/\/ If the file reading was successful, then,\n    \/\/ the content will be written to the given destination file using the given stream.\n    check io:fileWriteBlocksFromStream(imageCopyPath2, blockStream);\n    io:println(\"Successfully copied the image as a stream.\");\n}", "outputFileName":"io_bytes.out", "output":"# In the directory, which contains the `.bal` file, create a directory named `files`,\n# and add an image file named `ballerina.jpg` in it as follows.\n# tree .\n# ??? files\n# ?   ??? ballerina.jpeg\n# ??? io_bytes.bal\nbal run io_bytes.bal\nSuccessfully copied the image as a byte array.\nSuccessfully copied the image as a stream."}], "description":"\/\/ This example demonstrates how bytes can be read and written through the I\/O APIs.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [IO module](https:\/\/docs.central.ballerina.io\/ballerina\/io\/latest\/).", "metatags":"description: BBE on how to read\/write from\/to a bytes file.\nkeywords: ballerina, ballerina by examples, bbe, bytes"}, {"bbeName":"io-csv", "resources":[{"tag":"csv", "balFileName":"io_csv.bal", "bal":"import ballerina\/io;\n\npublic function main() returns error? {\n    \/\/ Initializes the CSV file path and content.\n    string csvFilePath1 = \".\/files\/csvFile1.csv\";\n    string csvFilePath2 = \".\/files\/csvFile2.csv\";\n    string[][] csvContent = [[\"1\", \"James\", \"10000\"], [\"2\", \"Nathan\", \"150000\"],\n    [\"3\", \"Ronald\", \"120000\"], [\"4\", \"Roy\", \"6000\"],\n    [\"5\", \"Oliver\", \"1100000\"]];\n\n    \/\/ Writes the given content string[][] to a CSV file.\n    check io:fileWriteCsv(csvFilePath1, csvContent);\n    \/\/ If the write operation was successful, then, performs a read operation to read the CSV content as a string array of arrays.\n    string[][] readCsv = check io:fileReadCsv(csvFilePath1);\n    io:println(readCsv);\n\n    \/\/ Writes the given content stream to a CSV file.\n    check io:fileWriteCsvFromStream(csvFilePath2, csvContent.toStream());\n    \/\/ If the write operation was successful, then, perform a read operation to read the CSV content as a stream.\n    stream<string[], io:Error?> csvStream = check\n                                        io:fileReadCsvAsStream(csvFilePath2);\n    \/\/ Iterates through the stream and prints the content.\n    check csvStream.forEach(function(string[] val) {\n                              io:println(val);\n                          });\n}", "outputFileName":"io_csv.out", "output":"bal run io_csv.bal\n[[\"1\",\"James\",\"10000\"],[\"2\",\"Nathan\",\"150000\"],[\"3\",\"Ronald\",\"120000\"],[\"4\",\"Roy\",\"6000\"],[\"5\",\"Oliver\",\"1100000\"]]\n[\"1\",\"James\",\"10000\"]\n[\"2\",\"Nathan\",\"150000\"]\n[\"3\",\"Ronald\",\"120000\"]\n[\"4\",\"Roy\",\"6000\"]\n[\"5\",\"Oliver\",\"1100000\"]"}], "description":"\/\/ This sample demonstrates how to read\/write from\/to a CSV file using the CSV channel of the I\/O API.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [IO module](https:\/\/docs.central.ballerina.io\/ballerina\/io\/latest\/).", "metatags":"description: BBE on how to read\/write from\/to a CSV file.\nkeywords: ballerina, ballerina by examples, bbe, csv, table"}, {"bbeName":"io-json", "resources":[{"tag":"json", "balFileName":"io_json.bal", "bal":"import ballerina\/io;\n\npublic function main() returns error? {\n    \/\/ Initializes the JSON file path and content.\n    string jsonFilePath = \".\/files\/jsonFile.json\";\n    json jsonContent = {\"Store\": {\n            \"@id\": \"AST\",\n            \"name\": \"Anne\",\n            \"address\": {\n                \"street\": \"Main\",\n                \"city\": \"94\"\n            },\n            \"codes\": [\"4\", \"8\"]\n        }};\n\n    \/\/ Writes the given JSON to a file.\n    check io:fileWriteJson(jsonFilePath, jsonContent);\n    \/\/ If the write operation was successful, then, performs a read operation to read the JSON content.\n    json readJson = check io:fileReadJson(jsonFilePath);\n    io:println(readJson);\n}", "outputFileName":"io_json.out", "output":"bal run io_json.bal\n{\"Store\":{\"@id\":\"AST\",\"name\":\"Anne\",\"address\":{\"street\":\"Main\",\"city\":\"94\"},\"codes\":[\"4\",\"8\"]}}"}], "description":"\/\/ This sample demonstrates how to read JSON content from a file and write JSON content\n\/\/ to a file using the character channel, `readJson()`, and `writeJson()` of the I\/O API.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [IO module](https:\/\/docs.central.ballerina.io\/ballerina\/io\/latest\/).", "metatags":"description: BBE on how to read\/write from\/to a JSON file.\nkeywords: ballerina, ballerina by examples, bbe, json"}, {"bbeName":"io-strings", "resources":[{"tag":"strings", "balFileName":"io_strings.bal", "bal":"import ballerina\/io;\n\npublic function main() returns error? {\n    \/\/ Initializes the text path and the content.\n    string textFilePath1 = \".\/files\/textfile1.txt\";\n    string textFilePath2 = \".\/files\/textfile2.txt\";\n    string textFilePath3 = \".\/files\/textfile3.txt\";\n    string textContent = \"Ballerina is an open source programming language.\";\n    string[] lines = [\"The Big Bang Theory\", \"F.R.I.E.N.D.S\",\n    \"Game of Thrones\", \"LOST\"];\n\n    \/\/ Writes the given string to a file.\n    check io:fileWriteString(textFilePath1, textContent);\n    \/\/ If the write operation was successful, then, reads the content as a string.\n    string readContent = check io:fileReadString(textFilePath1);\n    io:println(readContent);\n\n    \/\/ Writes the given array of lines to a file.\n    check io:fileWriteLines(textFilePath2, lines);\n    \/\/ If the write operation was successful, then, performs a read operation to read the lines as an array.\n    string[] readLines = check io:fileReadLines(textFilePath2);\n    io:println(readLines);\n\n    \/\/ Writes the given stream of lines to a file.\n    check io:fileWriteLinesFromStream(textFilePath3, lines.toStream());\n    \/\/ If the write operation was successful, then, performs a read operation to read the lines as a stream.\n    stream<string, io:Error?> lineStream = check\n                                    io:fileReadLinesAsStream(textFilePath3);\n    \/\/ Iterates through the stream and prints the content.\n    check lineStream.forEach(function(string val) {\n                               io:println(val);\n                           });\n}", "outputFileName":"io_strings.out", "output":"bal run io_strings.bal\nBallerina is an open source programming language.\n[\"The Big Bang Theory\",\"F.R.I.E.N.D.S\",\"Game of Thrones\",\"LOST\"]\nThe Big Bang Theory\nF.R.I.E.N.D.S\nGame of Thrones\nLOST"}], "description":"\/\/ This demonstrates how string could be read and written through I\/O APIs.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [IO module](https:\/\/docs.central.ballerina.io\/ballerina\/io\/latest\/).", "metatags":"description: BBE on how to read\/write from\/to a text file.\nkeywords: ballerina, ballerina by examples, bbe, text, strings"}, {"bbeName":"io-xml", "resources":[{"tag":"xml", "balFileName":"io_xml.bal", "bal":"import ballerina\/io;\n\npublic function main() returns error? {\n    \/\/ Initializes the XML file path and content.\n    string xmlFilePath = \".\/files\/xmlFile.xml\";\n    xml xmlContent = xml `<book>The Lost World<\/book>`;\n\n    \/\/ Writes the given XML to a file.\n    check io:fileWriteXml(xmlFilePath, xmlContent);\n    \/\/ If the write operation was successful, then, performs a read operation to read the XML content.\n    xml readXml = check io:fileReadXml(xmlFilePath);\n    io:println(readXml);\n}", "outputFileName":"io_xml.out", "output":"bal run io_xml.bal\n<book>The Lost World<\/book>"}], "description":"\/\/ This example demonstrates how XML content can be read from a file and written\n\/\/ to a file using a character channel and the `readXml()` and `writeXml()` functions of the I\/O API.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [IO module](https:\/\/docs.central.ballerina.io\/ballerina\/io\/latest\/).", "metatags":"description: BBE on how to read\/write from\/to an XML file.\nkeywords: ballerina, ballerina by examples, bbe, xml"}, {"bbeName":"isolated-functions", "resources":[{"tag":"functions", "balFileName":"isolated_functions.bal", "bal":"import ballerina\/io;\n\ntype R record {\n    int v;\n};\n\nfinal int N = getN();\n\nfunction getN() returns int {\n    return 100;\n}\n\n\/\/ Can access mutable state that is passed as a parameter.\nisolated function set(R r) returns R {\n    \/\/ Can access non-`isolated` module-level state only if the variable\n    \/\/ is `final` and the type is a subtype of `readonly` or\n    \/\/ `isolated object {}`.\n    r.v = N;\n\n    return r;\n}\n\nR r = {v: 0};\n\n\/\/ This is not an `isolated` function.\nfunction setGlobal(int n) {\n\n    r.v = n;\n}\n\npublic function main() {\n    setGlobal(200);\n    io:println(r);\n    io:println(set(r));\n}", "outputFileName":"isolated_functions.out", "output":"bal run isolated_functions.bal\n{\"v\":200}\n{\"v\":100}"}], "description":"\/\/ A call to an `isolated` function is concurrency-safe if it is called with arguments\n\/\/ that are safe at least until the call returns. <br><\/br>\n\/\/ A function defined as `isolated`:\n\/\/ <ul>\n\/\/ <li>has access to mutable state only through its parameters<\/li>\n\/\/ <li>has unrestricted access to immutable state<\/li>\n\/\/ <li>can only call functions that are `isolated`<\/li>\n\/\/ <\/ul>\n\/\/ <br><\/br>\n\/\/ <p>Constraints are enforced at compile-time. `isolated` is a part of the function type.\n\/\/ Weaker concept than pure function.<\/p>", "metatags":"description: This BBE introduces isolated functions in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, isolated functions, concurrency safety"}, {"bbeName":"isolated-methods", "resources":[{"tag":"methods", "balFileName":"isolated_methods.bal", "bal":"import ballerina\/io;\n\nclass EvenNumber {\n    int i = 1;\n\n    \/\/ `isolated` method.\n    isolated function generate() returns int {\n\n        lock {\n            \/\/ Uses `self` to access mutable field `i`\n            \/\/ within a `lock` statement.\n            return self.i * 2;\n\n        }\n    }\n}\n\npublic function main() {\n    EvenNumber e = new;\n    int c = e.generate();\n    io:println(c);\n}", "outputFileName":"isolated_methods.out", "output":"bal run isolated_methods.bal\n2"}], "description":"\/\/ Object methods can be `isolated`. An `isolated` method is same as an `isolated` function with\n\/\/ `self` treated as a parameter. An `isolated` method call is concurrency-safe if both the object\n\/\/ is safe and the arguments are safe. This is not quite enough for service concurrency: when\n\/\/ a `listener` makes calls to a `remote` or `resource` method,\n\/\/ <ul>\n\/\/ <li>it can ensure the safety of arguments it passes<\/li>\n\/\/ <li>it has no way to ensure the safety of the object itself (since the object may have fields)<\/li>\n\/\/ <\/ul>", "metatags":"description: This BBE introduces isolated methods in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, isolated methods"}, {"bbeName":"isolated-objects", "resources":[{"tag":"objects", "balFileName":"isolated_objects.bal", "bal":"import ballerina\/io;\n\n\/\/ An `isolated` object’s mutable state is `isolated` from the\n\/\/ rest of the program.\nisolated class Counter {\n    \/\/ `n` is a mutable field.\n    private int n = 0;\n\n    isolated function get() returns int {\n        lock {\n            \/\/ `n` can only be accessed using `self`.\n            return self.n;\n\n        }\n    }\n\n    isolated function inc() {\n        lock {\n            self.n += 1;\n        }\n    }\n}\n\npublic function main() {\n    \/\/ The object’s mutable state is accessible only via the\n    \/\/ object itself making it an “isolated root”.\n    Counter c = new;\n\n    c.inc();\n    int v = c.get();\n    io:println(v);\n}", "outputFileName":"isolated_objects.out", "output":"bal run isolated_objects.bal\n1"}], "description":"\/\/ An object defined as `isolated` is similar to a module with `isolated` module-level variables.\n\/\/ Mutable fields of an `isolated` object,\n\/\/ <ul>\n\/\/ <li>must be `private` and so can only be accessed using `self`<\/li>\n\/\/ <li>must be initialized with an `isolated` expression<\/li>\n\/\/ <li>must only be accessed within a `lock` statement<\/li>\n\/\/ <li>`lock` statement must follow the same rules for `self` as for an `isolated` variable<\/li>\n\/\/ <li>field is mutable unless it is `final` and has type that is subtype of `readonly`<\/li>\n\/\/ <\/ul>\n\/\/ <br><\/br>\n\/\/ <p>Isolated root concept treats `isolated` objects as opaque. Isolated functions can access a `final`\n\/\/ variable whose type is an `isolated` object.<\/p>", "metatags":"description: This BBE introduces isolated objects in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, isolated objects"}, {"bbeName":"isolated-variables", "resources":[{"tag":"variables", "balFileName":"isolated_variables.bal", "bal":"import ballerina\/io;\n\n\/\/ Initializes an `isolated` variable using\n\/\/ an `isolated` expression.\nisolated int[] stack = [];\n\nisolated function push(int n) {\n    \/\/ Accesses `isolated` variable within a\n    \/\/ `lock` statement.\n    lock {\n        stack.push(n);\n    }\n\n}\n\nisolated function pop() returns int {\n    lock {\n        return stack.pop();\n    }\n}\n\npublic function main() {\n    push(10);\n    push(20);\n    io:println(pop());\n}", "outputFileName":"isolated_variables.out", "output":"bal run isolated_variables.bal\n20"}], "description":"\/\/ When a variable is declared as `isolated`, compiler guarantees that it is an `isolated` root and\n\/\/ accessed only within a `lock` statement. An `isolated` variable declaration must be at module-level,\n\/\/ not public, and initialized with an `isolated` expression. A `lock` statement that accesses an\n\/\/ `isolated` variable must maintain `isolated` root invariant:\n\/\/ <ul>\n\/\/ <li>access only one `isolated` variable<\/li>\n\/\/ <li>access only one `isolated` variable<\/li>\n\/\/ <li>call only `isolated` functions<\/li>\n\/\/ <li>transfers of values in and out must use `isolated` expressions<\/li>\n\/\/ <\/ul>\n\/\/ <br><\/br>\n\/\/ <p>The `isolated` functions are allowed to access `isolated` module-level variables,\n\/\/ provided they follow the above rules.<\/p>", "metatags":"description: This BBE introduces isolated variables in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, isolated variables"}, {"bbeName":"jdbc-atomic-batch-execute-operation", "resources":[{"tag":"operation", "balFileName":"jdbc_atomic_batch_execute_operation.bal", "bal":"import ballerina\/io;\nimport ballerinax\/java.jdbc;\nimport ballerina\/sql;\n\npublic function main() returns error? {\n    \/\/ Initializes the JDBC client.\n    jdbc:Client jdbcClient = check new (\"jdbc:h2:file:.\/target\/bbes\/java_jdbc\", \n        \"rootUser\", \"rootPass\");\n    \/\/ Runs the prerequisite setup for the example.\n    check beforeExample(jdbcClient);\n\n    \/\/ Records with the duplicate `registrationID` entry. Here it is registrationID = 1.\n    var insertRecords = [\n        {\n            firstName: \"Linda\",\n            lastName: \"Jones\",\n            registrationID: 2,\n            creditLimit: 10000.75,\n            country: \"USA\"\n        }, \n        {\n            firstName: \"Peter\",\n            lastName: \"Stuart\",\n            registrationID: 1,\n            creditLimit: 5000.75,\n            country: \"USA\"\n        }, \n        {\n            firstName: \"Camellia\",\n            lastName: \"Potter\",\n            registrationID: 4,\n            creditLimit: 2000.25,\n            country: \"USA\"\n        }\n    ];\n\n    \/\/ Creates a batch parameterized query.\n    sql:ParameterizedQuery[] insertQueries = \n        from var data in insertRecords\n        select `INSERT INTO Customers\n                (firstName, lastName, registrationID, creditLimit, country)\n                VALUES (${data.firstName}, ${data.lastName},\n                ${data.registrationID}, ${data.creditLimit}, ${data.country})`;\n\n    \/\/ The transaction block can be used to roll back if any error occurred.\n    transaction {\n        var result = jdbcClient->batchExecute(insertQueries);\n        if result is sql:BatchExecuteError {\n            io:println(result.message());\n            io:println(result.detail()?.executionResults);\n            io:println(\"Rollback transaction.\\n\");\n            rollback;\n        } else {\n            error? err = commit;\n            if err is error {\n                io:println(\"Error occurred while committing: \", err);\n            }\n        }\n    }\n\n    \/\/ Checks the data after the batch execution.\n    stream<record {}, error?> resultStream =\n        jdbcClient->query(`SELECT * FROM Customers`);\n\n    io:println(\"Data in Customers table:\");\n    check resultStream.forEach(function(record {} result) {\n        io:println(result.toString());\n    });\n\n    \/\/ Performs the cleanup after the example.\n    check afterExample(jdbcClient);\n}\n\n\/\/ Initializes the database as a prerequisite to the example.\nfunction beforeExample(jdbc:Client jdbcClient) returns sql:Error? {\n    \/\/ Creates a table in the database.\n    _ = check jdbcClient->execute(`CREATE TABLE Customers(customerId INTEGER\n            NOT NULL IDENTITY, firstName  VARCHAR(300), lastName  VARCHAR(300),\n            registrationID INTEGER UNIQUE, creditLimit DOUBLE,\n            country VARCHAR(300), PRIMARY KEY (customerId))`);\n\n    \/\/ Adds records to the newly-created table.\n    _ = check jdbcClient->execute(`INSERT INTO Customers (firstName,\n            lastName, registrationID,creditLimit,country) VALUES ('Peter',\n            'Stuart', 1, 5000.75, 'USA')`);\n}\n\n\/\/ Cleans up the database after running the example.\nfunction afterExample(jdbc:Client jdbcClient) returns sql:Error? {\n    \/\/ Cleans the database.\n    _ = check jdbcClient->execute(`DROP TABLE Customers`);\n    \n    \/\/ Closes the JDBC client.\n    check jdbcClient.close();\n}", "outputFileName":"jdbc_atomic_batch_execute_operation.out", "output":"# Create a Ballerina project.\n# Copy the example to the project and add relevant database driver jar details to the `Ballerina.toml` file.\n# Execute the command below to build and run the project.\nbal run\n\nError while executing batch command starting with: 'INSERT INTO Customers\n                (firstName, lastName, registrationID, creditLimit, country)\n                VALUES ( ? ,  ? ,\n                 ? ,  ? ,  ? )'.Unique index or primary key violation: \"PUBLIC.CONSTRAINT_INDEX_6 ON PUBLIC.CUSTOMERS(REGISTRATIONID) VALUES 1\"; SQL statement:\nINSERT INTO Customers\n                (firstName, lastName, registrationID, creditLimit, country)\n                VALUES ( ? ,  ? ,\n                 ? ,  ? ,  ? ) [23505-199].\n[{\"affectedRowCount\":1,\"lastInsertId\":null},{\"affectedRowCount\":-3,\"lastInsertId\":null},{\"affectedRowCount\":1,\"lastInsertId\":null}]\nRollback transaction.\n\nData in Customers table:\n{\"CUSTOMERID\":1,\"FIRSTNAME\":\"Peter\",\"LASTNAME\":\"Stuart\",\"REGISTRATIONID\":1,\"CREDITLIMIT\":5000.75,\"COUNTRY\":\"USA\"}"}], "description":"\/\/ This BBE demonstrates how to use the JDBC client to execute a batch of\n\/\/ DDL\/DML operations with the help of a `transaction` to achieve the atomic behaviour.\n\/\/ Note that the relevant database driver JAR should be defined in the `Ballerina.toml`\n\/\/ file as a dependency. \n\/\/ This sample is based on an H2 database and the H2 database driver JAR need to be added to `Ballerina.toml` file.\n\/\/ For a sample configuration and more information on the underlying module, see the [JDBC module](https:\/\/docs.central.ballerina.io\/ballerinax\/java.jdbc\/latest\/) <br><br>", "metatags":"description: This BBE demonstrates how to use the JDBC client to execute a batch of DDL\/DML operations inside a transaction block in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, jdbc, insert, update, delete, batch update, transaction"}, {"bbeName":"jdbc-batch-execute-operation", "resources":[{"tag":"operation", "balFileName":"jdbc_batch_execute_operation.bal", "bal":"import ballerina\/io;\nimport ballerinax\/java.jdbc;\nimport ballerina\/sql;\n\npublic function main() returns error? {\n    \/\/ Initializes the JDBC client.\n    jdbc:Client jdbcClient = check new (\"jdbc:h2:file:.\/target\/bbes\/java_jdbc\", \n        \"rootUser\", \"rootPass\");\n    \/\/ Runs the prerequisite setup for the example.\n    check beforeExample(jdbcClient);\n\n    \/\/ The records to be inserted.\n    var insertRecords = [\n        {\n            firstName: \"Peter\",\n            lastName: \"Stuart\",\n            registrationID: 1,\n            creditLimit: 5000.75,\n            country: \"USA\"\n        }, \n        {\n            firstName: \"Stephanie\",\n            lastName: \"Mike\",\n            registrationID: 2,\n            creditLimit: 8000.00,\n            country: \"USA\"\n        }, \n        {\n            firstName: \"Bill\",\n            lastName: \"John\",\n            registrationID: 3,\n            creditLimit: 3000.25,\n            country: \"USA\"\n        }\n    ];\n\n    \/\/ Creates a batch parameterized query.\n    sql:ParameterizedQuery[] insertQueries = \n        from var data in insertRecords\n        select `INSERT INTO Customers\n                (firstName, lastName, registrationID, creditLimit, country)\n                VALUES (${data.firstName}, ${data.lastName},\n                ${data.registrationID}, ${data.creditLimit}, ${data.country})`;\n\n    \/\/ Inserts the records with the auto-generated ID.\n    sql:ExecutionResult[] result = \n                            check jdbcClient->batchExecute(insertQueries);\n\n    int[] generatedIds = [];\n    foreach var summary in result {\n        generatedIds.push(<int>summary.lastInsertId);\n    }\n    io:println(\"\\nInsert success, generated IDs are: \", generatedIds, \"\\n\");\n\n    \/\/ Checks the data after the batch execution.\n    stream<record {}, error?> resultStream =\n        jdbcClient->query(`SELECT * FROM Customers`);\n\n    io:println(\"Data in Customers table:\");\n    check resultStream.forEach(function(record {} result) {\n        io:println(result.toString());\n    });\n\n    \/\/ Performs the cleanup after the example.\n    check afterExample(jdbcClient);\n}\n\n\/\/ Initializes the database as a prerequisite to the example.\nfunction beforeExample(jdbc:Client jdbcClient) returns sql:Error? {\n    \/\/ Creates a table in the database.\n    _ = check jdbcClient->execute(`CREATE TABLE Customers(customerId INTEGER\n            NOT NULL IDENTITY, firstName  VARCHAR(300), lastName  VARCHAR(300),\n            registrationID INTEGER, creditLimit DOUBLE, country  VARCHAR(300),\n            PRIMARY KEY (customerId))`);\n}\n\n\/\/ Cleans up the database after running the example.\nfunction afterExample(jdbc:Client jdbcClient) returns sql:Error? {\n    \/\/ Cleans the database.\n    _ = check jdbcClient->execute(`DROP TABLE Customers`);\n    \n    \/\/ Closes the JDBC client.\n    check jdbcClient.close();\n}", "outputFileName":"jdbc_batch_execute_operation.out", "output":"# Create a Ballerina project.\n# Copy the example to the project and add relevant database driver jar details to the `Ballerina.toml` file.\n# Execute the command below to build and run the project.\nbal run\n\nInsert success, generated IDs are: [1,2,3]\n\nData in Customers table:\n{\"CUSTOMERID\":1,\"FIRSTNAME\":\"Peter\",\"LASTNAME\":\"Stuart\",\"REGISTRATIONID\":1,\"CREDITLIMIT\":5000.75,\"COUNTRY\":\"USA\"}\n{\"CUSTOMERID\":2,\"FIRSTNAME\":\"Stephanie\",\"LASTNAME\":\"Mike\",\"REGISTRATIONID\":2,\"CREDITLIMIT\":8000.0,\"COUNTRY\":\"USA\"}\n{\"CUSTOMERID\":3,\"FIRSTNAME\":\"Bill\",\"LASTNAME\":\"John\",\"REGISTRATIONID\":3,\"CREDITLIMIT\":3000.25,\"COUNTRY\":\"USA\"}"}], "description":"\/\/ This BBE demonstrates how to use the JDBC client to execute a batch of\n\/\/ DDL\/DML operations. Note that the relevant database driver JAR\n\/\/ should be defined in the `Ballerina.toml` file as a dependency. \n\/\/ This sample is based on an H2 database and the H2 database driver JAR need to be added to the `Ballerina.toml` file.\n\/\/ For a sample configuration and more information on the underlying module, see the [JDBC module](https:\/\/docs.central.ballerina.io\/ballerinax\/java.jdbc\/latest\/).<br><br>", "metatags":"description: This BBE demonstrates how to use the JDBC client to execute a batch of DDL\/DML operations in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, jdbc, insert, update, delete, batch update"}, {"bbeName":"jdbc-complex-type-queries", "resources":[{"tag":"queries", "balFileName":"jdbc_complex_type_queries.bal", "bal":"import ballerina\/io;\nimport ballerinax\/java.jdbc;\nimport ballerina\/sql;\nimport ballerina\/time;\n\n\/\/ The `BinaryType` record to represent the `BINARY_TYPES` database table.\ntype BinaryType record {|\n    int row_id;\n    byte[] blob_type;\n    string clob_type;\n    byte[] binary_type;\n|};\n\n\/\/ The `ArrayType` record to represent the `ARRAY_TYPES` database table.\ntype ArrayType record {|\n    int row_id;\n    int[] int_array;\n    int[] long_array;\n    decimal[] float_array;\n    float[] double_array;\n    boolean[] boolean_array;\n    string[] string_array;\n|};\n\n\/\/ The `DateTimeType` record to represent the `DATE_TIME_TYPES` database table.\ntype DateTimeType record {|\n    int row_id;\n    string date_type;\n    int time_type;\n    time:Utc timestamp_type;\n    string datetime_type;\n|};\n\npublic function main() returns error? {\n    \/\/ Initializes the JDBC client.\n    jdbc:Client jdbcClient = check new (\"jdbc:h2:file:.\/target\/bbes\/java_jdbc\",\n        \"rootUser\", \"rootPass\");\n    \/\/ Runs the prerequisite setup for the example.\n    check beforeExample(jdbcClient);\n\n    \/\/ Since the `rowType` is provided as a `BinaryType`, the `binaryResultStream`\n    \/\/ will have `BinaryType` records.\n    stream<BinaryType, error?> binaryResultStream =\n                jdbcClient->query(`SELECT * FROM BINARY_TYPES`);\n\n    io:println(\"Binary types Result :\");\n    \/\/ Iterates the `binaryResultStream`.\n    check binaryResultStream.forEach(function(BinaryType result) {\n        io:println(result);\n    });\n\n    \/\/ Since the `rowType` is provided as an `ArrayType`, the `arrayResultStream` will\n    \/\/ have `ArrayType` records.\n    stream<ArrayType, error?> arrayResultStream =\n                jdbcClient->query(`SELECT * FROM ARRAY_TYPES`);\n\n    io:println(\"Array types Result :\");\n    \/\/ Iterates the `arrayResultStream`.\n    check arrayResultStream.forEach(function(ArrayType result) {\n        io:println(result);\n    });\n\n    \/\/ Since the `rowType` is provided as a `DateTimeType`, the `dateResultStream`\n    \/\/ will have `DateTimeType` records. The `Date`, `Time`, `DateTime`, and\n    \/\/ `Timestamp` fields of the database table can be mapped to `time:Utc`,\n    \/\/ string, and int types in Ballerina.\n    stream<DateTimeType, error?> dateResultStream =\n                jdbcClient->query(`SELECT * FROM DATE_TIME_TYPES`);\n\n    io:println(\"DateTime types Result :\");\n    \/\/ Iterates the `dateResultStream`.\n    check dateResultStream.forEach(function(DateTimeType result) {\n        io:println(result);\n    });\n\n    \/\/ Performs the cleanup after the example.\n    check afterExample(jdbcClient);\n}\n\n\/\/ Initializes the database as a prerequisite to the example.\nfunction beforeExample(jdbc:Client jdbcClient) returns sql:Error? {\n    \/\/ Creates complex data type tables in the database.\n    _ = check jdbcClient->execute(`CREATE TABLE BINARY_TYPES (row_id\n            INTEGER NOT NULL, blob_type BLOB(1024), clob_type CLOB(1024), \n            binary_type BINARY(27), PRIMARY KEY (row_id))`);\n    _ = check jdbcClient->execute(`CREATE TABLE ARRAY_TYPES (row_id\n            INTEGER NOT NULL, int_array ARRAY, long_array ARRAY, \n            float_array ARRAY, double_array ARRAY, boolean_array ARRAY, \n            string_array ARRAY, PRIMARY KEY (row_id))`);\n    _ = check jdbcClient->execute(`CREATE TABLE DATE_TIME_TYPES(row_id\n            INTEGER NOT NULL, date_type DATE, time_type TIME, \n            timestamp_type timestamp, datetime_type  datetime, \n            PRIMARY KEY (row_id))`);\n\n    \/\/ Adds the records to the newly-created tables.\n    _ = check jdbcClient->execute(`INSERT INTO BINARY_TYPES (row_id,\n            blob_type, clob_type, binary_type) VALUES (1, \n            X'77736F322062616C6C6572696E6120626C6F6220746573742E', \n            CONVERT('very long text', CLOB), \n            X'77736F322062616C6C6572696E612062696E61727920746573742E')`);\n    _ = check jdbcClient->execute(`INSERT INTO ARRAY_TYPES (row_id,\n            int_array, long_array, float_array, double_array, boolean_array, \n            string_array) VALUES (1, (1, 2, 3), (100000000, 200000000, \n            300000000), (245.23, 5559.49, 8796.123), (245.23, 5559.49, \n            8796.123), (TRUE, FALSE, TRUE), ('Hello', 'Ballerina'))`);\n    _ = check jdbcClient->execute(`Insert into DATE_TIME_TYPES (row_id,\n            date_type, time_type, timestamp_type, datetime_type) values (1, \n            '2017-05-23', '14:15:23', '2017-01-25 16:33:55', \n            '2017-01-25 16:33:55')`);\n}\n\n\/\/ Cleans up the database after running the example.\nfunction afterExample(jdbc:Client jdbcClient) returns sql:Error? {\n    \/\/ Cleans the database.\n    _ = check jdbcClient->execute(`DROP TABLE BINARY_TYPES`);\n    _ = check jdbcClient->execute(`DROP TABLE ARRAY_TYPES`);\n    _ = check jdbcClient->execute(`DROP TABLE DATE_TIME_TYPES`);\n    \/\/ Closes the JDBC client.\n    check jdbcClient.close();\n}", "outputFileName":"jdbc_complex_type_queries.out", "output":"# Create a Ballerina project.\n# Copy the example to the project and add relevant database driver jar details to the `Ballerina.toml` file.\n# Execute the command below to build and run the project.\nbal run\n\nBinary types Result :\n{\"row_id\":1,\"blob_type\":[119,115,111,50,32,98,97,108,108,101,114,105,110,97,32,98,108,111,98,32,116,101,115,116,46],\"clob_type\":\"very long text\",\"binary_type\":[119,115,111,50,32,98,97,108,108,101,114,105,110,97,32,98,105,110,97,114,121,32,116,101,115,116,46]}\nArray types Result :\n{\"row_id\":1,\"int_array\":[1,2,3],\"long_array\":[100000000,200000000,300000000],\"float_array\":[245.23,5559.49,8796.123],\"double_array\":[245.23,5559.49,8796.123],\"boolean_array\":[true,false,true],\"string_array\":[\"Hello\",\"Ballerina\"]}\nDateTime types Result :\n{\"row_id\":1,\"date_type\":\"2017-05-23\",\"time_type\":31523000,\"timestamp_type\":1485342235 0,\"datetime_type\":\"2017-01-25 16:33:55.0\"}"}], "description":"\/\/ This BBE demonstrates how to use the JDBC client with complex data types\n\/\/ such as arrays, binary, blobs, clob, and date\/time fields. Note that the\n\/\/ relevant database driver JAR should be defined in the `Ballerina.toml` file as a dependency.\n\/\/ This sample is based on an H2 database and the H2 database driver JAR need to be added to `Ballerina.toml` file.\n\/\/ For a sample configuration and more information on the underlying module, see the [JDBC module](https:\/\/docs.central.ballerina.io\/ballerinax\/java.jdbc\/latest\/).<br><br>", "metatags":"description: This BBE on the use of JDBC client with complex data types such as arrays, binary, blobs, clob, and date\/time fields in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, jdbc, datatype, blobs, date, time"}, {"bbeName":"jdbc-execute-operation", "resources":[{"tag":"operation", "balFileName":"jdbc_execute_operation.bal", "bal":"import ballerina\/io;\nimport ballerinax\/java.jdbc;\nimport ballerina\/sql;\n\npublic function main() returns error? {\n    \/\/ Initializes the JDBC client.\n    jdbc:Client jdbcClient = check new (\"jdbc:h2:file:.\/target\/bbes\/java_jdbc\", \n        \"rootUser\", \"rootPass\");\n    \/\/ Runs the prerequisite setup for the example.\n    check beforeExample(jdbcClient);\n\n    float newCreditLimit = 15000.5;\n\n    \/\/ Creates a parameterized query for the record update.\n    sql:ParameterizedQuery updateQuery = \n            `UPDATE Customers SET creditLimit = ${newCreditLimit} \n            where customerId = 1`;\n\n    sql:ExecutionResult result = check jdbcClient->execute(updateQuery);\n    io:println(\"Updated Row count: \", result?.affectedRowCount);\n\n    string firstName = \"Dan\";\n\n    \/\/ Creates a parameterized query for deleting the records.\n    sql:ParameterizedQuery deleteQuery = \n            `DELETE FROM Customers WHERE firstName = ${firstName}`;\n\n    result = check jdbcClient->execute(deleteQuery);\n    io:println(\"Deleted Row count: \", result.affectedRowCount);\n\n    \/\/ Performs the cleanup after the example.\n    check afterExample(jdbcClient);\n}\n\n\/\/ Initializes the database as a prerequisite to the example.\nfunction beforeExample(jdbc:Client jdbcClient) returns sql:Error? {\n    \/\/Creates a table in the database.\n    sql:ExecutionResult result = \n        check jdbcClient->execute(`CREATE TABLE Customers(customerId INTEGER\n            NOT NULL IDENTITY, firstName  VARCHAR(300), lastName  VARCHAR(300),\n            registrationID INTEGER, creditLimit DOUBLE, country  VARCHAR(300),\n            PRIMARY KEY (customerId))`);\n\n    \/\/ Inserts data into the table. The result will have the `affectedRowCount`\n    \/\/ and `lastInsertedId` with the auto-generated ID of the last row.\n    result = check jdbcClient->execute(`INSERT INTO Customers (firstName,\n            lastName, registrationID,creditLimit,country) VALUES ('Peter',\n            'Stuart', 1, 5000.75, 'USA')`);\n    result = check jdbcClient->execute(`INSERT INTO Customers (firstName,\n            lastName, registrationID,creditLimit,country) VALUES\n            ('Dan', 'Brown', 2, 10000, 'UK')`);\n\n    io:println(\"Rows affected: \", result.affectedRowCount);\n    io:println(\"Generated Customer ID: \", result.lastInsertId);\n}\n\n\/\/ Cleans up the database after running the example.\nfunction afterExample(jdbc:Client jdbcClient) returns sql:Error? {\n    \/\/ Cleans the database.\n    _ = check jdbcClient->execute(`DROP TABLE Customers`);\n    \n    \/\/ Closes the JDBC client.\n    check jdbcClient.close();\n}", "outputFileName":"jdbc_execute_operation.out", "output":"# Create a Ballerina project.\n# Copy the example to the project and add relevant database driver jar details to the `Ballerina.toml` file.\n# Execute the command below to build and run the project.\nbal run\n\nRows affected: 1\nGenerated Customer ID: 2\nUpdated Row count: 1\nDeleted Row count: 1"}], "description":"\/\/ This BBE demonstrates how to use the JDBC client with DDL and\n\/\/ DML operations. Note that the relevant database driver JAR\n\/\/ should be defined in the `Ballerina.toml` file as a dependency.\n\/\/ This sample is based on an H2 database and the H2 database driver JAR need to be added to `Ballerina.toml` file.\n\/\/ For a sample configuration and more information on the underlying module, see the [JDBC module](https:\/\/docs.central.ballerina.io\/ballerinax\/java.jdbc\/latest\/) .<br><br>", "metatags":"description: This BBE on the use of the JDBC client with the DDL and DML operations in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, jdbc, insert, update, delete"}, {"bbeName":"jdbc-query-operation", "resources":[{"tag":"operation", "balFileName":"jdbc_query_operation.bal", "bal":"import ballerina\/io;\nimport ballerinax\/java.jdbc;\nimport ballerina\/sql;\n\n\/\/ Defines a record to load the query result schema as shown below in the\n\/\/ 'getDataWithTypedQuery' function. In this example, all columns of the \n\/\/ customer table will be loaded. Therefore, the `Customer` record will be \n\/\/ created with all the columns. The column name of the result and the \n\/\/ defined field name of the record will be matched case insensitively.\ntype Customer record {|\n    int customerId;\n    string lastName;\n    string firstName;\n    int registrationId;\n    float creditLimit;\n    string country;\n|};\n\npublic function main() returns error? {\n    \/\/ Initializes the JDBC client.\n    jdbc:Client jdbcClient = check new (\"jdbc:h2:file:.\/target\/bbes\/java_jdbc\", \n        \"rootUser\", \"rootPass\");\n    \/\/ Runs the prerequisite setup for the example.\n    check beforeExample(jdbcClient);\n\n    \/\/ Selects the rows in the database table via the query remote operation.\n    \/\/ The result is returned as a stream and the elements of the stream can\n    \/\/ be either a record or an error. The name and type of the attributes \n    \/\/ within the record from the `resultStream` will be automatically \n    \/\/ identified based on the column name and type of the query result.\n    stream<record {}, error?> resultStream =\n            jdbcClient->query(`SELECT * FROM Customers`);\n\n    \/\/ If there is any error during the execution of the SQL query or\n    \/\/ iteration of the result stream, the result stream will terminate and\n    \/\/ return the error.\n    check resultStream.forEach(function(record {} result) {\n        io:println(\"Full Customer details: \", result);\n    });\n\n    \/\/ The result of the count operation is provided as a record stream.\n    stream<record {}, error?> resultStream2 =\n            jdbcClient->query(`SELECT COUNT(*) AS total FROM Customers`);\n\n    \/\/ Since the above count query will return only a single row,\n    \/\/ the `next()` operation is sufficient to retrieve the data.\n    record {|record {} value;|}|error? result = resultStream2.next();\n    \/\/ Checks the result and retrieves the value for the total.\n    if result is record {|record {} value;|} {\n        io:println(\"Total rows in customer table : \", result.value[\"TOTAL\"]);\n    }\n\n    \/\/ In general cases, the stream will be closed automatically\n    \/\/ when the stream is fully consumed or any error is encountered.\n    \/\/ However, in case if the stream is not fully consumed, the stream\n    \/\/ should be closed specifically.\n    check resultStream2.close();\n\n    \/\/ If a `Customer` stream type is defined when calling the query method,\n    \/\/ The result is returned as a `Customer` record stream and the elements\n    \/\/ of the stream can be either a `Customer` record or an error.\n    stream<Customer, error?> customerStream =\n        jdbcClient->query(`SELECT * FROM Customers`);\n\n    \/\/ Iterates the customer stream.\n    check customerStream.forEach(function(Customer customer) {\n        io:println(\"Full Customer details: \", customer);\n    });\n\n    \/\/ Performs the cleanup after the example.\n    check afterExample(jdbcClient);\n}\n\n\/\/ Initializes the database as a prerequisite to the example.\nfunction beforeExample(jdbc:Client jdbcClient) returns sql:Error? {\n    \/\/ Creates a table in the database.\n    _ = check jdbcClient->execute(`CREATE TABLE Customers(customerId INTEGER\n            NOT NULL IDENTITY, firstName  VARCHAR(300), lastName  VARCHAR(300),\n            registrationID INTEGER, creditLimit DOUBLE, country  VARCHAR(300),\n            PRIMARY KEY (customerId))`);\n\n    \/\/ Adds records to the newly-created table.\n    _ = check jdbcClient->execute(`INSERT INTO Customers (firstName,\n            lastName, registrationID,creditLimit,country) VALUES ('Peter',\n            'Stuart', 1, 5000.75, 'USA')`);\n    _ = check jdbcClient->execute(`INSERT INTO Customers (firstName,\n            lastName, registrationID,creditLimit,country) VALUES\n            ('Dan', 'Brown', 2, 10000, 'UK')`);\n}\n\n\/\/ Cleans up the database after running the example.\nfunction afterExample(jdbc:Client jdbcClient) returns sql:Error? {\n    \/\/ Cleans the database.\n    _ = check jdbcClient->execute(`DROP TABLE Customers`);\n\n    \/\/ Closes the JDBC client.\n    check jdbcClient.close();\n}", "outputFileName":"jdbc_query_operation.out", "output":"# Create a Ballerina project.\n# Copy the example to the project and add relevant database driver jar details to the `Ballerina.toml` file.\n# Execute the command below to build and run the project.\nbal run\n\nFull Customer details: {\"CUSTOMERID\":1,\"FIRSTNAME\":\"Peter\",\"LASTNAME\":\"Stuart\",\"REGISTRATIONID\":1,\"CREDITLIMIT\":5000.75,\"COUNTRY\":\"USA\"}\nFull Customer details: {\"CUSTOMERID\":2,\"FIRSTNAME\":\"Dan\",\"LASTNAME\":\"Brown\",\"REGISTRATIONID\":2,\"CREDITLIMIT\":10000.0,\"COUNTRY\":\"UK\"}\nTotal rows in customer table : 2\nFull Customer details: {\"customerId\":1,\"firstName\":\"Peter\",\"lastName\":\"Stuart\",\"registrationId\":1,\"creditLimit\":5000.75,\"country\":\"USA\"}\nFull Customer details: {\"customerId\":2,\"firstName\":\"Dan\",\"lastName\":\"Brown\",\"registrationId\":2,\"creditLimit\":10000.0,\"country\":\"UK\"}"}], "description":"\/\/ This BBE demonstrates how to use the JDBC client select query operations\n\/\/ with the stream return type. Note that the relevant database driver JAR\n\/\/ should be defined in the `Ballerina.toml` file as a dependency.\n\/\/ This sample is based on an H2 database and the H2 database driver JAR need to be added to `Ballerina.toml` file.\n\/\/ For a sample configuration and more information on the underlying module, see the [JDBC module](https:\/\/docs.central.ballerina.io\/ballerinax\/java.jdbc\/latest\/) .<br><br>", "metatags":"description: This BBE demonstrates how to use the JDBC client query operations with the stream return type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, jdbc, query, select, data"}, {"bbeName":"join-clause", "resources":[{"tag":"clause", "balFileName":"join_clause.bal", "bal":"import ballerina\/io;\n\ntype User record {|\n    readonly int id;\n    string name;\n|};\n\ntype Login record {|\n    int userId;\n    string time;\n|};\n\npublic function main() {\n    table<User> key(id) users = table [\n        {id: 1234, name: \"Keith\"},\n        {id: 6789, name: \"Anne\"}\n    ];\n\n    Login[] logins = [\n        {userId: 6789, time: \"20:10:23\"},\n        {userId: 1234, time: \"10:30:02\"},\n        {userId: 3987, time: \"12:05:00\"}\n    ];\n\n    string[] loginLog = from var login in logins\n                        \/\/ The `join` clause iterates any iterable value similarly to the\n                        \/\/ `from` clause.\n                        join var user in users\n                        \/\/ The `on` condition is used to match the `login` with the `user`\n                        \/\/ based on the `userId`. The iteration is skipped when the\n                        \/\/ condition is not satisfied.\n                        on login.userId equals user.id\n\n\n                        select user.name + \":\" + login.time;\n    io:println(loginLog);\n}", "outputFileName":"join_clause.out", "output":"bal run join_clause.bal\n[\"Anne:20:10:23\",\"Keith:10:30:02\"]"}], "description":"\/\/ `Query` can take advantage of `table` keys by using a `join clause`. Performs an `inner equijoin`.\n\/\/ The result is similar to using nested `from clause` and `where clause`. It is implemented as\n\/\/ a hash join: `table` keys allow you to avoid building a hash table. The type to join on must be `anydata`.", "metatags":"description: This BBE demonstrates join clause in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, join clause"}, {"bbeName":"json-numbers", "resources":[{"tag":"numbers", "balFileName":"json_numbers.bal", "bal":"import ballerina\/io;\n\npublic function main() returns error? {\n    int a = 1;\n    float b = 2.1;\n    decimal c = 3.24;\n\n    \/\/ The `json` type allows `int|float|decimal`.\n    json[] d = [a, b, c];\n\n    \/\/ `toJsonString` will convert `int|float|decimal` into JSON \n    \/\/ numeric syntax.\n    string e = d.toJsonString();\n\n    io:println(e);\n\n    \/\/ `fromJsonString` converts JSON numeric syntax into `int`, \n    \/\/ if possible, and otherwise `decimal`.\n    json f = check e.fromJsonString();\n\n    io:println(f);\n\n    json[] g = <json[]> f;\n\n    io:println(typeof g[0]);\n    io:println(typeof g[1]);\n    io:println(typeof g[2]);\n\n    \/\/ `cloneWithType` or `ensureType` will convert from `int` or `decimal` into the user's\n    \/\/ chosen numeric type.\n    float h = check g[2].ensureType();\n\n    io:println(h);\n\n    \/\/ `-0` is an edge case: represented as `float`.\n    string i = \"-0\";\n\n    io:println(typeof check i.fromJsonString());\n    return;\n}", "outputFileName":"json_numbers.out", "output":"bal run json_numbers.bal\n[1, 2.1, 3.24]\n[1,2.1,3.24]\ntypedesc 1\ntypedesc 2.1\ntypedesc 3.24\n3.24\ntypedesc -0.0"}], "description":"\/\/ Ballerina has three numeric types; but JSON has one.\n\/\/ The `json` type allows `int|float|decimal`.\n\/\/ `toJsonString` will convert `int|float|decimal` into JSON numeric syntax.\n\/\/ `fromJsonString` converts JSON numeric syntax into `int`, if possible, and\n\/\/ otherwise `decimal`.\n\/\/ `cloneWithType` or `ensureType` will convert from `int` or `decimal` into user's\n\/\/ chosen numeric type.\n\/\/ Net result is that you can use `json` to exchange full range of all three Ballerina\n\/\/ numeric types.\n\/\/ `-0` is an edge case: represented as `float`.", "metatags":"description: This BBE demonstrates JSON numbers in Ballerina\nkeywords: ballerina, ballerina by example, bbe, json, numbers"}, {"bbeName":"json-type", "resources":[{"tag":"type", "balFileName":"json_type.bal", "bal":"import ballerina\/io;\nimport ballerina\/lang.value;\n\njson j = { \"x\": 1, \"y\": 2 };\n\n\/\/ Returns the `string` that represents `j` in JSON format.\nstring s = j.toJsonString();\n\n\/\/ Parses a `string` in the JSON format and returns the value that it represents.\njson j2 = check value:fromJsonString(s);\n\n\/\/ Allows `null` for JSON compatibility.\njson j3 = null;\n\npublic function main() {\n    io:println(s);\n    io:println(j2);\n}", "outputFileName":"json_type.out", "output":"bal run json_type.bal\n{\"x\":1, \"y\":2}\n{\"x\":1,\"y\":2}"}], "description":"\/\/ `json` type is a union: `()|boolean|int|float|decimal|string|json[]|map<json>`. A `json` value can\n\/\/ be converted to and from the JSON format straightforwardly except for the choice of the Ballerina numeric type.\n\/\/ Ballerina syntax is compatible with `JSON` and allows `null` for `()` for JSON compatibility.\n\/\/ `json` is `anydata` without `table` and `xml`. `toJson` recursively converts `anydata` to `json`.\n\/\/ `table` values are converted to `arrays`. `xml` values are converted to `strings`.`json` and `xml`\n\/\/ types are not parallel.", "metatags":"description: This BBE demonstrates json type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, json type, json"}, {"bbeName":"kafka-authentication-sasl-plain-consumer", "resources":[{"tag":"consumer", "balFileName":"kafka_authentication_sasl_plain_consumer.bal", "bal":"import ballerinax\/kafka;\nimport ballerina\/log;\n\n\/\/ Define the relevant SASL URL of the configured Kafka server.\nconst string SASL_URL = \"localhost:9093\";\n\nkafka:ConsumerConfiguration consumerConfig = {\n    groupId: \"test-group\",\n    topics: [\"demo-security\"],\n    \/\/ Provide the relevant authentication configurations to authenticate the consumer by [`kafka:AuthenticationConfiguration`](https:\/\/docs.central.ballerina.io\/ballerinax\/kafka\/latest\/records\/AuthenticationConfiguration).\n    auth: {\n        \/\/ Provide the authentication mechanism used by the Kafka server.\n        mechanism: kafka:AUTH_SASL_PLAIN,\n        \/\/ Username and password should be set here in order to authenticate the consumer.\n        \/\/ For information on how to secure values instead of directly using plain text values, see [Defining Configurable Variables](https:\/\/ballerina.io\/learn\/user-guide\/configurability\/defining-configurable-variables\/#securing-sensitive-data-using-configurable-variables).\n        username: \"alice\",\n        password: \"alice@123\"\n    },\n    securityProtocol: kafka:PROTOCOL_SASL_PLAINTEXT\n};\n\nlistener kafka:Listener kafkaListener = new(SASL_URL, consumerConfig);\n\nservice kafka:Service on kafkaListener {\n    remote function onConsumerRecord(kafka:Caller caller,\n                    kafka:ConsumerRecord[] records) returns error? {\n        foreach var consumerRecord in records {\n            string value = check string:fromBytes(consumerRecord.value);\n            log:printInfo(value);\n        }\n    }\n}", "outputFileName":"kafka_authentication_sasl_plain_consumer.out", "output":"bal run kafka_authentication_sasl_plain_consumer.bal"}], "description":"\/\/ This is an example of a Kafka consumer using the SASL\/PLAIN authentication.\n\/\/ For this example to work properly, an active Kafka server must be present\n\/\/ and it should be configured to use the SASL\/PLAIN authentication mechanism.\n\/\/ <br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Kafka module](https:\/\/docs.central.ballerina.io\/ballerinax\/kafka\/latest).", "metatags":"description: BBE on how to configure a Kafka consumer to use SASL\/PLAIN authentication.\nkeywords: ballerina, ballerina by example, bbe, kafka, consumer, authentication, SASL"}, {"bbeName":"kafka-authentication-sasl-plain-producer", "resources":[{"tag":"producer", "balFileName":"kafka_authentication_sasl_plain_producer.bal", "bal":"import ballerina\/io;\nimport ballerinax\/kafka;\n\n\/\/ Define the relevant SASL URL of the configured Kafka server.\nconst string SASL_URL = \"localhost:9093\";\n\nkafka:ProducerConfiguration producerConfig = {\n    \/\/ Provide the relevant authentication configurations to authenticate the producer by [`kafka:AuthenticationConfiguration`](https:\/\/docs.central.ballerina.io\/ballerinax\/kafka\/latest\/records\/AuthenticationConfiguration).\n    auth: {\n        \/\/ Provide the authentication mechanism used by the Kafka server.\n        mechanism: kafka:AUTH_SASL_PLAIN,\n        \/\/ Username and password should be set here in order to authenticate the producer.\n        \/\/ For information on how to secure values instead of directly using plain text values, see [Defining Configurable Variables](https:\/\/ballerina.io\/learn\/user-guide\/configurability\/defining-configurable-variables\/#securing-sensitive-data-using-configurable-variables).\n        username: \"alice\",\n        password: \"alice@123\"\n    },\n    securityProtocol: kafka:PROTOCOL_SASL_PLAINTEXT\n};\n\nkafka:Producer kafkaProducer = check new(SASL_URL, producerConfig);\n\npublic function main() returns error? {\n    string message = \"Hello, World!\";\n    check kafkaProducer->send({\n        topic: \"demo-security\",\n        value: message.toBytes()\n    });\n    check kafkaProducer->'flush();\n    io:println(\"Message published successfully.\");\n}", "outputFileName":"kafka_authentication_sasl_plain_producer.out", "output":"bal run kafka_authentication_sasl_plain_producer.bal\nMessage published successfully."}], "description":"\/\/ This is an example of a Kafka producer using the SASL\/PLAIN authentication.\n\/\/ For this example to work properly, an active Kafka server must be present\n\/\/ and it should be configured to use the SASL\/PLAIN authentication mechanism.\n\/\/ <br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Kafka module](https:\/\/docs.central.ballerina.io\/ballerinax\/kafka\/latest).", "metatags":"description: BBE on how to configure a Kafka producer to use SASL\/PLAIN authentication.\nkeywords: ballerina, ballerina by example, bbe, kafka, producer, authentication, SASL"}, {"bbeName":"kafka-consumer-client", "resources":[{"tag":"client", "balFileName":"kafka_consumer_client.bal", "bal":"import ballerinax\/kafka;\nimport ballerina\/io;\n\nkafka:ConsumerConfiguration consumerConfiguration = {\n    groupId: \"group-id\",\n    offsetReset: \"earliest\",\n    \/\/ Subscribes to the topic `test-kafka-topic`.\n    topics: [\"test-kafka-topic\"]\n\n};\n\nkafka:Consumer consumer = check new (kafka:DEFAULT_URL, consumerConfiguration);\n\npublic function main() returns error? {\n    \/\/ Polls the consumer for messages.\n    kafka:ConsumerRecord[] records = check consumer->poll(1);\n\n    foreach var kafkaRecord in records {\n        byte[] messageContent = kafkaRecord.value;\n        \/\/ Converts the `byte[]` to a `string`.\n        string message = check string:fromBytes(messageContent);\n\n        \/\/ Prints the retrieved Kafka record.\n        io:println(\"Received Message: \" + message);\n    }\n}", "outputFileName":"kafka_consumer_client.out", "output":"bal run kafka_consumer_client.bal"}], "description":"\/\/ This is an example on how to use a `kafka:Consumer` as a simple record\n\/\/ consumer. The records from a subscribed topic can be retrieved using the\n\/\/ `poll()` function.\n\/\/ This consumer uses the builtin byte array deserializer for both the key and\n\/\/ the value, which is the default deserializer in the `kafka:Consumer`. For\n\/\/ this example to work properly, an active Kafka broker should be present.\n\/\/ <br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [Kafka module](https:\/\/docs.central.ballerina.io\/ballerinax\/kafka\/latest).", "metatags":"description: BBE on how to use a `kafka:Consumer` as a simple record consumer.\nkeywords: ballerina, ballerina by example, bbe, kafka, consumer, client"}, {"bbeName":"kafka-consumer-group-service", "resources":[{"tag":"service", "balFileName":"kafka_consumer_group_service.bal", "bal":"import ballerinax\/kafka;\nimport ballerina\/log;\n\nkafka:ConsumerConfiguration consumerConfigs = {\n    \/\/ Uses two concurrent consumers to work as a group.\n    concurrentConsumers: 2,\n\n    groupId: \"group-id\",\n    \/\/ Subscribes to the `test-kafka-topic`.\n    topics: [\"test-kafka-topic\"],\n\n    pollingInterval: 1\n};\n\nlistener kafka:Listener kafkaListener =\n            new (kafka:DEFAULT_URL, consumerConfigs);\n\nservice kafka:Service on kafkaListener {\n    \/\/ This remote function executes when a message or a set of messages are published\n    \/\/ to the subscribed topic\/topics.\n    remote function onConsumerRecord(kafka:Caller caller,\n                        kafka:ConsumerRecord[] records) returns error? {\n        \/\/ The set of Kafka records received by the service are processed one\n        \/\/ by one.\n        foreach var kafkaRecord in records {\n            check processKafkaRecord(kafkaRecord);\n        }\n\n    }\n}\n\nfunction processKafkaRecord(kafka:ConsumerRecord kafkaRecord) returns error? {\n    byte[] messageContent = kafkaRecord.value;\n    \/\/ Converts the `byte[]` to a `string`.\n    string message = check string:fromBytes(messageContent);\n\n    \/\/ Prints the retrieved message.\n    log:printInfo(\"Received Message: \" + message);\n}", "outputFileName":"kafka_consumer_group_service.out", "output":"bal run kafka_consumer_group_service.bal"}], "description":"\/\/ This is an example of a Kafka consumer used as a listener to listen to a\n\/\/ given topic\/topics. The listener uses a group of concurrent consumers within\n\/\/ the service. This consumer uses the builtin `string` deserializer for the\n\/\/ values. For this example to work properly, an active Kafka broker should be\n\/\/ present.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [Kafka module](https:\/\/docs.central.ballerina.io\/ballerinax\/kafka\/latest).", "metatags":"description: BBE on using kafka consumer as a listener to listen to a given topic\/topics.\nkeywords: ballerina, ballerina by example, bbe, kafka, consumer, kafka consumer group"}, {"bbeName":"kafka-consumer-service", "resources":[{"tag":"service", "balFileName":"kafka_consumer_service.bal", "bal":"import ballerinax\/kafka;\nimport ballerina\/log;\n\nkafka:ConsumerConfiguration consumerConfigs = {\n    groupId: \"group-id\",\n    \/\/ Subscribes to the topic `test-kafka-topic`.\n    topics: [\"test-kafka-topic\"],\n\n    pollingInterval: 1,\n    \/\/ Sets the `autoCommit` to `false` so that the records should be committed manually.\n    autoCommit: false\n};\n\nlistener kafka:Listener kafkaListener =\n        new (kafka:DEFAULT_URL, consumerConfigs);\n\nservice kafka:Service on kafkaListener {\n    remote function onConsumerRecord(kafka:Caller caller,\n                                kafka:ConsumerRecord[] records) returns error? {\n        \/\/ The set of Kafka records received by the service are processed one by one.\n        foreach var kafkaRecord in records {\n            check processKafkaRecord(kafkaRecord);\n        }\n\n        \/\/ Commits offsets of the returned records by marking them as consumed.\n        kafka:Error? commitResult = caller->commit();\n\n        if commitResult is error {\n            log:printError(\"Error occurred while committing the \" +\n                \"offsets for the consumer \", 'error = commitResult);\n        }\n    }\n}\n\nfunction processKafkaRecord(kafka:ConsumerRecord kafkaRecord) returns error? {\n    \/\/ The value should be a `byte[]` since the byte[] deserializer is used\n    \/\/ for the value.\n    byte[] value = kafkaRecord.value;\n\n    \/\/ Converts the `byte[]` to a `string`.\n    string messageContent = check string:fromBytes(value);\n    log:printInfo(\"Received Message: \" + messageContent);\n}", "outputFileName":"kafka_consumer_service.out", "output":"bal run kafka_consumer_service.bal"}], "description":"\/\/ This is an example, which creates a Kafka consumer used as a listener\n\/\/ to a service with manual offset commits.\n\/\/ This consumer uses the builtin `int` deserializer for the keys and the\n\/\/ builtin `string` deserializer for the values. For this example to work\n\/\/ properly, an active Kafka broker should be present.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [Kafka module](https:\/\/docs.central.ballerina.io\/ballerinax\/kafka\/latest).", "metatags":"description: BBE on creating a Kafka consumer to receive messages in an asynchronous manner using Ballerina.\nkeywords: ballerina, ballerina by example, bbe, kafka, consumer, listener, service, asynchronous"}, {"bbeName":"kafka-producer", "resources":[{"tag":"producer", "balFileName":"kafka_producer.bal", "bal":"import ballerinax\/kafka;\n\nkafka:Producer kafkaProducer = check new (kafka:DEFAULT_URL);\n\npublic function main() returns error? {\n    string message = \"Hello World, Ballerina\";\n    \/\/ Sends the message to the Kafka topic.\n    check kafkaProducer->send({\n                                topic: \"test-kafka-topic\",\n                                value: message.toBytes() });\n\n    \/\/ Flushes the sent messages.\n    check kafkaProducer->'flush();\n}", "outputFileName":"kafka_producer.out", "output":"bal run kafka_producer.bal"}], "description":"\/\/ This is an example on how to send messages to a Kafka topic using a\n\/\/ `kafka:Producer` object. The producer is configured to send `string`\n\/\/ values and `int` keys. For this example to work properly, an active Kafka\n\/\/ broker should be present.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [Kafka module](https:\/\/docs.central.ballerina.io\/ballerinax\/kafka\/latest).", "metatags":"description: BBE on sending messages to a Kafka topic using a `kafka:Producer` object.\nkeywords: ballerina, ballerina by example, bbe, kafka, producer"}, {"bbeName":"kafka-producer-transactional", "resources":[{"tag":"transactional", "balFileName":"kafka_producer_transactional.bal", "bal":"import ballerina\/io;\nimport ballerinax\/kafka;\n\nkafka:ProducerConfiguration producerConfigs = {\n    clientId: \"basic-producer\",\n    acks: \"all\",\n    retryCount: 3,\n    \/\/ The `enableIdempotence` should set to `true` to make a producer transactional.\n    enableIdempotence: true,\n\n    \/\/ A `transactionalId` must be provided to make a producer transactional.\n    transactionalId: \"test-transactional-id\"\n};\n\nkafka:Producer kafkaProducer = check new (kafka:DEFAULT_URL, producerConfigs);\n\npublic function main() {\n    string message = \"Hello World Transaction Message\";\n    byte[] serializedMessage = message.toBytes();\n    \/\/ Creates a producer config with optional parameters.\n    \/\/ The `transactionalId` enables transactional message production.\n    kafkaAdvancedTransactionalProduce(serializedMessage);\n}\n\nfunction kafkaAdvancedTransactionalProduce(byte[] message) {\n    transaction {\n        kafka:Error? sendResult = kafkaProducer->send({\n            topic: \"test-kafka-topic\",\n            value: message,\n            partition: 0\n        });\n        \/\/ Checks for an error and notifies if an error has occurred.\n        if sendResult is kafka:Error {\n            io:println(\"Error occurred when sending message \", sendResult);\n        }\n\n        var commitResult = commit;\n        if commitResult is () {\n            io:println(\"Transaction successful\");\n        } else {\n            io:println(\"Transaction unsuccessful \" + commitResult.message());\n        }\n    }\n}", "outputFileName":"kafka_producer_transactional.out", "output":"bal run kafka_message_producer_transactional.bal\nTransaction successful"}], "description":"\/\/ This example shows you how to do transactional message producing by sending\n\/\/ messages to kafka brokers atomically using the `kafka:Producer` object. For\n\/\/ this example to work properly, an active Kafka broker should be present.\n\/\/ <br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [Kafka module](https:\/\/docs.central.ballerina.io\/ballerinax\/kafka\/latest).", "metatags":"description: BBE on how to transactionally produce messages using `kafka:Producer`.\nkeywords: ballerina, ballerina by example, bbe, kafka, producer, transaction"}, {"bbeName":"langlib-functions", "resources":[{"tag":"functions", "balFileName":"langlib_functions.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    \/\/ You can call langlib functions using the method-call syntax.\n    string s = \"abc\".substring(1, 2);\n\n    io:println(s);\n\n    \/\/ `n` will be 1.\n    int n = s.length();\n    io:println(n);\n\n    \/\/ `s.length()` is same as `string:length(s)`.\n    int m = string:length(s);\n    io:println(m);\n\n}", "outputFileName":"langlib_functions.out", "output":"bal run langlib_functions.bal\nb\n1\n1"}], "description":"\/\/ Langlib is a small library defined by language providing fundamental operations on built-in data types.\n\/\/ Langlib functions can be called using convenient method-call syntax, but these types are not objects!\n\/\/ There exists a `ballerina\/lang.T` module for each built-in type `T` and they are automatically imported\n\/\/ using `T` prefix.", "metatags":"description: This BBE introduces Langlib modules in Ballerina\nkeywords:  ballerina, ballerina by example, bbe, langlib, module, Language, Library"}, {"bbeName":"let-clause", "resources":[{"tag":"clause", "balFileName":"let_clause.bal", "bal":"import ballerina\/io;\n\ntype Person record {\n string first;\n string last;\n int yearOfBirth;\n};\n\npublic function main() {\n    Person[] persons = [\n        {first: \"Melina\", last: \"Kodel\", yearOfBirth: 1994},\n        {first: \"Tom\", last: \"Riddle\", yearOfBirth: 1926}\n    ];\n\n    string[] names = from var {first, last} in persons\n                     \/\/ The `let` clause binds the variables.\n                     let int len1 = first.length()\n                     \/\/ The `where` clause provides a way to perform conditional execution.\n                     where len1 > 0\n\n                     let int len2 = last.length()\n                     where len2 > 0\n                     let string name = first + \" \" + last\n                     select name;\n                     \n    io:println(names);\n}", "outputFileName":"let_clause.out", "output":"bal run let_clause.bal\n[\"Melina Kodel\",\"Tom Riddle\"]"}], "description":"\/\/ Query expressions can have `let` clauses. They can be anywhere between `from` and `select`\n\/\/ clauses. Multiple `where` clauses are also allowed. The semantics are similar to `XQuery FLWOR`.", "metatags":"description: This BBE demonstrates let clause in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, let clause"}, {"bbeName":"limit-clause", "resources":[{"tag":"clause", "balFileName":"limit_clause.bal", "bal":"import ballerina\/io;\n\ntype Employee record {\n    string firstName;\n    string lastName;\n    decimal salary;\n};\n\npublic function main() {\n    Employee[] employees = [\n        {firstName: \"Jones\", lastName: \"Welsh\", salary: 1000.00},\n        {firstName: \"Anne\", lastName: \"Frank\", salary: 5000.00},\n        {firstName: \"Michael\", lastName: \"Cain\", salary: 10000.00},\n        {firstName: \"Tom\", lastName: \"Hiddleston\", salary: 2000.00}\n    ];\n\n    Employee[] top3 = from var e in employees\n                      order by e.salary descending\n                      \/\/ The `limit` clause limits the number of output items to 3.\n                      limit 3\n\n\n                      select e;\n\n    foreach var emp in top3 {\n        io:println(emp);\n    }\n}", "outputFileName":"limit_clause.out", "output":"bal run limit_clause.bal\n{\"firstName\":\"Michael\",\"lastName\":\"Cain\",\"salary\":10000.00}\n{\"firstName\":\"Anne\",\"lastName\":\"Frank\",\"salary\":5000.00}\n{\"firstName\":\"Tom\",\"lastName\":\"Hiddleston\",\"salary\":2000.00}"}], "description":"// The `limit` clause limits the number of results from the earlier clauses.", "metatags":"description: This BBE demonstrates limit clause in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, limit clause"}, {"bbeName":"lock-statement", "resources":[{"tag":"statement", "balFileName":"lock_statement.bal", "bal":"import ballerina\/io;\n\nint n = 0;\n\nfunction inc() {\n    \/\/ Locks the global variable `n` and increments it by 1.\n    lock {\n        n += 1;\n    }\n\n    io:println(n);\n}\n\npublic function main() {\n    inc();\n}", "outputFileName":"lock_statement.out", "output":"bal run lock_statement.bal\n1"}], "description":"\/\/ The `lock` statement allows mutable state to be safely accessed from multiple strands that are running on\n\/\/ separate threads. Semantics are like an atomic section: execution of outermost `lock` block is not\n\/\/ interleaved. Naive implementation uses single, global, recursive lock. Efficient implementation can do\n\/\/ compile-time lock inference.", "metatags":"description: This BBE introduces lock statement in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, lock statement"}, {"bbeName":"logging", "resources":[{"tag":"logging", "balFileName":"logging.bal", "bal":"import ballerina\/log;\n\npublic function main() {\n    \/\/ The Ballerina log API provides functions to log at four levels, which are\n    \/\/ `DEBUG`, `ERROR`, `INFO`, and `WARN`.\n    log:printDebug(\"debug log\");\n    log:printError(\"error log\");\n    log:printInfo(\"info log\");\n    log:printWarn(\"warn log\");\n\n    \/\/ You can pass any number of key\/value pairs, which need to be displayed in the log message.\n    \/\/ These can be of the `anydata` type including int, string, and boolean.\n    log:printInfo(\"info log\", id = 845315, name = \"foo\", successful = true);\n\n    \/\/ Optionally, an error can be passed to the functions.\n    error e = error(\"something went wrong!\");\n    log:printError(\"error log with cause\", 'error = e, id = 845315,\n        name = \"foo\");\n}", "outputFileName":"logging.out", "output":"bal run logging.bal\ntime = 2021-05-25T11:29:58.290+05:30 level = DEBUG module = \"\" message = \"debug log\"\ntime = 2021-05-25T11:29:58.305+05:30 level = ERROR module = \"\" message = \"error log\"\ntime = 2021-05-25T11:29:58.306+05:30 level = INFO module = \"\" message = \"info log\"\ntime = 2021-05-25T11:29:58.307+05:30 level = WARN module = \"\" message = \"warn log\"\ntime = 2021-05-25T11:29:58.307+05:30 level = INFO module = \"\" message = \"info log\" name = \"foo\" id = 845315 successful = true\ntime = 2021-05-25T11:29:58.317+05:30 level = ERROR module = \"\" message = \"error log with cause\" error = \"something went wrong!\" name = \"foo\" id = 845315"}], "description":"\/\/ The Ballerina Log API contains the application log handling functions.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Log module](https:\/\/docs.central.ballerina.io\/ballerina\/log\/latest\/).", "metatags":"description: BBE on how to log messages in Ballerina at different log levels including 'DEBUG', 'ERROR', 'INFO', and 'WARN'.\nkeywords: ballerina, ballerina by examples, bbe, log, level"}, {"bbeName":"logging-configuration", "resources":[{"tag":"configuration", "balFileName":"logging_configuration.bal", "bal":"import ballerina\/log;\n\npublic function main() {\n    \/\/ The Ballerina log API provides functions to log at four levels, which are\n    \/\/ `DEBUG`, `ERROR`, `INFO`, and `WARN`.\n    log:printDebug(\"debug log\");\n    log:printError(\"error log\");\n    log:printInfo(\"info log\");\n    log:printWarn(\"warn log\");\n}", "outputFileName":"logging_configuration.out", "output":"bal run logging_configuration.bal\ntime = 2021-05-25T11:06:54.998+05:30 level = ERROR module = \"\" message = \"error log\"\ntime = 2021-05-25T11:06:55.009+05:30 level = INFO module = \"\" message = \"info log\"\ntime = 2021-05-25T11:06:55.010+05:30 level = WARN module = \"\" message = \"warn log\"\n# As shown in the output, only the `INFO` and higher level logs are logged by default.\n\n# The log level can be configured via a Ballerina configuration file.\n# To set the global log level to `DEBUG`, place the entry given below in the `Config.toml` file and run the sample.\n# ```\n# [ballerina.log]\n# level = \"DEBUG\"\n# ```\ntime = 2021-05-25T11:11:24.898+05:30 level = DEBUG module = \"\" message = \"debug log\"\ntime = 2021-05-25T11:11:24.914+05:30 level = ERROR module = \"\" message = \"error log\"\ntime = 2021-05-25T11:11:24.915+05:30 level = INFO module = \"\" message = \"info log\"\ntime = 2021-05-25T11:11:24.915+05:30 level = WARN module = \"\" message = \"warn log\"\n# As shown in the output, now the `DEBUG` and higher level logs are logged.\n\n# Each module can also be assigned its own log level. To assign a\n# log level to a module, provide the following entry in the `Config.toml` file:\n#\n# ```\n# [[ballerina.log.modules]]\n# name = \"[ORG_NAME]\/[MODULE_NAME]\"\n# level = \"[LOG_LEVEL]\"\n# ```\n\n# By default, log messages are logged to the console in the LogFmt format.\n# To set the output format to JSON, place the entry given below in the `Config.toml` file and run the sample.\n# ```\n# [ballerina.log]\n# format = \"json\"\n# ```\n{\"time\":\"2021-05-25T11:14:43.986+05:30\", \"level\":\"ERROR\", \"module\":\"\", \"message\":\"error log\"}\n{\"time\":\"2021-05-25T11:14:44.005+05:30\", \"level\":\"INFO\", \"module\":\"\", \"message\":\"info log\"}\n{\"time\":\"2021-05-25T11:14:44.006+05:30\", \"level\":\"WARN\", \"module\":\"\", \"message\":\"warn log\"}"}], "description":"\/\/ The Ballerina Log API contains the application log handling functions.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Log module](https:\/\/docs.central.ballerina.io\/ballerina\/log\/latest\/).", "metatags":"description: BBE on how to configure Ballerina logging.\nkeywords: ballerina, ballerina by examples, bbe, log, level, format"}, {"bbeName":"logging-with-context", "resources":[{"tag":"context", "balFileName":"logging_with_context.bal", "bal":"import ballerina\/log;\nimport ballerina\/random;\nimport ballerina\/time;\n\npublic function main() {\n    \/\/ The Ballerina log API provides functions to log at four levels, which are\n    \/\/ `DEBUG`, `ERROR`, `INFO`, and `WARN`.\n    \/\/ You can pass key\/value pairs where the values are function pointers.\n    \/\/ These functions can return values, which change dynamically.\n    \/\/ The following log prints the current UTC time as a key\/value pair.\n    log:printInfo(\"info log\",\n                  current_time = isolated function() returns string {\n                      return time:utcToString(time:utcNow());});\n    \/\/ The following log prints a random percentage as a key\/value pair.\n    log:printInfo(\"info log\",\n                   percentage = isolated function() returns float {\n                       return random:createDecimal() * 100.0;});\n}", "outputFileName":"logging_with_context.out", "output":"bal run logging_with_context.bal\ntime = 2021-05-25T10:34:25.460+05:30 level = INFO module = \"\" message = \"info log\" current_time = \"2021-05-25T05:04:25.473981Z\"\ntime = 2021-05-25T10:34:25.487+05:30 level = INFO module = \"\" message = \"info log\" percentage = 38.4141353500368"}], "description":"\/\/ The Ballerina Log API contains the application log handling functions.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Log module](https:\/\/docs.central.ballerina.io\/ballerina\/log\/latest\/).", "metatags":"description: BBE on how to log messages in Ballerina with context values.\nkeywords: ballerina, ballerina by examples, bbe, log, function pointer, context, dynamic"}, {"bbeName":"manage-scheduled-jobs", "resources":[{"tag":"jobs", "balFileName":"manage_scheduled_jobs.bal", "bal":"import ballerina\/io;\nimport ballerina\/lang.runtime;\nimport ballerina\/task;\nimport ballerina\/time;\n\n\/\/ Creates a job to be executed by the scheduler.\nclass Job {\n\n    *task:Job;\n    int i = 1;\n    string jobIdentifier;\n\n    \/\/ Executes this function when the scheduled trigger fires.\n    public function execute() {\n        self.i += 1;\n        io:println(self.jobIdentifier + \", MyCounter: \", self.i);\n    }\n\n    isolated function init(int i, string jobIdentifier) {\n        self.i = i;\n        self.jobIdentifier = jobIdentifier;\n    }\n}\n\npublic function main() returns error? {\n\n    \/\/ Gets the current time.\n    time:Utc currentUtc = time:utcNow();\n    \/\/ Increases the time by three seconds to set the starting delay for the scheduling job.\n    time:Utc newTime = time:utcAddSeconds(currentUtc, 5);\n    \/\/ Gets the `time:Civil` for the given time.\n    time:Civil time = time:utcToCivil(newTime);\n\n    \/\/ Schedules the tasks to execute the job every second.\n    task:JobId id1 = check task:scheduleJobRecurByFrequency(\n                            new Job(0, \"1st Job\"), 1);\n    task:JobId id2 = check task:scheduleJobRecurByFrequency(\n                            new Job(0, \"2nd Job\"), 3);\n    \/\/ Schedules the one-time job at the specified time.\n    _ = check task:scheduleOneTimeJob(new Job(0, \"3rd Job\"), time);\n\n    \/\/ Waits for 3 seconds.\n    runtime:sleep(3);\n\n    \/\/ Gets all the running jobs.\n    task:JobId[] result = task:getRunningJobs();\n    io:println(\"No of running jobs: \", result.length());\n\n    \/\/ Pauses the specified job.\n    check task:pauseJob(id1);\n    io:println(\"Pasused the 1st job.\");\n    \/\/ Waits for 3 seconds.\n    runtime:sleep(3);\n\n    \/\/ Resumes the specified job.\n    check task:resumeJob(id1);\n    io:println(\"Resumed the 1st job.\");\n\n    \/\/ Gets all the running jobs.\n    result = task:getRunningJobs();\n    io:println(\"No of running jobs: \", result.length());\n\n     \/\/ Waits for 3 seconds.\n    runtime:sleep(3);\n\n    \/\/ Unschedules the jobs.\n    check task:unscheduleJob(id1);\n    check task:unscheduleJob(id2);\n}", "outputFileName":"manage_scheduled_jobs.out", "output":"bal run manage_scheduled_jobs.bal\n1st Job, MyCounter: 1\n2nd Job, MyCounter: 1\n1st Job, MyCounter: 2\n1st Job, MyCounter: 3\n1st Job, MyCounter: 4\n2nd Job, MyCounter: 2\nNo of running jobs: 3\nPasused the 1st job.\n3rd Job, MyCounter: 1\n2nd Job, MyCounter: 3\nResumed the 1st job.\n1st Job, MyCounter: 5\n1st Job, MyCounter: 6\nNo of running jobs: 2\n1st Job, MyCounter: 7\n1st Job, MyCounter: 8\n1st Job, MyCounter: 9\n1st Job, MyCounter: 10\n2nd Job, MyCounter: 4"}], "description":"\/\/ The `task` library provides functions to manage the scheduled jobs such as pause, resume,\n\/\/ unschedule, and etc.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Regex module](https:\/\/docs.central.ballerina.io\/ballerina\/regex\/latest\/).", "metatags":"description: This BBE shows how to manage the scheduled jobs in Ballerina.\nkeywords: ballerina, ballerina by example, BBE, task, job, scheduler"}, {"bbeName":"maps", "resources":[{"tag":"maps", "balFileName":"maps.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    \/\/ Creates a `map` constrained by the type `int`.\n    map<int> m = {\n        \"x\": 1,\n        \"y\": 2\n    };\n\n    \/\/ Gets the entry for `x`.\n    int? v = m[\"x\"];\n\n    io:println(v);\n\n    \/\/ Adds a new entry for `z`.\n    m[\"z\"] = 5;\n\n    \/\/ Using `m[\"x\"]` wouldn't work here because type would be `int?`,\n    \/\/ not `int`.\n    m[\"z\"] = m.get(\"x\");\n\n}", "outputFileName":"maps.out", "output":"bal run maps.bal\n1"}], "description":"\/\/ The `map<T>` type is a `map` from strings to `T`. `map` syntax is similar to JSON. Maps are mutable: `m[k]` is an\n\/\/ `lvalue`. `foreach` will iterate over the values of the `map`. `m[k]` gets entry for `k`; `nil` if missing.\n\/\/ Use `m.get(k)` when you know that there is an entry for `k`. `m.keys()` can be used to iterate over keys,\n\/\/ to get the keys as an `array` of strings. `==` and `!=` on maps is deep: two maps are equal if they\n\/\/ have the same set of keys and the values for each key are equal.", "metatags":"description: This BBE demonstrates maps in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, maps"}, {"bbeName":"match-statement", "resources":[{"tag":"statement", "balFileName":"match_statement.bal", "bal":"import ballerina\/io;\n\nconst KEY = \"xyzzy\";\n\nfunction matchTest(any v) returns string {\n    \/\/ The value of the `v` variable is matched against the\n    \/\/ given value match patterns.\n    match v {\n        17 => {\n            return \"number\";\n        }\n        true => {\n            return \"boolean\";\n        }\n        \"str\" => {\n            return \"string\";\n        }\n        KEY => {\n            return \"constant\";\n        }\n        0|1 => {\n            return \"or\";\n        }\n        _ => {\n            return \"any\";\n        }\n    }\n\n}\n\npublic function main() {\n    io:println(matchTest(\"str\"));\n    io:println(matchTest(17));\n    io:println(matchTest(20.5));\n}", "outputFileName":"match_statement.out", "output":"bal run match_statement.bal\nstring\nnumber\nany"}], "description":"\/\/ `match` statement is similar to `switch` statement in `C` and `JavaScript`. It matches the value, not the type.\n\/\/ `==` is used to test whether left hand side matches the value being matched. Left hand side can be a\n\/\/ simple literal (`nil`, `boolean`, `int`, `float`, `string`) identifier referring to a constant.\n\/\/ Left hand side of `_` matches if the value is of type `any`. You can use `|` to match more than one value.", "metatags":"description: This BBE demonstrates match statement in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, match"}, {"bbeName":"match-statement-with-maps", "resources":[{"tag":"maps", "balFileName":"match_statement_with_maps.bal", "bal":"import ballerina\/io;\n\nfunction foo(json j) returns error? {\n    match j {\n        \/\/ Match statement can be used to match maps.\n        \/\/ Patterns on the left hand side in a match statement can have variable\n        \/\/ parts that can be captured.\n        \/\/ Match semantics are open (may have fields other than those \n        \/\/ specified in the pattern).\n        {command: \"add\", amount: var x} => {\n            decimal n = check x.ensureType(decimal);\n            add(n);\n            return;\n        }\n\n        _ => {\n            return error(\"invalid command\");\n        }\n    }\n}\n\ndecimal total = 0;\n\nfunction add(decimal amount) {\n    total += amount;\n    io:println(\"Total: \", total);\n}\n\npublic function main() returns error? {\n    check foo({command: \"add\", amount: 100, status: \"pending\"}); \n    check foo({command: \"add\", amount: 10});   \n    check foo({command: \"subtract\", amount: 100});\n    return;\n}", "outputFileName":"match_statement_with_maps.out", "output":"bal run match_statement_with_maps.bal\nTotal: 100.0\nTotal: 110.0\nerror: invalid command"}], "description":"\/\/ Match statement can be used to match maps.\n\/\/ Patterns on the left hand side in a match statement can have variable\n\/\/ parts that can be captured.\n\/\/ Useful for working directly with `json`.\n\/\/ Match semantics are open (may have fields other than those specified in the pattern).", "metatags":"description: This BBE demonstrates using the match statement with maps.\nkeywords: ballerina, ballerina by example, bbe, match, json, map"}, {"bbeName":"module-lifecycle", "resources":[{"tag":"lifecycle", "balFileName":"module_lifecycle.bal", "bal":"import ballerina\/io;\n\n\/\/ Usually it is an error to import a module without using it, but if you want to import a module because of what its initialization does,\n\/\/  then use `as _` as in this example.\nimport ballerina\/grpc as _;\n\n\/\/ A module can have an `init` function just like an object. \n\/\/ The initialization of a module ends by called its `init` function if there is one.\nfunction init() {\n    io:println(\"Hello world\");\n}", "outputFileName":"module_lifecycle.out", "output":"bal run module_lifecycle.bal\nHello world"}], "description":"\/\/ All modules are initialized at program startup. Module initialization is ordered so that if module A imports module B,\n\/\/ then module A is initialized after module B. The initialization phase ends by calling the `main` function if there is one. <br\/><br\/>\n\/\/ A module's listeners are registered during module initialization.\n\/\/ If there are registered listeners, then the initialization phase is followed by the listening phase. <br\/><br\/>\n\/\/ The listening phase starts by calling the `start` method on each registered listener. The listening phase is terminated by signal (e.g. `SIGINT`, `SIGTERM`).", "metatags":"description: This BBE explains module lifecycle and its various phases.\nkeywords:  ballerina, ballerina by example, bbe, module initialization, listener"}, {"bbeName":"multiple-key-fields", "resources":[{"tag":"fields", "balFileName":"multiple_key_fields.bal", "bal":"import ballerina\/io;\n\ntype Employee record {\n    readonly string firstName;\n    readonly string lastName;\n    int salary;\n};\n\npublic function main() {\n    \/\/ `t` has a key sequence with `firstName` and `lastName` fields.\n    table<Employee> key(firstName, lastName) t = table [\n        {firstName: \"John\", lastName: \"Smith\", salary: 100},\n        {firstName: \"Fred\", lastName: \"Bloggs\", salary: 200}\n    ];\n\n    \/\/ The key sequence provides keyed access to members of the `table`.\n    Employee? e = t[\"Fred\", \"Bloggs\"];\n\n\n    io:println(e);\n}", "outputFileName":"multiple_key_fields.out", "output":"bal run multiple_key_fields.bal\n{\"firstName\":\"Fred\",\"lastName\":\"Bloggs\",\"salary\":200}"}], "description":"\/\/ A `table` provides access to its members using a key that comes from the `read-only` fields of the member.\n\/\/ It is a key sequence, which is used to provide keyed access to its members. The key sequence is an ordered\n\/\/ sequence of field names.", "metatags":"description: This BBE demonstrates multiple key fields in tables in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, multiple key fields, keys"}, {"bbeName":"multiple-wait", "resources":[{"tag":"wait", "balFileName":"multiple_wait.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\n\ntype Result record {\n    string|error a;\n    string|error b;\n};\n\nfunction multiFetch(string urlA, string urlB) returns Result {\n    worker WA returns string|error {\n        return fetch(urlA);\n    }\n    worker WB returns string|error {\n        return fetch(urlB);\n    }\n\n    \/\/ The `wait` action can be used to wait for multiple named workers.\n    return wait {a: WA, b: WB};\n\n}\n\npublic function main() returns error? {\n    Result res =  multiFetch(\"https:\/\/postman-echo.com\/get?lang=ballerina\",\n                             \"https:\/\/postman-echo.com\/get?greeting=hello\");\n    io:println(res);\n    return;\n}\n\nfunction fetch(string url) returns string|error {\n    http:Client cl = check new (url);\n    map<json> payload = check cl->get(\"\");\n    return payload[\"args\"].toString();\n}", "outputFileName":"multiple_wait.out", "output":"bal run multiple_wait.bal\n{\"a\":\"{\"lang\":\"ballerina\"}\",\"b\":\"{\"greeting\":\"hello\"}\"}"}], "description":"\/\/ The `wait` action can be used to wait for multiple named workers.\n\/\/ Works with futures also.", "metatags":"description: This BBE demonstrates the multiple wait action\nkeywords: ballerina, ballerina by example, bbe, multiple wait, worker"}, {"bbeName":"mysql-atomic-batch-execute-operation", "resources":[{"tag":"operation", "balFileName":"mysql_atomic_batch_execute_operation.bal", "bal":"import ballerina\/io;\nimport ballerinax\/mysql;\nimport ballerina\/sql;\n\npublic function main() returns error? {\n    \/\/ Runs the prerequisite setup for the example.\n    check beforeExample();\n\n    \/\/ Initializes the MySQL client.\n    mysql:Client mysqlClient = check new (user = \"root\", \n            password = \"Test@123\", database = \"MYSQL_BBE\");\n\n    \/\/ Records with the duplicate `registrationID` entry. Here it is `registrationID` = 1.\n    var insertRecords = [\n        {\n            firstName: \"Linda\",\n            lastName: \"Jones\",\n            registrationID: 4,\n            creditLimit: 10000.75,\n            country: \"USA\"\n        }, \n        {\n            firstName: \"Peter\",\n            lastName: \"Stuart\",\n            registrationID: 1,\n            creditLimit: 5000.75,\n            country: \"USA\"\n        }, \n        {\n            firstName: \"Camellia\",\n            lastName: \"Potter\",\n            registrationID: 5,\n            creditLimit: 2000.25,\n            country: \"USA\"\n        }\n    ];\n\n    \/\/ Creates a batch parameterized query.\n    sql:ParameterizedQuery[] insertQueries = \n        from var data in insertRecords\n        select `INSERT INTO Customers\n                (firstName, lastName, registrationID, creditLimit, country)\n                VALUES (${data.firstName}, ${data.lastName},\n                ${data.registrationID}, ${data.creditLimit}, ${data.country})`;\n\n    \/\/ The transaction block can be used to roll back if any error occurred.\n    transaction {\n        var result = mysqlClient->batchExecute(insertQueries);\n        if result is sql:BatchExecuteError {\n            io:println(result.message());\n            io:println(result.detail()?.executionResults);\n            io:println(\"Rollback transaction.\\n\");\n            rollback;\n        } else {\n            error? err = commit;\n            if err is error {\n                io:println(\"Error occurred while committing: \", err);\n            }\n        }\n    }\n\n    \/\/ Checks the data after the batch execution.\n    stream<record {}, error?> resultStream =\n        mysqlClient->query(`SELECT * FROM Customers`);\n\n    io:println(\"Data in Customers table:\");\n    check resultStream.forEach(function(record {} result) {\n        io:println(result.toString());\n    });\n\n    \/\/ Performs a cleanup after the example.\n    check afterExample(mysqlClient);\n}\n\n\/\/ Initializes the database as a prerequisite to the example.\nfunction beforeExample() returns sql:Error? {\n    mysql:Client mysqlClient = check new (user = \"root\", password = \"Test@123\");\n\n    \/\/ Creates a database.\n    _ = check mysqlClient->execute(`CREATE DATABASE MYSQL_BBE`);\n\n    \/\/ Creates a table in the database.\n    _ = check mysqlClient->execute(`CREATE TABLE MYSQL_BBE.Customers\n            (customerId INTEGER NOT NULL AUTO_INCREMENT,\n            firstName VARCHAR(300), lastName  VARCHAR(300), registrationID\n            INTEGER UNIQUE, creditLimit DOUBLE, country  VARCHAR(300),\n            PRIMARY KEY (customerId))`);\n\n    \/\/ Adds records to the newly-created table.\n    _ = check mysqlClient->execute(`INSERT INTO MYSQL_BBE.Customers\n            (firstName, lastName, registrationID,creditLimit,country) VALUES\n             ('Peter', 'Stuart', 1, 5000.75, 'USA')`);\n\n    check mysqlClient.close();\n}\n\n\/\/ Cleans up the database after running the example.\nfunction afterExample(mysql:Client mysqlClient) returns sql:Error? {\n    \/\/ Cleans the database.\n    _ = check mysqlClient->execute(`DROP DATABASE MYSQL_BBE`);\n    \n    \/\/ Closes the MySQL client.\n    check mysqlClient.close();\n}", "outputFileName":"mysql_atomic_batch_execute_operation.out", "output":"# Create a Ballerina project.\n# Copy the example to the project and add relevant database driver jar details to the `Ballerina.toml` file.\n# Execute the command below to build and run the project.\nbal run\n\nError while executing batch command starting with: 'INSERT INTO Customers\n                (firstName, lastName, registrationID, creditLimit, country)\n                VALUES ( ? ,  ? ,\n                 ? ,  ? ,  ? )'.Duplicate entry '1' for key 'customers.registrationID'.\n[{\"affectedRowCount\":1,\"lastInsertId\":null},{\"affectedRowCount\":-3,\"lastInsertId\":null},{\"affectedRowCount\":1,\"lastInsertId\":null}]\nRollback transaction.\n\nData in Customers table:\n{\"customerId\":1,\"firstName\":\"Peter\",\"lastName\":\"Stuart\",\"registrationID\":1,\"creditLimit\":5000.75,\"country\":\"USA\"}"}], "description":"\/\/ This BBE demonstrates how to use the MySQL client to execute a batch of\n\/\/ DDL\/DML operations with the help of a `transaction` to achieve the atomic behaviour.\n\/\/ Note that the MySQL database driver JAR should be defined in\n\/\/ the `Ballerina.toml` file as a dependency.\n\/\/ For a sample configuration and more information on the underlying module, see the [MySQL module](https:\/\/docs.central.ballerina.io\/ballerinax\/mysql\/latest\/).\n\/\/ The MySQL connector uses database properties from MySQL version 8.0.13 onwards. Therefore, it is\n\/\/ recommended to use a MySQL driver version greater than 8.0.13.<br><br>", "metatags":"description: This BBE demonstrates how to use the MySQL client to execute a batch of DDL\/DML operations inside a transaction block in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, mysql, insert, update, delete, batch update, transaction"}, {"bbeName":"mysql-batch-execute-operation", "resources":[{"tag":"operation", "balFileName":"mysql_batch_execute_operation.bal", "bal":"import ballerina\/io;\nimport ballerinax\/mysql;\nimport ballerina\/sql;\n\npublic function main() returns error? {\n    \/\/ Runs the prerequisite setup for the example.\n    check beforeExample();\n\n    \/\/ Initializes the MySQL client.\n    mysql:Client mysqlClient = check new (user = \"root\", \n            password = \"Test@123\", database = \"MYSQL_BBE\");\n\n    \/\/ The records to be inserted.\n    var insertRecords = [\n        {\n            firstName: \"Peter\",\n            lastName: \"Stuart\",\n            registrationID: 1,\n            creditLimit: 5000.75,\n            country: \"USA\"\n        }, \n        {\n            firstName: \"Stephanie\",\n            lastName: \"Mike\",\n            registrationID: 2,\n            creditLimit: 8000.00,\n            country: \"USA\"\n        }, \n        {\n            firstName: \"Bill\",\n            lastName: \"John\",\n            registrationID: 3,\n            creditLimit: 3000.25,\n            country: \"USA\"\n        }\n    ];\n\n    \/\/ Creates a batch parameterized query.\n    sql:ParameterizedQuery[] insertQueries = \n        from var data in insertRecords\n        select `INSERT INTO Customers\n                (firstName, lastName, registrationID, creditLimit, country)\n                VALUES (${data.firstName}, ${data.lastName},\n                ${data.registrationID}, ${data.creditLimit}, ${data.country})`;\n\n    \/\/ Inserts the records with the auto-generated ID.\n    sql:ExecutionResult[] result = \n                            check mysqlClient->batchExecute(insertQueries);\n\n    int[] generatedIds = [];\n    foreach var summary in result {\n        generatedIds.push(<int>summary.lastInsertId);\n    }\n    io:println(\"\\nInsert success, generated IDs are: \", generatedIds, \"\\n\");\n\n    \/\/ Checks the data after the batch execution.\n    stream<record {}, error?> resultStream =\n        mysqlClient->query(`SELECT * FROM Customers`);\n\n    io:println(\"Data in Customers table:\");\n    check resultStream.forEach(function(record {} result) {\n        io:println(result.toString());\n    });\n\n    \/\/ Performs the cleanup after the example.\n    check afterExample(mysqlClient);\n}\n\n\/\/ Initializes the database as a prerequisite to the example.\nfunction beforeExample() returns sql:Error? {\n    mysql:Client mysqlClient = check new (user = \"root\", password = \"Test@123\");\n\n    \/\/ Creates a database.\n    _ = check mysqlClient->execute(`CREATE DATABASE MYSQL_BBE`);\n\n    \/\/ Creates a table in the database.\n    _ = check mysqlClient->execute(`CREATE TABLE MYSQL_BBE.Customers\n            (customerId INTEGER NOT NULL AUTO_INCREMENT,\n            firstName VARCHAR(300), lastName  VARCHAR(300),\n            registrationID INTEGER, creditLimit DOUBLE,\n            country  VARCHAR(300), PRIMARY KEY (customerId))`);\n\n    check mysqlClient.close();\n}\n\n\/\/ Cleans up the database after running the example.\nfunction afterExample(mysql:Client mysqlClient) returns sql:Error? {\n    \/\/ Cleans the database.\n    _ = check mysqlClient->execute(`DROP DATABASE MYSQL_BBE`);\n\n    \/\/ Closes the MySQL client.\n    check mysqlClient.close();\n}", "outputFileName":"mysql_batch_execute_operation.out", "output":"# Create a Ballerina project.\n# Copy the example to the project and add relevant database driver jar details to the `Ballerina.toml` file.\n# Execute the command below to build and run the project.\nbal run\n\nInsert success, generated IDs are: [1,2,3]\n\nData in Customers table:\n{\"customerId\":1,\"firstName\":\"Peter\",\"lastName\":\"Stuart\",\"registrationID\":1,\"creditLimit\":5000.75,\"country\":\"USA\"}\n{\"customerId\":2,\"firstName\":\"Stephanie\",\"lastName\":\"Mike\",\"registrationID\":2,\"creditLimit\":8000.0,\"country\":\"USA\"}\n{\"customerId\":3,\"firstName\":\"Bill\",\"lastName\":\"John\",\"registrationID\":3,\"creditLimit\":3000.25,\"country\":\"USA\"}"}], "description":"\/\/ This BBE demonstrates how to use the MySQL client to execute a batch of\n\/\/ DDL\/DML operations. Note that the MySQL database driver JAR should be defined in\n\/\/ the `Ballerina.toml` file as a dependency.\n\/\/ For a sample configuration and more information on the underlying module, see the [MySQL module](https:\/\/docs.central.ballerina.io\/ballerinax\/mysql\/latest\/).\n\/\/ The MySQL connector uses database properties from MySQL version 8.0.13 onwards. Therefore, it is\n\/\/ recommended to use a MySQL driver version greater than 8.0.13.<br><br>", "metatags":"description: This BBE demonstrates how to use the MySQL client to execute a batch of DDL\/DML operations in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, mysql, insert, update, delete, batch update"}, {"bbeName":"mysql-call-stored-procedures", "resources":[{"tag":"procedures", "balFileName":"mysql_call_stored_procedures.bal", "bal":"import ballerina\/io;\nimport ballerinax\/mysql;\nimport ballerina\/sql;\n\n\/\/ The `Student` record to represent the database table.\ntype Student record {\n    int id;\n    int age;\n    string name;\n};\n\npublic function main() returns error? {\n    \/\/ Runs the prerequisite setup for the example.\n    check beforeExample();\n\n    \/\/ Initializes the MySQL client.\n    mysql:Client mysqlClient = check new (user = \"root\", \n            password = \"Test@123\", database = \"MYSQL_BBE\");\n\n    \/\/ Creates a parameterized query to invoke the procedure.\n    string name = \"George\";\n    int age = 24;\n    sql:ParameterizedCallQuery sqlQuery = \n                                `CALL InsertStudent(${name}, ${age})`;\n\n    \/\/ Invokes the stored procedure `InsertStudent` with the `IN` parameters.\n    sql:ProcedureCallResult retCall = check mysqlClient->call(sqlQuery);\n    io:println(\"Call stored procedure `InsertStudent`.\" + \n        \"\\nAffected Row count: \", retCall.executionResult?.affectedRowCount);\n    check retCall.close();\n\n    \/\/ Initializes the `INOUT` and `OUT` parameters.\n    sql:InOutParameter id = new (1);\n    sql:IntegerOutParameter totalCount = new;\n    sql:ParameterizedCallQuery sqlQuery2 = \n                        `{CALL GetCount(${id}, ${totalCount})}`;\n\n    \/\/ The stored procedure with the `OUT` and `INOUT` parameters is invoked.\n    sql:ProcedureCallResult retCall2 = check mysqlClient->call(sqlQuery2);\n    io:println(\"Call stored procedure `GetCount`.\");\n    io:println(\"Age of the student with id '1' : \", id.get(int));\n    io:println(\"Total student count: \", totalCount.get(int));\n    check retCall2.close();\n\n    \/\/ Invokes the stored procedure, which returns the data.\n    sql:ProcedureCallResult retCall3 = \n            check mysqlClient->call(`{CALL GetStudents()}`, [Student]);\n    io:println(\"Call stored procedure `GetStudents`.\");\n\n    \/\/ Processes the returned result stream.\n    stream<record {}, sql:Error?>? result = retCall3.queryResult;\n    if result is stream<record {}, sql:Error?> {\n        stream<Student, sql:Error?> studentStream =\n                <stream<Student, sql:Error?>>result;\n        check studentStream.forEach(function(Student student) {\n            io:println(\"Student details: \", student);\n        });\n    }\n    check retCall3.close();\n\n    \/\/ Performs the cleanup after the example.\n    check afterExample(mysqlClient);\n}\n\n\/\/ Initializes the database as a prerequisite to the example.\nfunction beforeExample() returns sql:Error? {\n    mysql:Client mysqlClient = check new (user = \"root\", password = \"Test@123\");\n\n    \/\/ Creates a database.\n    _ = check mysqlClient->execute(`CREATE DATABASE MYSQL_BBE`);\n\n    \/\/ Creates a table in the database.\n    _ = check mysqlClient->execute(`CREATE TABLE MYSQL_BBE.Student\n            (id INT AUTO_INCREMENT, age INT, name VARCHAR(255),\n            PRIMARY KEY (id))`);\n\n    \/\/ Creates the necessary stored procedures using the execute command.\n    _ = check mysqlClient->execute(`CREATE PROCEDURE\n        MYSQL_BBE.InsertStudent (IN pName VARCHAR(255), IN pAge INT)\n        BEGIN INSERT INTO Student(age, name) VALUES (pAge, pName); END`);\n    _ = check mysqlClient->execute(`CREATE PROCEDURE MYSQL_BBE.GetCount\n        (INOUT pID INT, OUT totalCount INT) BEGIN SELECT age INTO pID FROM\n        Student WHERE id = pID; SELECT COUNT(*) INTO totalCount FROM Student;\n        END`);\n    _ = check mysqlClient->execute(`CREATE PROCEDURE\n        MYSQL_BBE.GetStudents() BEGIN SELECT * FROM Student; END`);\n\n    check mysqlClient.close();\n}\n\n\/\/ Cleans up the database after running the example.\nfunction afterExample(mysql:Client mysqlClient) returns sql:Error? {\n    \/\/ Cleans the database.\n    _ = check mysqlClient->execute(`DROP DATABASE MYSQL_BBE`);\n\n    \/\/ Closes the MySQL client.\n    check mysqlClient.close();\n}", "outputFileName":"mysql_call_stored_procedures.out", "output":"# Create a Ballerina project.\n# Copy the example to the project and add relevant database driver jar details to the `Ballerina.toml` file.\n# Execute the command below to build and run the project.\nbal run\n\nCall stored procedure `InsertStudent`.\nAffected Row count: 1\nCall stored procedure `GetCount`.\nAge of the student with id '1' : 24\nTotal student count: 1\nCall stored procedure `GetStudents`.\nStudent details: {\"id\":1,\"age\":24,\"name\":\"George\"}"}], "description":"\/\/ This BBE demonstrates how to use the MySQL client to execute a stored\n\/\/ procedure. Note that the MySQL database driver JAR should be defined in\n\/\/ the `Ballerina.toml` file as a dependency.\n\/\/ For a sample configuration and more information on the underlying module, see the [MySQL module](https:\/\/docs.central.ballerina.io\/ballerinax\/mysql\/latest\/).\n\/\/ The MySQL connector uses database properties from MySQL version 8.0.13 onwards. Therefore, it is\n\/\/ recommended to use a MySQL driver version greater than 8.0.13.<br><br>", "metatags":"description: This BBE demonstrates how to use the MySQL client to execute a stored procedure in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, mysql, call, stored procedure, delete, procedure"}, {"bbeName":"mysql-complex-type-queries", "resources":[{"tag":"queries", "balFileName":"mysql_complex_type_queries.bal", "bal":"import ballerina\/io;\nimport ballerinax\/mysql;\nimport ballerina\/sql;\nimport ballerina\/time;\n\n\/\/ The `BinaryType` record to represent the `BINARY_TYPES` database table.\ntype BinaryType record {|\n    int row_id;\n    byte[] blob_type;\n    byte[] binary_type;\n|};\n\n\/\/ The `JsonType` record to represent the `JSON_TYPES` database table.\ntype JsonType record {|\n    int row_id;\n    json json_doc;\n    json json_array;\n|};\n\n\/\/ The `DateTimeType` record to represent the `DATE_TIME_TYPES` database table.\ntype DateTimeType record {|\n    int row_id;\n    string date_type;\n    int time_type;\n    time:Utc timestamp_type;\n    string datetime_type;\n|};\n\npublic function main() returns error? {\n    \/\/ Runs the prerequisite setup for the example.\n    check beforeExample();\n\n    \/\/ Initializes the MySQL client.\n    mysql:Client mysqlClient = check new (user = \"root\", \n            password = \"Test@123\", database = \"MYSQL_BBE\");\n\n    \/\/ Since the `rowType` is provided as a `BinaryType`, the `binaryResultStream`\n    \/\/ will have `BinaryType` records.\n    stream<BinaryType, error?> binaryResultStream =\n                mysqlClient->query(`SELECT * FROM BINARY_TYPES`);\n\n    io:println(\"Binary types Result :\");\n    \/\/ Iterates the `binaryResultStream`.\n    check binaryResultStream.forEach(function(BinaryType result) {\n        io:println(result);\n    });\n\n    \/\/ Since the `rowType` is provided as an `JsonType`, the `jsonResultStream` will\n    \/\/ have `JsonType` records.\n    stream<JsonType, error?> jsonResultStream =\n                mysqlClient->query(`SELECT * FROM JSON_TYPES`);\n\n    io:println(\"Json type Result :\");\n    \/\/ Iterates the `jsonResultStream`.\n    check jsonResultStream.forEach(function(JsonType result) {\n        io:println(result);\n    });\n\n    \/\/ Since the `rowType` is provided as a `DateTimeType`, the `dateResultStream`\n    \/\/ will have `DateTimeType` records. The `Date`, `Time`, `DateTime`, and\n    \/\/ `Timestamp` fields of the database table can be mapped to `time:Utc`,\n    \/\/ string, and int types in Ballerina.\n    stream<DateTimeType, error?> dateResultStream =\n                mysqlClient->query(`SELECT * FROM DATE_TIME_TYPES`);\n\n    io:println(\"DateTime types Result :\");\n    \/\/ Iterates the `dateResultStream`.\n    check dateResultStream.forEach(function(DateTimeType result) {\n        io:println(result);\n    });\n\n    \/\/ Performs the cleanup after the example.\n    check afterExample(mysqlClient);\n}\n\n\/\/ Initializes the database as a prerequisite to the example.\nfunction beforeExample() returns sql:Error? {\n    mysql:Client mysqlClient = check new (user = \"root\", password = \"Test@123\");\n\n    \/\/ Creates a database.\n    _ = check mysqlClient->execute(`CREATE DATABASE MYSQL_BBE`);\n    \n    \/\/ Create complex data type tables in the database.\n    _ = check mysqlClient->execute(`CREATE TABLE MYSQL_BBE.BINARY_TYPES\n            (row_id INTEGER NOT NULL, blob_type BLOB(1024),  \n            binary_type BINARY(27), PRIMARY KEY (row_id))`);\n    _ = check mysqlClient->execute(`CREATE TABLE MYSQL_BBE.JSON_TYPES\n            (row_id INTEGER NOT NULL, json_doc JSON, json_array JSON,\n            PRIMARY KEY (row_id))`);\n    _ = check mysqlClient->execute(\n            `CREATE TABLE MYSQL_BBE.DATE_TIME_TYPES (row_id\n            INTEGER NOT NULL, date_type DATE, time_type TIME, \n            timestamp_type timestamp, datetime_type  datetime, \n            PRIMARY KEY (row_id))`);\n\n    \/\/ Adds the records to the newly-created tables.\n    _ = check mysqlClient->execute(`INSERT INTO MYSQL_BBE.BINARY_TYPES\n            (row_id, blob_type, binary_type) VALUES (1,\n            X'77736F322062616C6C6572696E6120626C6F6220746573742E',  \n            X'77736F322062616C6C6572696E612062696E61727920746573742E')`);\n    _ = check mysqlClient->execute(`INSERT INTO MYSQL_BBE.JSON_TYPES\n            (row_id, json_doc, json_array) VALUES (1, '{\"firstName\" : \"Jhon\",\n            \"lastName\" : \"Bob\", \"age\" : 18}', JSON_ARRAY(1, 2, 3))`);\n    _ = check mysqlClient->execute(\n            `Insert into MYSQL_BBE.DATE_TIME_TYPES (row_id,\n            date_type, time_type, timestamp_type, datetime_type) values (1, \n            '2017-05-23', '14:15:23', '2017-01-25 16:33:55', \n            '2017-01-25 16:33:55')`);\n\n    check mysqlClient.close();        \n}\n\n\/\/ Cleans up the database after running the example.\nfunction afterExample(mysql:Client mysqlClient) returns sql:Error? {\n    \/\/ Cleans the database.\n    _ = check mysqlClient->execute(`DROP DATABASE MYSQL_BBE`);\n    \n    \/\/ Closes the MySQL client.\n    check mysqlClient.close();\n}", "outputFileName":"mysql_complex_type_queries.out", "output":"# Create a Ballerina project.\n# Copy the example to the project and add relevant database driver jar details to the `Ballerina.toml` file.\n# Execute the command below to build and run the project.\nbal run\n\nBinary types Result :\n{\"row_id\":1,\"blob_type\":[119,115,111,50,32,98,97,108,108,101,114,105,110,97,32,98,108,111,98,32,116,101,115,116,46],\"binary_type\":[119,115,111,50,32,98,97,108,108,101,114,105,110,97,32,98,105,110,97,114,121,32,116,101,115,116,46]}\nJson type Result :\n{\"row_id\":1,\"json_doc\":{\"age\":18,\"lastName\":\"Bob\",\"firstName\":\"Jhon\"},\"json_array\":[1,2,3]}\nDateTime types Result :\n{\"row_id\":1,\"date_type\":\"2017-05-23\",\"time_type\":11723000,\"timestamp_type\":[1485342235,0],\"datetime_type\":\"2017-01-25 11:03:55.0\"}"}], "description":"\/\/ This BBE demonstrates how to use the MySQL client with complex data types\n\/\/ such as JSON, binary, blobs, and date\/time fields. Note that the MySQL database\n\/\/ driver JAR should be defined in the `Ballerina.toml` file as a dependency.\n\/\/ For a sample configuration and more information on the underlying module, see the [MySQL module](https:\/\/docs.central.ballerina.io\/ballerinax\/mysql\/latest\/).\n\/\/ The MySQL connector uses database properties from MySQL version 8.0.13 onwards. Therefore, it is\n\/\/ recommended to use a MySQL driver version greater than 8.0.13.<br><br>", "metatags":"description: This BBE on the use of MySQL client with complex data types such as JSON, binary, blobs, and date\/time fields in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, mysql, datatype, blobs, json, json_array, date, time"}, {"bbeName":"mysql-execute-operation", "resources":[{"tag":"operation", "balFileName":"mysql_execute_operation.bal", "bal":"import ballerina\/io;\nimport ballerinax\/mysql;\nimport ballerina\/sql;\n\npublic function main() returns error? {\n    \/\/ Runs the prerequisite setup for the example.\n    check beforeExample();\n\n    \/\/ Initializes the MySQL client.\n    mysql:Client mysqlClient = check new (user = \"root\", \n            password = \"Test@123\", database = \"MYSQL_BBE\");\n\n    float newCreditLimit = 15000.5;\n\n    \/\/ Creates a parameterized query for the record update.\n    sql:ParameterizedQuery updateQuery = \n            `UPDATE Customers SET creditLimit = ${newCreditLimit} \n            where customerId = 1`;\n\n    sql:ExecutionResult result = check mysqlClient->execute(updateQuery);\n    io:println(\"Updated Row count: \", result?.affectedRowCount);\n\n    string firstName = \"Dan\";\n\n    \/\/ Creates a parameterized query for deleting the records.\n    sql:ParameterizedQuery deleteQuery = \n            `DELETE FROM Customers WHERE firstName = ${firstName}`;\n\n    result = check mysqlClient->execute(deleteQuery);\n    io:println(\"Deleted Row count: \", result.affectedRowCount);\n\n    \/\/ Performs the cleanup after the example.\n    check afterExample(mysqlClient);\n}\n\n\/\/ Initializes the database as a prerequisite to the example.\nfunction beforeExample() returns sql:Error? {\n    mysql:Client mysqlClient = check new (user = \"root\", password = \"Test@123\");\n\n    \/\/ Creates a database.\n    sql:ExecutionResult result = \n        check mysqlClient->execute(`CREATE DATABASE MYSQL_BBE`);\n\n    \/\/Creates a table in the database.\n    result = check mysqlClient->execute(`CREATE TABLE MYSQL_BBE.Customers\n            (customerId INTEGER NOT NULL AUTO_INCREMENT, firstName  \n            VARCHAR(300), lastName  VARCHAR(300), registrationID INTEGER, \n            creditLimit DOUBLE, country VARCHAR(300),\n            PRIMARY KEY (customerId))`);\n\n    \/\/ Inserts data into the table. The result will have the `affectedRowCount`\n    \/\/ and `lastInsertedId` with the auto-generated ID of the last row.\n    result = check mysqlClient->execute(`INSERT INTO MYSQL_BBE.Customers\n            (firstName, lastName, registrationID,creditLimit,country) VALUES\n            ('Peter','Stuart', 1, 5000.75, 'USA')`);\n    result = check mysqlClient->execute(`INSERT INTO MYSQL_BBE.Customers\n            (firstName, lastName, registrationID,creditLimit,country) VALUES\n            ('Dan', 'Brown', 2, 10000, 'UK')`);\n\n    io:println(\"Rows affected: \", result.affectedRowCount);\n    io:println(\"Generated Customer ID: \", result.lastInsertId);\n\n    check mysqlClient.close();\n}\n\n\/\/ Cleans up the database after running the example.\nfunction afterExample(mysql:Client mysqlClient) returns sql:Error? {\n    \/\/ Cleans the database.\n    _ = check mysqlClient->execute(`DROP DATABASE MYSQL_BBE`);\n    \n    \/\/ Closes the MySQL client.\n    check mysqlClient.close();\n}", "outputFileName":"mysql_execute_operation.out", "output":"# Create a Ballerina project.\n# Copy the example to the project and add relevant database driver jar details to the `Ballerina.toml` file.\n# Execute the command below to build and run the project.\nbal run\n\nRows affected: 1\nGenerated Customer ID: 2\nUpdated Row count: 1\nDeleted Row count: 1"}], "description":"\/\/ This BBE demonstrates how to use the MySQL client with the DDL and  DML\n\/\/ operations. Note that the MySQL database driver JAR should be defined in the `Ballerina.toml` file as a dependency.\n\/\/ For a sample configuration and more information on the underlying module, see the [MySQL module](https:\/\/docs.central.ballerina.io\/ballerinax\/mysql\/latest\/).\n\/\/ The MySQL connector uses database properties from MySQL version 8.0.13 onwards. Therefore, it is\n\/\/ recommended to use a MySQL driver version greater than 8.0.13.<br><br>", "metatags":"description: This BBE demonstrates the use of a MySQL client with DDL and DML operations in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, mysql, insert, update, delete"}, {"bbeName":"mysql-query-operation", "resources":[{"tag":"operation", "balFileName":"mysql_query_operation.bal", "bal":"import ballerina\/io;\nimport ballerinax\/mysql;\nimport ballerina\/sql;\n\n\/\/ Defines a record to load the query result schema as shown below in the\n\/\/ 'getDataWithTypedQuery' function. In this example, all columns of the \n\/\/ customer table will be loaded. Therefore, the `Customer` record will be \n\/\/ created with all the columns. The column name of the result and the \n\/\/ defined field name of the record will be matched case insensitively.\ntype Customer record {|\n    int customerId;\n    string lastName;\n    string firstName;\n    int registrationId;\n    float creditLimit;\n    string country;\n|};\n\npublic function main() returns error? {\n    \/\/ Runs the prerequisite setup for the example.\n    check beforeExample();\n\n    \/\/ Initializes the MySQL client.\n    mysql:Client mysqlClient = check new (user = \"root\", \n            password = \"Test@123\", database = \"MYSQL_BBE\");\n\n    \/\/ Select the rows in the database table via the query remote operation.\n    \/\/ The result is returned as a stream and the elements of the stream can\n    \/\/ be either a record or an error. The name and type of the attributes \n    \/\/ within the record from the `resultStream` will be automatically \n    \/\/ identified based on the column name and type of the query result.\n    stream<record {}, error?> resultStream =\n            mysqlClient->query(`SELECT * FROM Customers`);\n\n    \/\/ If there is any error during the execution of the SQL query or\n    \/\/ iteration of the result stream, the result stream will terminate and\n    \/\/ return the error.\n    check resultStream.forEach(function(record {} result) {\n        io:println(\"Full Customer details: \", result);\n    });\n\n    \/\/ The result of the count operation is provided as a record stream.\n    stream<record {}, error?> resultStream2 =\n            mysqlClient->query(`SELECT COUNT(*) AS total FROM Customers`);\n\n    \/\/ Since the above count query will return only a single row,\n    \/\/ the `next()` operation is sufficient to retrieve the data.\n    record {|record {} value;|}|error? result = resultStream2.next();\n    \/\/ Checks the result and retrieves the value for the total.\n    if result is record {|record {} value;|} {\n        io:println(\"Total rows in customer table : \", result.value[\"total\"]);\n    }\n\n    \/\/ In general cases, the stream will be closed automatically\n    \/\/ when the stream is fully consumed or any error is encountered.\n    \/\/ However, in case if the stream is not fully consumed, the stream\n    \/\/ should be closed specifically.\n    check resultStream2.close();\n\n    \/\/ If a `Customer` stream type is defined when calling the query method,\n    \/\/ The result is returned as a `Customer` record stream and the elements\n    \/\/ of the stream can be either a `Customer` record or an error.\n    stream<Customer, error?> customerStream =\n        mysqlClient->query(`SELECT * FROM Customers`);\n\n    \/\/ Iterates the customer stream.\n    check customerStream.forEach(function(Customer customer) {\n        io:println(\"Full Customer details: \", customer);\n    });\n\n    \/\/ Performs the cleanup after the example.\n    check afterExample(mysqlClient);\n}\n\n\/\/ Initializes the database as a prerequisite to the example.\nfunction beforeExample() returns sql:Error? {\n    mysql:Client mysqlClient = check new (user = \"root\", password = \"Test@123\");\n\n    \/\/ Creates a database.\n    _ = check mysqlClient->execute(`CREATE DATABASE MYSQL_BBE`);\n\n    \/\/ Creates a table in the database.\n    _ = check mysqlClient->execute(`CREATE TABLE MYSQL_BBE.Customers\n            (customerId INTEGER NOT NULL AUTO_INCREMENT, firstName\n            VARCHAR(300), lastName  VARCHAR(300), registrationID INTEGER,\n            creditLimit DOUBLE, country  VARCHAR(300),\n            PRIMARY KEY (customerId))`);\n\n    \/\/ Adds the records to the newly-created table.\n    _ = check mysqlClient->execute(`INSERT INTO MYSQL_BBE.Customers\n            (firstName, lastName, registrationID,creditLimit,country) VALUES\n            ('Peter','Stuart', 1, 5000.75, 'USA')`);\n    _ = check mysqlClient->execute(`INSERT INTO MYSQL_BBE.Customers\n            (firstName, lastName, registrationID,creditLimit,country) VALUES\n            ('Dan', 'Brown', 2, 10000, 'UK')`);\n\n    check mysqlClient.close();\n}\n\n\/\/ Cleans up the database after running the example.\nfunction afterExample(mysql:Client mysqlClient) returns sql:Error? {\n    \/\/ Cleans the database.\n    _ = check mysqlClient->execute(`DROP DATABASE MYSQL_BBE`);\n\n    \/\/ Closes the MySQL client.\n    check mysqlClient.close();\n}", "outputFileName":"mysql_query_operation.out", "output":"# Create a Ballerina project.\n# Copy the example to the project and add relevant database driver jar details to the `Ballerina.toml` file.\n# Execute the command below to build and run the project.\nbal run\n\nFull Customer details: {\"customerId\":1,\"firstName\":\"Peter\",\"lastName\":\"Stuart\",\"registrationID\":1,\"creditLimit\":5000.75,\"country\":\"USA\"}\nFull Customer details: {\"customerId\":2,\"firstName\":\"Dan\",\"lastName\":\"Brown\",\"registrationID\":2,\"creditLimit\":10000.0,\"country\":\"UK\"}\nTotal rows in customer table : 2\nFull Customer details: {\"customerId\":1,\"firstName\":\"Peter\",\"lastName\":\"Stuart\",\"registrationId\":1,\"creditLimit\":5000.75,\"country\":\"USA\"}\nFull Customer details: {\"customerId\":2,\"firstName\":\"Dan\",\"lastName\":\"Brown\",\"registrationId\":2,\"creditLimit\":10000.0,\"country\":\"UK\"}"}], "description":"\/\/ This BBE demonstrates how to use the MySQL client select query operations\n\/\/ with the stream return type. Note that the MySQL database driver JAR should\n\/\/ be defined in the `Ballerina.toml` file as a dependency.\n\/\/ For a sample configuration and more information on the underlying module, see the [MySQL module](https:\/\/docs.central.ballerina.io\/ballerinax\/mysql\/latest\/).\n\/\/ The MySQL connector uses database properties from MySQL version 8.0.13 onwards. Therefore, it is\n\/\/ recommended to use a MySQL driver version greater than 8.0.13.<br><br>", "metatags":"description: This BBE demonstrates how to use the MySQL client select query operations with the stream return type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, MySQL, query, select, data"}, {"bbeName":"named-worker-return-values", "resources":[{"tag":"values", "balFileName":"named_worker_return_values.bal", "bal":"import ballerina\/io;\n\nfunction demo(string s) returns int|error {\n    \/\/ Named workers have a return type, which defaults to nil\n    \/\/ if not specified.\n    worker A returns int|error {\n        \/\/ A return statement in a named worker terminates \n        \/\/ the worker, not the function.\n        \/\/ Similarly, when `check` is used and the expression evaluates\n        \/\/ to an error, the error value is returned terminating only the worker.\n        int x = check int:fromString(s);\n        return x + 1;\n\n    }\n\n    io:println(\"In function worker\");\n\n    \/\/ Waiting on a named worker will give its return value.\n    int y = check wait A;\n\n    return y + 1;\n}\n\npublic function main() returns error? {\n    int res = check demo(\"50\");\n    io:println(res);\n\n    res = check demo(\"50m\");\n    io:println(res);\n    return;\n}", "outputFileName":"named_worker_return_values.out", "output":"bal run named_worker_return_values.bal\nIn function worker\n52\nIn function worker\nerror: {ballerina\/lang.int}NumberParsingError {\"message\":\"'string' value '50m' cannot be converted to 'int'\"}"}], "description":"\/\/ Named workers have a return type, which defaults to nil.\n\/\/ A return statement in a named worker terminates \n\/\/ the worker, not the function.\n\/\/ Similarly, when `check` is used and the expression evaluates\n\/\/ to an error, the error value is returned terminating the worker.\n\/\/ Waiting on a named worker will give its return value.", "metatags":"description: This BBE demonstrates named workers with return values\nkeywords: ballerina, ballerina by example, bbe, worker, return"}, {"bbeName":"named-workers", "resources":[{"tag":"workers", "balFileName":"named_workers.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    \/\/ Code before any named workers is executed before named \n    \/\/ workers start.\n    io:println(\"Initializing\");\n    final string greeting = \"Hello\";\n\n    \/\/ A function can declare named workers, which run concurrently with the\n    \/\/ function's default worker and other named workers.\n    worker A {\n        \/\/ Variables declared before all named workers and function \n        \/\/ parameters are accessible in named workers.\n        io:println(greeting + \" from worker A\");\n\n    }\n\n    worker B {\n        io:println(greeting + \" from worker B\");\n    }\n\n    io:println(greeting + \" from function worker\");\n}", "outputFileName":"named_workers.out", "output":"bal run named_workers.bal\nInitializing\nHello from function worker\nHello from worker B\nHello from worker A"}], "description":"\/\/ Normally all of a function's code belongs to the function's default worker, \n\/\/ which has a single logical thread of control.\n\/\/ A function can also declare named workers, which run concurrently with the\n\/\/ function's default worker and other named workers.\n\/\/ Code before any named workers is executed before named workers start.\n\/\/ Variables declared before all named workers and function parameters are\n\/\/ accessible in named workers.", "metatags":"description: This BBE demonstrates how workers can be used for concurrency\nkeywords: ballerina, ballerina by example, bbe, worker, concurrency"}, {"bbeName":"named-workers-and-futures", "resources":[{"tag":"futures", "balFileName":"named_workers_and_futures.bal", "bal":"import ballerina\/io;\n\nfunction demo() returns future<int> {\n    worker A returns int {\n        return 42;\n    }\n    \n    \/\/ Futures and workers are the same thing.\n    \/\/ A reference to a named worker can be implicitly converted into a future.\n    return A;\n\n}\n\ntype FuncInt function () returns int;\n\nfunction startInt(FuncInt f) returns future<int> {\n    \/\/ `start` is sugar for calling a function with a named worker and returning\n    \/\/ the named worker as a future.\n    return start f();\n\n}\n\npublic function main() returns error? {\n    future<int> a = demo();\n    int b = check wait a;\n    io:println(b);\n\n    future<int> c = startInt(() => 100);\n    int d = check wait c;\n    io:println(d);\n\n    return;\n}", "outputFileName":"named_workers_and_futures.out", "output":"bal run named_workers_and_futures.bal\n42\n100"}], "description":"\/\/ Futures and workers are the same thing.\n\/\/ A reference to a named worker can be implicitly converted into a future.\n\/\/ `start` is sugar for calling a function with a named worker and returning\n\/\/ the named worker as a future.\n\/\/ Cancellation of futures only happens at yield points.", "metatags":"description: This BBE demonstrates futures\nkeywords: ballerina, ballerina by example, bbe, future"}, {"bbeName":"nats-basic-pub-sub", "resources":[{"tag":"publisher", "balFileName":"publisher.bal", "bal":"import ballerinax\/nats;\n\npublic function main() returns error? {\n    string message = \"Hello from Ballerina\";\n    \/\/ Initializes a NATS client.\n    nats:Client natsClient = check new(nats:DEFAULT_URL);\n\n    \/\/ Produces a message to the specified subject.\n    check natsClient->publishMessage({\n                             content: message.toBytes(),\n                             subject: \"demo.bbe\"});\n\n    \/\/ Closes the client connection.\n    check natsClient.close();\n}", "outputFileName":"publisher.out", "output":"bal run publisher.bal"}, {"tag":"subscriber", "balFileName":"subscriber.bal", "bal":"import ballerina\/log;\nimport ballerinax\/nats;\n\n\/\/ Initializes a NATS listener.\nlistener nats:Listener subscription = new(nats:DEFAULT_URL);\n\n\/\/ Binds the consumer to listen to the messages published\n\/\/ to the 'demo.bbe' subject.\nservice \"demo.bbe\" on subscription {\n\n    remote function onMessage(nats:Message message) returns error? {\n\n        \/\/ Logs the incoming message.\n        string|error messageContent = string:fromBytes(message.content);\n        if messageContent is string {\n            log:printInfo(\"Received message: \" + messageContent);\n        }\n    }\n}", "outputFileName":"subscriber.out", "output":"bal run subscriber.bal\ntime = 2021-05-19T10:15:49.269+05:30 level = INFO module = \"\" message = \"Received message: Hello from Ballerina\""}], "description":"\/\/ The NATS client is used either to produce a message to a subject or consume a message from a subject.\n\/\/ In order to execute this example, it is required that a NATS server is up and running on its default host, port, and cluster.\n\/\/ For instructions on installing the NATS server,\n\/\/ go to [NATS Server Installation](https:\/\/docs.nats.io\/nats-server\/installation).<br\/><br\/>\n\/\/ This is a simple publish\/subscribe messaging pattern example.\n\/\/ For more information on the underlying module, \n\/\/ see the [`nats` module](https:\/\/docs.central.ballerina.io\/ballerinax\/nats\/latest).", "metatags":"description: BBE on producing and consuming a message from a subject in the NATS basic server using Ballerina.\nkeywords: ballerina, ballerina by example, bbe, nats, basic, server, publish, subscribe"}, {"bbeName":"nats-basic-request-reply", "resources":[{"tag":"publisher", "balFileName":"publisher.bal", "bal":"import ballerina\/io;\nimport ballerinax\/nats;\n\npublic function main() returns error? {\n    string message = \"Hello from Ballerina\";\n    \/\/ Initializes a NATS client.\n    nats:Client natsClient = check new(nats:DEFAULT_URL);\n\n    \/\/ Sends a request and returns the reply.\n    nats:Message reply = check natsClient->requestMessage({\n                             content: message.toBytes(),\n                             subject: \"demo.bbe\"});\n\n    \/\/ Prints the reply message.\n    string replyContent = check string:fromBytes(reply.content);\n    io:println(\"Reply message: \" + replyContent);\n\n    \/\/ Closes the client connection.\n    check natsClient.close();\n}", "outputFileName":"publisher.out", "output":"bal run publisher.bal\nReply message: Hello Back!"}, {"tag":"subscriber", "balFileName":"subscriber.bal", "bal":"import ballerina\/log;\nimport ballerinax\/nats;\n\n\/\/ Initializes the NATS listener.\nlistener nats:Listener subscription = new(nats:DEFAULT_URL);\n\n\/\/ Binds the consumer to listen to the messages published\n\/\/ to the 'demo.bbe' subject.\nservice \"demo.bbe\" on subscription {\n\n    remote function onRequest(nats:Message message) returns string {\n\n        \/\/ Logs the incoming message.\n        string|error messageContent = string:fromBytes(message.content);\n        if (messageContent is string) {\n            log:printInfo(\"Received message: \" + messageContent);\n        }\n\n        \/\/ Sends the reply message to the `replyTo` subject\n        \/\/ of the received message.\n        return \"Hello Back!\";\n    }\n}", "outputFileName":"subscriber.out", "output":"bal run subscriber.bal\ntime = 2021-05-19T10:14:09.200+05:30 level = INFO module = \"\" message = \"Received message: Hello from Ballerina\""}], "description":"\/\/ The NATS client is used either to produce a message to a subject or consume a message from a subject.\n\/\/ In order to execute this example, it is required that a NATS server is up and running on its default host, port, and cluster.\n\/\/ For instructions on installing the NATS server,\n\/\/ go to [NATS Server Installation](https:\/\/docs.nats.io\/nats-server\/installation).<br\/><br\/>\n\/\/ This is a simple request\/reply messaging pattern example.\n\/\/ For more information on the underlying module, \n\/\/ see the [`nats` module](https:\/\/docs.central.ballerina.io\/ballerinax\/nats\/latest).", "metatags":"description: BBE on producing and consuming a message from a subject in the NATS basic server using Ballerina.\nkeywords: ballerina, ballerina by example, bbe, nats, basic, server, request, reply"}, {"bbeName":"nats-basic-secure-connection", "resources":[{"tag":"publisher", "balFileName":"publisher.bal", "bal":"import ballerinax\/nats;\n\npublic function main() returns error? {\n\n    string message = \"Hello from Ballerina\";\n\n    \/\/ Initializes a NATS client with TLS\/SSL and username\/password authentication.\n    nats:Client natsClient = check new(nats:DEFAULT_URL,\n\n        \/\/ To secure the client connections using username\/password authentication, provide the credentials\n        \/\/ with the [`nats:Credentials`](https:\/\/docs.central.ballerina.io\/ballerinax\/nats\/latest\/records\/Credentials) record.\n        auth = {\n             username: \"alice\",\n             password: \"alice@123\"\n        },\n\n        \/\/ To secure the client connection using TLS\/SSL, the client needs to be configured with\n        \/\/ a certificate file of the server.\n        \/\/ The [`nats:SecureSocket`](https:\/\/docs.central.ballerina.io\/ballerinax\/nats\/latest\/records\/SecureSocket)\n        \/\/ record provides the SSL-related configurations of the client.\n        secureSocket = {\n            cert: \"..\/resource\/path\/to\/public.crt\"\n        }\n    );\n\n    \/\/ Produces a message to the specified subject.\n    check natsClient->publishMessage({\n                             content: message.toBytes(),\n                             subject: \"security.demo\"});\n\n    \/\/ Closes the client connection.\n    check natsClient.close();\n}", "outputFileName":"publisher.out", "output":"bal run publisher.bal"}, {"tag":"subscriber", "balFileName":"subscriber.bal", "bal":"import ballerina\/log;\nimport ballerinax\/nats;\n\n\/\/ Initializes a NATS listener with TLS\/SSL and username\/password authentication.\nlistener nats:Listener securedEP = new(nats:DEFAULT_URL,\n\n    \/\/ To secure the client connections using username\/password authentication, provide the credentials\n    \/\/ with the [`nats:Credentials`](https:\/\/docs.central.ballerina.io\/ballerinax\/nats\/latest\/records\/Credentials) record.\n    auth = {\n         username: \"alice\",\n         password: \"alice@123\"\n    },\n\n    \/\/ To secure the client connection using TLS\/SSL, the client needs to be configured with\n    \/\/ a certificate file of the server.\n    \/\/ The [`nats:SecureSocket`](https:\/\/docs.central.ballerina.io\/ballerinax\/nats\/latest\/records\/SecureSocket)\n    \/\/ record provides the SSL-related configurations of the client.\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\n\/\/ Binds the consumer to listen to the messages published\n\/\/ to the 'security.demo' subject.\nservice \"security.demo\" on securedEP {\n\n    remote function onMessage(nats:Message message) returns error? {\n        string|error messageContent = string:fromBytes(message.content);\n        if messageContent is string {\n            log:printInfo(\"Received message: \" + messageContent);\n        }\n    }\n}", "outputFileName":"subscriber.out", "output":"bal run subscriber.bal\ntime = 2021-05-19T10:15:49.269+05:30 level = INFO module = \"\" message = \"Received message: Hello from Ballerina\""}], "description":"\/\/ In this example, the underlying connections of the subscriber and the publisher are\n\/\/ secured with TLS\/SSL and basic authentication.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [`nats` module](https:\/\/docs.central.ballerina.io\/ballerinax\/nats\/latest).", "metatags":"description: BBE on producing and consuming a message from a subject in the NATS basic server using Ballerina.\nkeywords: ballerina, ballerina by example, bbe, nats, basic, ssl, tls, authentication"}, {"bbeName":"nats-streaming-durable-subscriptions", "resources":[{"tag":"publisher", "balFileName":"publisher.bal", "bal":"import ballerina\/io;\nimport ballerinax\/stan;\n\n\/\/ Produces a message to a subject in the NATS sever.\npublic function main() returns error? {\n    string message = \"Hello from Ballerina\";\n    stan:Client stanClient = check new(stan:DEFAULT_URL);\n\n    \/\/ Produces a message to the specified subject.\n    string result = check stanClient->publishMessage({\n                                    content: message.toBytes(),\n                                    subject: \"demo\"});\n    io:println(\"GUID \" + result + \" received for the produced message.\");\n    \/\/ Closes the client connection.\n    check stanClient.close();\n}", "outputFileName":"publisher.out", "output":"bal run publisher.bal\nGUID m2jS6SLLefK325DWTkkwBh received for the produced message."}, {"tag":"subscriber", "balFileName":"subscriber.bal", "bal":"import ballerina\/log;\nimport ballerinax\/stan;\n\n\/\/ Initializes the NATS Streaming listener with a specific client ID.\nlistener stan:Listener lis = new(stan:DEFAULT_URL, clientId = \"c0\");\n\n\/\/ Provides the durable name to create a durable subscription.\n@stan:ServiceConfig {\n    subject: \"demo\",\n    durableName: \"sample-name\"\n}\nservice stan:Service on lis {\n    remote function onMessage(stan:Message message) {\n        \/\/ Prints the incoming message in the console.\n        string|error messageData = string:fromBytes(message.content);\n        if messageData is string {\n            log:printInfo(\"Received message: \" + messageData);\n        }\n    }\n}", "outputFileName":"subscriber.out", "output":"bal run subscriber.bal\ntime = 2021-05-20T13:03:23.344+05:30 level = INFO module = \"\" message = \"Received message: Hello from Ballerina\"\n\n# Stop the subscriber and publish some messages while it is stopped.\n# Run the subscriber again.\n# All messages which had been published while the subscriber\n# wasn't running should be received.\n\nbal run subscriber.bal\ntime = 2021-05-20T13:03:46.928+05:30 level = INFO module = \"\" message = \"Received message: Hello from Ballerina\""}], "description":"\/\/ This sample demonstrates creating a durable subscription\n\/\/ in the NATS Streaming server. Regular subscriptions remember\n\/\/ their position while the client is connected. If the client\n\/\/ disconnects, the position is lost. Durable subscriptions\n\/\/ remember their position even if the client is disconnected.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [STAN module](https:\/\/docs.central.ballerina.io\/ballerinax\/stan\/latest).", "metatags":"description: BBE on creating a durable subscription in the NATS Streaming server using Ballerina.\nkeywords: ballerina, ballerina by example, bbe, nats, streaming, server, subscriber, durable"}, {"bbeName":"nats-streaming-pub-sub", "resources":[{"tag":"publisher", "balFileName":"publisher.bal", "bal":"import ballerina\/io;\nimport ballerinax\/stan;\n\n\/\/ Produces a message to a subject in the NATS sever.\npublic function main() returns error? {\n    string message = \"Hello from Ballerina\";\n    stan:Client stanClient = check new(stan:DEFAULT_URL);\n\n    \/\/ Produces a message to the specified subject.\n    string result = check stanClient->publishMessage({\n                                    content: message.toBytes(),\n                                    subject: \"demo\"});\n    io:println(\"GUID \" + result + \" received for the produced message.\");\n    \/\/ Closes the client connection.\n    check stanClient.close();\n}", "outputFileName":"publisher.out", "output":"bal run publisher.bal\nGUID m2jS6SLLefK325DWTkkwBh received for the produced message."}, {"tag":"subscriber", "balFileName":"subscriber.bal", "bal":"import ballerina\/log;\nimport ballerinax\/stan;\n\n\/\/ Initializes the NATS Streaming listener.\nlistener stan:Listener lis = new(stan:DEFAULT_URL);\n\n\/\/ Binds the consumer to listen to the messages published to the 'demo' subject.\n@stan:ServiceConfig {\n    subject: \"demo\"\n}\nservice stan:Service on lis {\n    remote function onMessage(stan:Message message) {\n        \/\/ Prints the incoming message in the console.\n        string|error messageData = string:fromBytes(message.content);\n        if messageData is string {\n            log:printInfo(\"Received message: \" + messageData);\n        }\n    }\n}", "outputFileName":"subscriber.out", "output":"bal run subscriber.bal\ntime = 2021-05-20T12:51:47.417+05:30 level = INFO module = \"\" message = \"Received message: Hello from Ballerina\""}], "description":"\/\/ This sample demonstrates a basic publish\/subscribe implementation of the NATS Streaming client\n\/\/ In order to run this sample, a NATS Streaming server should be\n\/\/ running on the corresponding port used in the sample.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [STAN module](https:\/\/docs.central.ballerina.io\/ballerinax\/stan\/latest).", "metatags":"description: BBE on producing and consuming a message from a subject in NATS streaming server using Ballerina.\nkeywords: ballerina, ballerina by example, bbe, nats, streaming, server, subscriber, publisher"}, {"bbeName":"nats-streaming-queue-group", "resources":[{"tag":"publisher", "balFileName":"publisher.bal", "bal":"import ballerina\/io;\nimport ballerinax\/stan;\n\n\/\/ Represents the escape character.\nconst string ESCAPE = \"!q\";\n\n\/\/ Produces a message to a subject in the NATS Streaming sever.\npublic function main() returns error? {\n    string message = \"\";\n    stan:Client publisher = check new(stan:DEFAULT_URL);\n\n    while (message != ESCAPE) {\n        message = io:readln(\"Message: \");\n        if message != ESCAPE {\n\n            \/\/ Produces a message to the specified subject.\n            string result = check publisher->publishMessage({\n                                    content: message.toBytes(),\n                                    subject: \"demo\"});\n            io:println(\"GUID \" + result +\n                            \" received for the produced message.\");\n        }\n    }\n}", "outputFileName":"publisher.out", "output":"bal run publisher.bal\nMessage: First Message\nGUID ywNe3mXd96jFL33ouJbFfg received for the produced message.\nMessage: Second Message\nGUID ywNe3mXd96jFL33ouJbFkp received for the produced message.\nMessage: Third Message\nGUID ywNe3mXd96jFL33ouJbFpy received for the produced message."}, {"tag":"queue-group", "balFileName":"queue-group.bal", "bal":"import ballerina\/log;\nimport ballerinax\/stan;\n\n\/\/ Initializes the NATS Streaming listeners.\nlistener stan:Listener lis = new(stan:DEFAULT_URL);\n\n\/\/ Binds the consumer to listen to the messages published to the 'demo' subject.\n\/\/ Belongs to the queue group named \"sample-queue-group\"\n@stan:ServiceConfig {\n    subject: \"demo\",\n    queueGroup: \"sample-queue-group\"\n}\nservice stan:Service on lis {\n    remote function onMessage(stan:Message message) {\n       \/\/ Prints the incoming message in the console.\n       string|error messageData = string:fromBytes(message.content);\n       if messageData is string {\n            log:printInfo(\"Message Received to first queue group member: \"\n                                                        + messageData);\n       }\n    }\n}\n\n\/\/ Belongs to the queue group named \"sample-queue-group\"\n@stan:ServiceConfig {\n    subject: \"demo\",\n    queueGroup: \"sample-queue-group\"\n}\nservice stan:Service on lis {\n    remote function onMessage(stan:Message message) {\n       \/\/ Prints the incoming message in the console.\n       string|error messageData = string:fromBytes(message.content);\n       if messageData is string {\n            log:printInfo(\"Message Received to second queue group member: \"\n                                                        + messageData);\n       }\n    }\n}\n\n\/\/ Belongs to the queue group named \"sample-queue-group\"\n@stan:ServiceConfig {\n    subject: \"demo\",\n    queueGroup: \"sample-queue-group\"\n}\nservice stan:Service on lis {\n    remote function onMessage(stan:Message message) {\n       \/\/ Prints the incoming message in the console.\n       string|error messageData = string:fromBytes(message.content);\n       if messageData is string {\n            log:printInfo(\"Message Received to third queue group member: \"\n                                                        + messageData);\n       }\n    }\n}", "outputFileName":"queue-group.out", "output":"# `queue-group.bal` contains three services belonging to the same\n# queue group.\n# When several messages are published, it can be noticed that\n# each message is received by only one queue group member.\nbal run queue-group.bal\nMessage Received to first queue group member: First Message\nMessage Received to third queue group member: Second Message\nMessage Received to second queue group member: Third Message"}], "description":"\/\/ This sample demonstrates leveraging the NATS built-in load balancing\n\/\/ feature called \"distributed queues\". All subscribers with the\n\/\/ same queue name form the queue group.  As messages on the registered\n\/\/ subject are published, one member of the group is chosen randomly\n\/\/ to receive the message. Although queue groups have multiple subscribers,\n\/\/ each message is consumed by only one.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [STAN module](https:\/\/docs.central.ballerina.io\/ballerinax\/stan\/latest).", "metatags":"description: BBE on leveraging the NATS built-in load balancing feature called \"distributed queues\" using Ballerina.\nkeywords: ballerina, ballerina by example, bbe, nats, distributed, queues"}, {"bbeName":"nats-streaming-secure-connection", "resources":[{"tag":"publisher", "balFileName":"publisher.bal", "bal":"import ballerina\/io;\nimport ballerinax\/stan;\n\n\/\/ Produces a message to a subject in the NATS streaming sever.\npublic function main() returns error? {\n    string message = \"Hello from Ballerina\";\n\n    \/\/ Initializes the NATS Streaming client with TLS\/SSL and username\/password authentication.\n    stan:Client stanClient = check new(stan:DEFAULT_URL,\n        clusterId = \"my_secure_cluster\",\n\n        \/\/ To secure the client connections using username\/password authentication, provide the credentials\n        \/\/ with the [`stan:Credentials`](https:\/\/docs.central.ballerina.io\/ballerinax\/stan\/latest\/records\/Credentials) record.\n        auth = {\n             username: \"alice\",\n             password: \"alice@123\"\n        },\n\n        \/\/ To secure the client connection using TLS\/SSL, the client needs to be configured with\n        \/\/ a certificate file of the server.\n        \/\/ The [`stan:SecureSocket`](https:\/\/docs.central.ballerina.io\/ballerinax\/stan\/latest\/records\/SecureSocket)\n        \/\/ record provides the SSL-related configurations of the client.\n        secureSocket = {\n            cert: \"..\/resource\/path\/to\/public.crt\"\n        }\n    );\n\n    \/\/ Produces a message to the specified subject.\n    string result = check stanClient->publishMessage({\n                                    content: message.toBytes(),\n                                    subject: \"demo\"});\n    io:println(\"GUID \" + result + \" received for the produced message.\");\n    \/\/ Closes the client connection.\n    check stanClient.close();\n}", "outputFileName":"publisher.out", "output":"bal run publisher.bal\nGUID m2jS6SLLefK325DWTkkwBh received for the produced message."}, {"tag":"subscriber", "balFileName":"subscriber.bal", "bal":"import ballerina\/log;\nimport ballerinax\/stan;\n\n\/\/ Initializes the NATS Streaming listener with TLS\/SSL and username\/password authentication.\nlistener stan:Listener securedEP = new(stan:DEFAULT_URL,\n    clusterId = \"my_secure_cluster\",\n\n    \/\/ To secure the client connections using username\/password authentication, provide the credentials\n    \/\/ with the [`stan:Credentials`](https:\/\/docs.central.ballerina.io\/ballerinax\/stan\/latest\/records\/Credentials) record.\n    auth = {\n         username: \"alice\",\n         password: \"alice@123\"\n    },\n\n    \/\/ To secure the client connection using TLS\/SSL, the client needs to be configured with\n    \/\/ a certificate file of the server.\n    \/\/ The [`stan:SecureSocket`](https:\/\/docs.central.ballerina.io\/ballerinax\/stan\/latest\/records\/SecureSocket)\n    \/\/ record provides the SSL-related configurations of the client.\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\n\/\/ Binds the consumer to listen to the messages published to the 'security.demo' subject.\n@stan:ServiceConfig {\n    subject: \"security.demo\"\n}\nservice stan:Service on securedEP {\n    remote function onMessage(stan:Message message) {\n        \/\/ Prints the incoming message in the console.\n        string|error messageData = string:fromBytes(message.content);\n        if messageData is string {\n            log:printInfo(\"Received message: \" + messageData);\n        }\n    }\n}", "outputFileName":"subscriber.out", "output":"bal run subscriber.bal\ntime = 2021-05-20T12:51:47.417+05:30 level = INFO module = \"\" message = \"Received message: Hello from Ballerina\""}], "description":"\/\/ In this example, the underlying connections of the subscriber and the publisher are\n\/\/ secured with TLS\/SSL and basic authentication.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [STAN module](https:\/\/docs.central.ballerina.io\/ballerinax\/stan\/latest).", "metatags":"description: BBE on producing and consuming a message from a subject in the NATS streaming server using Ballerina.\nkeywords: ballerina, ballerina by example, bbe, stan, credentials, tls, ssl, authentication"}, {"bbeName":"nats-streaming-start-position", "resources":[{"tag":"publisher", "balFileName":"publisher.bal", "bal":"import ballerina\/io;\nimport ballerinax\/stan;\n\n\/\/ Represents the escape character.\nconst string ESCAPE = \"!q\";\n\n\/\/ Produces a message to a subject in the NATS Streaming sever.\npublic function main() returns error? {\n    string message = \"\";\n    stan:Client publisher = check new(stan:DEFAULT_URL);\n\n    while (message != ESCAPE) {\n        message = io:readln(\"Message: \");\n        if message != ESCAPE {\n\n            \/\/ Produces a message to the specified subject.\n            string result = check publisher->publishMessage({\n                                    content: message.toBytes(),\n                                    subject: \"demo\"});\n            io:println(\"GUID \" + result +\n                            \" received for the produced message.\");\n        }\n    }\n}", "outputFileName":"publisher.out", "output":"bal run publisher.bal\nMessage: First Message\nGUID UBMEgrERHdxZRqUBP05PtD received for the produced message.\nMessage: Second Message\nGUID UBMEgrERHdxZRqUBP05Puz received for the produced message.\nMessage: Third Message\nGUID UBMEgrERHdxZRqUBP05Pwl received for the produced message.\nMessage: Forth Message\nGUID UBMEgrERHdxZRqUBP05PyX received for the produced message."}, {"tag":"subscriber", "balFileName":"subscriber.bal", "bal":"import ballerina\/log;\nimport ballerinax\/stan;\n\n\/\/ Initializes the NATS Streaming listener.\nlistener stan:Listener lis = new(stan:DEFAULT_URL);\n\n\/\/ Binds the consumer to listen to the messages published to the 'demo' subject.\n\/\/ By default, only new messages are received.\n@stan:ServiceConfig {\n    subject: \"demo\"\n}\nservice stan:Service on lis {\n    remote function onMessage(stan:Message message) {\n        \/\/ Prints the incoming message in the console.\n        string|error messageData = string:fromBytes(message.content);\n        if messageData is string {\n            log:printInfo(\"Message Received to service receiveNewOnly: \"\n                + messageData);\n        }\n    }\n}\n\n\/\/ Binds the consumer to listen to the messages published to the 'demo' subject.\n\/\/ Receives all the messages from the beginning.\n@stan:ServiceConfig {\n    subject: \"demo\",\n    startPosition: stan:FIRST\n}\nservice stan:Service on lis {\n    remote function onMessage(stan:Message message) {\n        \/\/ Prints the incoming message in the console.\n        string|error messageData = string:fromBytes(message.content);\n        if messageData is string {\n            log:printInfo(\"Message Received to service receiveFromBegining: \"\n                + messageData);\n        }\n    }\n}\n\n\/\/ Binds the consumer to listen to the messages published to the 'demo' subject.\n\/\/ Receives messages starting from the last received message.\n@stan:ServiceConfig {\n    subject: \"demo\",\n    startPosition: stan:LAST_RECEIVED\n}\nservice stan:Service on lis {\n    remote function onMessage(stan:Message message) {\n        \/\/ Prints the incoming message in the console.\n        string|error messageData = string:fromBytes(message.content);\n        if messageData is string {\n            log:printInfo(\"Message Received to service \" +\n            \"receiveFromLastReceived: \" + messageData);\n        }\n    }\n}\n\n[stan:SEQUENCE_NUMBER, int] sequenceNo = [stan:SEQUENCE_NUMBER, 3];\n\/\/ Binds the consumer to listen to the messages published to the 'demo' subject.\n\/\/ Receives messages starting from the provided sequence number.\n@stan:ServiceConfig {\n    subject: \"demo\",\n    startPosition: sequenceNo\n}\nservice stan:Service on lis {\n    remote function onMessage(stan:Message message) {\n        \/\/ Prints the incoming message in the console.\n        string|error messageData = string:fromBytes(message.content);\n        if messageData is string {\n            log:printInfo(\"Message Received to service receiveFromGivenIndex: \"\n                + messageData);\n        }\n    }\n}\n\n[stan:TIME_DELTA_START, int] timeDelta = [stan:TIME_DELTA_START, 5];\n\/\/ Binds the consumer to listen to the messages published to the 'demo' subject.\n\/\/ Receives messages since the provided historical time delta.\n@stan:ServiceConfig {\n    subject: \"demo\",\n    startPosition: timeDelta\n}\nservice stan:Service on lis {\n    remote function onMessage(stan:Message message) {\n        \/\/ Prints the incoming message in the console.\n        string|error messageData = string:fromBytes(message.content);\n        if messageData is string {\n            log:printInfo(\"Message Received to service receiveSinceTimeDelta: \"\n                + messageData);\n        }\n    }\n}", "outputFileName":"subscriber.out", "output":"# When you start the subscriber after publishing several messages,\n# You'll notice that,\n# 1. `receiveSinceTimeDelta` service receives the messages if\n#     the messages were sent within a historical offset of 5 seconds\n#     from the current server date\/time\n# 2. `receiveFromGivenIndex` service receives services messages\n#     starting from the third message published.\n# 3. `receiveFromLastReceived` service receives messages starting\n#     from the last published message.\n# 4. `receiveFromBeginning` service receives all messages ever\n#     published\n# 5. `receiveNewOnly` service receives only the messages, which are\n#    published after the subscriber starts.\n\nbal run subscriber.bal\nMessage Received to service receiveSinceTimeDelta: Third Message\nMessage Received to service receiveFromGivenIndex: Third Message\nMessage Received to service receiveFromLastReceived: Third Message\nMessage Received to service receiveFromBeginning: First Message\nMessage Received to service receiveFromBeginning: Second Message\nMessage Received to service receiveFromBeginning: Third Message\nMessage Received to service receiveFromGivenIndex: Forth Message\nMessage Received to service receiveFromLastReceived: Forth Message\nMessage Received to service receiveNewOnly: Forth Message\nMessage Received to service receiveSinceTimeDelta: Forth Message\nMessage Received to service receiveFromBeginning: Forth Message"}], "description":"\/\/ This sample demonstrates leveraging the historical\n\/\/ message replay feature of Streaming NATS.\n\/\/ New subscriptions may specify a starting position in the stream of\n\/\/ messages stored for the channel of the subscribed subject.\n\/\/ Message delivery may begin at:\n\/\/ 1. The earliest message stored for this subject\n\/\/ 2. The most recently stored message for this subject\n\/\/    prior to the start of the current subscription.\n\/\/ 3. A historical offset from the current server date\/time\n\/\/    (e.g., the last 30 seconds).\n\/\/ 4. A specific message sequence number<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [STAN module](https:\/\/docs.central.ballerina.io\/ballerinax\/stan\/latest).", "metatags":"description: BBE on using the historical message replay feature of NATS streaming server using Ballerina.\nkeywords: ballerina, ballerina by example, bbe, nats, streaming, message, replay"}, {"bbeName":"nil", "resources":[{"tag":"nil", "balFileName":"nil.bal", "bal":"import ballerina\/io;\n\n\/\/ Here type `int?` indicates that the value of `v` can be an `int` or `()`.\nint? v = ();\n\n\/\/ Here the value of `n` cannot be `()`.\nint? n = v == () ? 0 : v;\n\n\/\/ Elvis operator `x ?: y` returns `x` if it is not `nil` and `y` otherwise.\nint m = v ?: 0;\n\n\/\/ Falling off the end of a function or `return` by itself is equivalent to `return ()`.\nfunction foo() returns () {\n    return ();\n}\n\n\/\/ Leaving off return type is equivalent to `returns ()`.\npublic function main() {\n\n    io:println(v);\n}", "outputFileName":"nil.out", "output":"bal run nil.bal"}], "description":"\/\/ Ballerina's version of `null` is called `nil` and written as `()`. \n\/\/ Ballerina types do not implicitly allow `nil`.\n\/\/ Type `T?` means `T` or `nil`. You can use `==` and `!=` to test whether a value is `nil`: no implicit conversion to\n\/\/ `boolean`.", "metatags":"description: This BBE introduces the nil type in Ballerina.\nkeywords:  ballerina, ballerina by example, bbe, nil, null"}, {"bbeName":"object", "resources":[{"tag":"object", "balFileName":"object.bal", "bal":"import ballerina\/io;\n\nclass MyClass {\n    int n;\n\n    function init(int n) {\n        self.n = n;\n    }\n\n    function func() {\n        self.n += 1;\n    }\n}\n\npublic function main() {\n    \/\/ Apply `new` operator to a class to get an object.\n    MyClass x = new MyClass(1234);\n\n    \/\/ Call method using `obj.foo(args)`.\n    x.func();\n\n    \/\/ Access field using `obj.x`.\n    int n = x.n;\n\n    io:println(n);\n}", "outputFileName":"object.out", "output":"bal run object.bal\n1235"}], "description":"\/\/ Object is a separate basic type.\n\/\/ An object value has named methods and fields.\n\/\/ Methods and fields are in the same symbol space.\n\/\/ A class both defines an object type and provides a way to construct an object.\n\/\/ Apply `new` operator to a class to get an object.\n\/\/ Call method using `obj.foo(args)`.\n\/\/ Access field using `obj.x`.", "metatags":"description: This BBE demonstrates objects in Ballerina\nkeywords:  ballerina, ballerina by example, bbe, object, class"}, {"bbeName":"open-records", "resources":[{"tag":"records", "balFileName":"open_records.bal", "bal":"import ballerina\/io;\n\n\/\/ `Person` type allows additional fields with `anydata` values.\ntype Person record {\n    string name;\n};\n\n\/\/ `Employee` type allows additional fields with `anydata` values.\ntype Employee record {\n    string name;\n    int id;\n};\n\n\/\/ Adds an additional `id` field to `e`.\nEmployee e = {\n    name: \"James\", id: 10\n};\n\n\/\/ You can assign an `Employee` type value to a `Person`.\nPerson p = e;\n\nPerson p2 = {\n    name: \"John\", \"country\": \"UK\"\n};\n\n\/\/ You can assign a `Person` type value to a `map`.\nmap<anydata> m = p2;\n\npublic function main() {\n    io:println(p);\n    io:println(m);\n}", "outputFileName":"open_records.out", "output":"bal run open_records.bal\n{\"name\":\"James\",\"id\":10}\n{\"name\":\"John\",\"country\":\"UK\"}"}], "description":"\/\/ Record types are by default open: they allow fields other than those specified. The type of unspecified\n\/\/ fields are `anydata`. Records are `maps`. Open records belongs to `map<anydata>`. Use quoted keys for\n\/\/ fields not mentioned in the `record` type.", "metatags":"description: This BBE demonstrates open records in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, open record"}, {"bbeName":"optional-fields", "resources":[{"tag":"fields", "balFileName":"optional_fields.bal", "bal":"import ballerina\/io;\n\ntype Headers record {\n   string 'from;\n   string to;\n\n   \/\/ Records can have optional fields\n   string subject?;\n\n};\n\nHeaders h = {\n  'from: \"John\",\n  to: \"Jill\"\n};\n\n\/\/Use ?. operator to access optional field\nstring? subject = h?.subject;\n\npublic function main() {\n    io:println(\"Header value: \", h);\n    io:println(\"Subject value:\", subject);\n}", "outputFileName":"optional_fields.out", "output":"bal run optional_fields.bal\nHeader value: {\"from\":\"John\",\"to\":\"Jill\"}\nSubject value:"}], "description":"\/\/ Fields of a record can be marked as optional. These fields can be omitted when creating a record.\n\/\/ Such fields can be accessed via optional field access (e.g., `p?.name`) or member access (e.g., `p[\"name\"]`)\n\/\/ which will both return `()` if the field is not present in the record.", "metatags":"description: This BBE demonstrates optional record fields in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, optional, fields, record"}, {"bbeName":"ordering", "resources":[{"tag":"ordering", "balFileName":"ordering.bal", "bal":"import ballerina\/io;\n\ntype Employee record {\n    string firstName;\n    string lastName;\n    decimal salary;\n};\n\npublic function main() {\n    Employee[] employees = [\n        {firstName: \"Jones\", lastName: \"Welsh\", salary: 1000.00},\n        {firstName: \"Anne\", lastName: \"Frank\", salary: 5000.00}\n    ];\n\n    Employee[] sorted = from var e in employees\n                        \/\/ The `order by` clause sorts the output items based on the\n                        \/\/ given `order-key` and `order-direction`. The `order-key`\n                        \/\/ must be an `ordered` type. The `order-direction` is `ascending`\n                        \/\/ if not specified explicitly.\n                        order by e.lastName ascending, e.firstName ascending\n\n\n                        select e;\n    io:println(sorted);\n}", "outputFileName":"ordering.out", "output":"bal run ordering.bal\n[{\"firstName\":\"Anne\",\"lastName\":\"Frank\",\"salary\":5000.00},{\"firstName\":\"Jones\",\"lastName\":\"Welsh\",\"salary\":1000.00}]"}], "description":"\/\/ Ordering works consistently with `<`, `<=`, `>`, `>=` operators. Some comparisons involving\n\/\/ `()` and `float NaN` are considered `unordered`. `order by` clause allows `expressions` not just\n\/\/ `field access`. A library module can enable Unicode-aware sorting by providing a\n\/\/ `unicode:sortKey(str, locale)` function.", "metatags":"description: This BBE demonstrates ordering in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, ordering, order by clause"}, {"bbeName":"panics", "resources":[{"tag":"panics", "balFileName":"panics.bal", "bal":"import ballerina\/io;\n\n\/\/ `n` must not be `0`.\nfunction divide(int m, int n) returns int {\n\n    if n == 0 {\n        \/\/ Panic if `n` is `0`.\n        panic error(\"division by 0\");\n\n    }\n    return m\/n;\n}\n\npublic function main() {\n    int x = divide(1, 0);\n\n    \/\/ Since `divide(1, 0)` panics, the program will\n    \/\/ terminate and the following code will not be\n    \/\/ executed.\n    io:println(x);\n\n}", "outputFileName":"panics.out", "output":"bal run panics.bal\nerror: division by 0\n        at panics:divide(panics.bal:8)\n           panics:main(panics.bal:15)"}], "description":"\/\/ Ballerina distinguishes normal errors from abnormal errors.\n\/\/ Normal errors are handled by returning error values.\n\/\/ Abnormal errors are handled using the panic statement.\n\/\/ Abnormal errors should typically result in immediate program termination.\n\/\/ e.g., A programming bug or out of memory.\n\/\/ A panic has an associated error value.", "metatags":"description: This BBE demonstrates how abnormal errors are handled using panics in Ballerina\nkeywords:  ballerina, ballerina by example, bbe, error, panic"}, {"bbeName":"plain-data", "resources":[], "description":"\/\/ Ballerina has concept of \"plain data\": data that is independent of any specific code operating on the data.\n\/\/ The network interfaces between programs are based on plain data. It is the opposite of objects, which combine\n\/\/ data and code. Plain data supports deep copy and deep equality. Plain data supports serialization\/deserialization\n\/\/ without coupling. Key goal of Ballerina is to facilitate programs that work on plain data.", "metatags":"description: This BBE demonstrates plain data in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, plain data"}, {"bbeName":"programs-and-modules", "resources":[{"tag":"modules", "balFileName":"programs_and_modules.bal", "bal":"\/\/ This import declaration binds the prefix `io` to the `ballerina\/io` module. \n\/\/ The prefix by default comes form the last part of the module name.\n\/\/ The `ballerina` org name is reserved for the standard library modules.\nimport ballerina\/io;\n\n\/\/ `main` function is the program entry point. \n\/\/ `public` makes function visible outside the module.\npublic function main() {\n    \/\/ Here `io:println` means function `println` is in the module bound to prefix `io`.\n    io:println(\"Hello, World!\");\n\n}", "outputFileName":"programs_and_modules.out", "output":"bal run programs_and_modules.bal\nHello, World!"}], "description":"\/\/ Every Ballerina program consists of modules. Modules are one or more `.bal` files. \n\/\/ The module names take the form `org\/x.y.z`.", "metatags":"description: This BBE introduces Ballerina modules and how you can import them in your program.\nkeywords:  ballerina, ballerina by example, bbe, module, program"}, {"bbeName":"proto-to-ballerina", "resources":[{"tag":"ballerina", "balFileName":"", "bal":"", "outputFileName":"proto_to_ballerina.out", "output":"# Execute the command below in the Ballerina tools distribution to generate the mock service.\nbal grpc --input proto_to_ballerina.proto --mode service --output service\n\n# Execute the command below in the Ballerina tools distribution to generate the client endpoint and the stub file.\nbal grpc --input proto_to_ballerina.proto --mode client --output client\n\n# Execute the command below in the Ballerina tools distribution to generate the stub file.\nbal grpc --input proto_to_ballerina.proto"}], "description":"\/\/ If you already have protocol buffer file for your service(s) you can use that to autogenerate Ballerina source code.\n\/\/ Currently, Ballerina supports two types of code generation. `service` generation generates a mock version of the\n\/\/ Ballerina service for an input proto definition.  `client` generation generates a Ballerina client endpoint for an\n\/\/ input proto definition.\n\/\/ The Ballerina code generator supports the following parameters:\n\/\/ `--input` The path of the .proto file. This is a mandatory parameter.\n\/\/ `--output` The file location in which the Ballerina client\/service and the stub must be generated. This is an optional parameter.\n\/\/ If no value is specified for this parameter and proto definition doesn't contain package value,\n\/\/ the Ballerina client\/service and the stub files are generated inside `temp` directory in the current location.\n\/\/ This path must be a project directory.\n\/\/ `--mode` The mode (client or server) to generate code samples.\n\/\/ If no value is specified for this parameter, only the stub file will be generated.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [GRPC module](https:\/\/docs.central.ballerina.io\/ballerina\/grpc\/latest\/) and \n\/\/ [How to generate Ballerina code for Protocol Buffer Definition](https:\/\/ballerina.io\/learn\/how-to-generate-code-for-protocol-buffers\/).", "metatags":"description: This BBE guides how to generate Ballerina code from a Protocol Buffer definition\nkeywords: ballerina, ballerina by example, bbe, grpc, protobuf, protocol buffer"}, {"bbeName":"providing-services", "resources":[{"tag":"services", "balFileName":"providing_services.bal", "bal":"import ballerina\/http;\n\n\/\/ Listener declarations are allowed at the module level. \n\/\/ They are similar to variable declarations, but register the newly created Listener object with the module.\n\/\/ If `new` returns an error, then module initialization fails.\nlistener http:Listener h = new (8080);", "outputFileName":"providing_services.out", "output":"bal run providing_services.bal\n"}], "description":"\/\/ Providing services involves the interaction of three main things <br\/><br\/>\n\/\/\n\/\/ 1) Service objects are the counterpart of client objects. Service objects also have remote methods and they are remotely accessible to clients.\n\/\/ Remote method of a client object typically calls the remote method of a service object.\n\/\/\n\/\/ 2) Listener is the entity that receives the network input and then it makes calls to remote methods of attached service objects.\n\/\/ Listeners are registered with the module as illustrated in the following example.\n\/\/\n\/\/ 3) Modules have a lifecycle and they are initialized on program startup. Modules start up the registered listeners after the initialization and\n\/\/ shut them down during the program shutdown.", "metatags":"description: This BBE explains various constructs that are related to proving services.\nkeywords:  ballerina, ballerina by example, bbe, Listener, Service, Service Object, Module"}, {"bbeName":"query-expressions", "resources":[{"tag":"expressions", "balFileName":"query_expressions.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    int[] nums = [1, 2, 3, 4];\n\n    \/\/ The `from` clause works similar to a `foreach` statement.\n    int[] numsTimes10 = from var i in nums\n                        \/\/ The `select` clause is evaluated for each iteration.\n                        select i * 10;\n\n                        \n    io:println(numsTimes10);\n\n    \/\/ This is based on\n    \/\/\n    \/\/ `{ 10 × i | i ? nums }`\n    \/\/\n    \/\/ `{ i | i mod 2 = 0, i ? nums }`\n    \/\/\n    \/\/ set builder notation.\n    int[] evenNums = from var i in nums\n                     where i % 2 == 0\n                     select i;\n\n    io:println(evenNums);\n}", "outputFileName":"query_expressions.out", "output":"bal run query_expressions.bal\n[10,20,30,40]\n[2,4]"}], "description":"\/\/ Query-like expressions start with `from` clause and end with `select` clause. It is a\n\/\/ list comprehension, based on mathematical \"set builder\" notation.", "metatags":"description: This BBE demonstrates query expressions in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, query, query expression, iterable"}, {"bbeName":"querying-tables", "resources":[{"tag":"tables", "balFileName":"querying_tables.bal", "bal":"import ballerina\/io;\n\ntype Employee record {|\n    readonly int id;\n    string firstName;\n    string lastName;\n    int salary;\n|};\n\npublic function main() {\n    table<Employee> key(id) employees = table [\n        {id: 1, firstName: \"John\", lastName: \"Smith\", salary: 100},\n        {id: 2, firstName: \"Fred\", lastName: \"Bloggs\", salary: 200}\n    ];\n\n    \/\/ `from` clause iterates `employees` `table`.\n    \/\/ The contextually-expected type of the `query expression` is an `int[]`.\n    int[] salaries = from var {salary} in employees\n                     select salary;\n\n\n    io:println(salaries);\n}", "outputFileName":"querying_tables.out", "output":"bal run querying_tables.bal\n[100,200]"}], "description":"\/\/ Tables can be nicely combined with `query expressions` unlike `maps`. Basic type of the output of\n\/\/ `query expression` is determined by the contextually expected type and the input type.", "metatags":"description: This BBE demonstrates querying tables in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, querying tables, table"}, {"bbeName":"querying-with-streams", "resources":[{"tag":"streams", "balFileName":"querying_with_streams.bal", "bal":"import ballerina\/io;\n\ntype Error error;\n\ntype LS stream<string, Error?>;\n\ntype ValueRecord record {|\n    string value;\n|};\n\nconst SAMPLE_LINE_COUNT = 5;\n\nclass LineGenerator {\n    int i = -1;\n    string inputString;\n\n    public function init(string str) {\n        self.inputString = str;\n    }\n\n    public isolated function next() returns ValueRecord|Error? {\n        self.i += 1;\n        if (self.i < SAMPLE_LINE_COUNT) {\n            if (self.i % 2 == 0) {\n                return {value: self.inputString};\n            }\n            return {value: \"\"};\n        }\n        return;\n    }\n}\n\n\/\/ This method strips the blank lines.\nfunction strip(LS lines) returns LS {\n    \/\/ Creates a `stream` from the query expression.\n    LS res = stream from var line in lines\n             where line.trim().length() > 0\n             select line;\n\n    return res;\n}\n\nfunction count(LS lines) returns int|Error {\n    int nLines = 0;\n    \/\/ Counts the number of lines by iterating the `stream`\n    \/\/ in `query action`.\n    var _ = check from var _ in lines\n              do {\n                  nLines += 1;\n              };\n\n    return nLines;\n}\n\npublic function main() {\n    LineGenerator generator = new (\"Everybody can dance\");\n    LS inputLineStream = new (generator);\n\n    LS strippedStream = strip(inputLineStream);\n\n    int|Error nonBlankCount = count(strippedStream);\n\n    if (nonBlankCount is int) {\n        io:println(\"Input line count:\" + SAMPLE_LINE_COUNT.toString());\n        io:println(\"Non blank line count:\" + nonBlankCount.toString());\n    }\n\n}", "outputFileName":"querying_with_streams.out", "output":"bal run querying_with_streams.bal\nInput line count:5\nNon blank line count:3"}], "description":"\/\/ If stream terminates with `error`, result of `query expression` is an `error`. You cannot use `foreach`\n\/\/ on `stream` type with termination type that allows `error`. Instead use `from` with `do` clause; the\n\/\/ result is a subtype of `error?`. Use `stream` keyword in front of `from` to create a `stream` which is\n\/\/ lazily evaluated. The failure of `check` within the `query` will cause the `stream` to produce an\n\/\/ `error` termination value.", "metatags":"description: This BBE demonstrates querying with streams in Ballerina.\nkeywords: ballerina, ballerina by example, bbe,"}, {"bbeName":"rabbitmq-consumer", "resources":[{"tag":"consumer", "balFileName":"rabbitmq_consumer.bal", "bal":"import ballerina\/log;\nimport ballerinax\/rabbitmq;\n\nlistener rabbitmq:Listener channelListener =\n        new(rabbitmq:DEFAULT_HOST, rabbitmq:DEFAULT_PORT);\n\n\/\/ The consumer service listens to the \"MyQueue\" queue.\n\/\/ The `ackMode` is by default rabbitmq:AUTO_ACK where messages are acknowledged\n\/\/ immediately after consuming.\n@rabbitmq:ServiceConfig {\n    queueName: \"MyQueue\"\n}\n\/\/ Attaches the service to the listener.\nservice rabbitmq:Service on channelListener {\n    remote function onMessage(rabbitmq:Message message) {\n        string|error messageContent = string:fromBytes(message.content);\n        if messageContent is string {\n            log:printInfo(\"Received message: \" + messageContent);\n        }\n    }\n}", "outputFileName":"rabbitmq_consumer.out", "output":"bal run rabbitmq_consumer.bal\ntime = 2021-05-20T14:49:11.011+05:30 level = INFO module = \"\" message = \"Received message: Hello from Ballerina\""}], "description":"\/\/ In this example, the messages are consumed from an\n\/\/ existing queue using the Ballerina RabbitMQ message listener.\n\/\/ The Ballerina RabbitMQ connection used here can be re-used to create\n\/\/ multiple channels.\n\/\/ Multiple services consuming messages from the same queue or from\n\/\/ different queues can be attached to the same Listener.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [RabbitMQ module](https:\/\/docs.central.ballerina.io\/ballerinax\/rabbitmq\/latest).", "metatags":"description: BBE on consuming messages from a RabbitMQ queue in an asynchronous manner using Ballerina.\nkeywords: ballerina, ballerina by example, rabbitmq, consumer, bbe, service, asynchronous"}, {"bbeName":"rabbitmq-consumer-with-client-acknowledgement", "resources":[{"tag":"acknowledgement", "balFileName":"rabbitmq_consumer_with_client_acknowledgement.bal", "bal":"import ballerina\/log;\nimport ballerinax\/rabbitmq;\n\nlistener rabbitmq:Listener channelListener =\n        new(rabbitmq:DEFAULT_HOST, rabbitmq:DEFAULT_PORT);\n\n\/\/ The consumer service listens to the \"MyQueue\" queue.\n\/\/ The `ackMode` is by default rabbitmq:AUTO_ACK where messages are acknowledged\n\/\/ immediately after consuming.\n@rabbitmq:ServiceConfig {\n    queueName: \"MyQueue\"\n}\n\/\/ Attaches the service to the listener.\nservice rabbitmq:Service on channelListener {\n    remote function onMessage(rabbitmq:Message message,\n                                                    rabbitmq:Caller caller) {\n        string|error messageContent = string:fromBytes(message.content);\n        if messageContent is string {\n            log:printInfo(\"Received message: \" + messageContent);\n        }\n\n        \/\/ Positively acknowledges a single message.\n        rabbitmq:Error? result = caller->basicAck();\n    }\n}", "outputFileName":"rabbitmq_consumer_with_client_acknowledgement.out", "output":"bal run rabbitmq_consumer_with_client_acknowledgement.bal\ntime = 2021-05-20T14:53:56.067+05:30 level = INFO module = \"\" message = \"Received message: Hello from Ballerina\""}], "description":"\/\/ In this example, the messages are consumed from an\n\/\/ existing queue using the Ballerina RabbitMQ message listener.\n\/\/ The received messages are acknowledged manually.\n\/\/ By default, the ackMode is rabbitmq:AUTO_ACK, which will automatically acknowledge\n\/\/ all messages once consumed.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [RabbitMQ module](https:\/\/docs.central.ballerina.io\/ballerinax\/rabbitmq\/latest).", "metatags":"description: BBE on manually acknowledging the messages consumed from a RabbitMQ queue using Ballerina.\nkeywords: ballerina, ballerina by example, rabbitmq, consumer, bbe, acknowledgment"}, {"bbeName":"rabbitmq-producer", "resources":[{"tag":"producer", "balFileName":"rabbitmq_producer.bal", "bal":"import ballerinax\/rabbitmq;\n\npublic function main() returns error? {\n    \/\/ Creates a ballerina RabbitMQ client.\n    rabbitmq:Client newClient =\n                check new(rabbitmq:DEFAULT_HOST, rabbitmq:DEFAULT_PORT);\n\n    \/\/ Declares the queue, MyQueue.\n    check newClient->queueDeclare(\"MyQueue\");\n\n    \/\/ Publishing messages to an exchange using a routing key.\n    \/\/ Publishes the message using newClient and the routing key named MyQueue.\n    string message = \"Hello from Ballerina\";\n    check newClient->publishMessage({ content: message.toBytes(),\n                                            routingKey: \"MyQueue\" });\n}", "outputFileName":"rabbitmq_producer.out", "output":"bal run rabbitmq_producer.bal"}], "description":"\/\/ In this example, messages are sent to two different queues,\n\/\/ to one queue using the same channel and to the other using two different channels.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [RabbitMQ module](https:\/\/docs.central.ballerina.io\/ballerinax\/rabbitmq\/latest).", "metatags":"description: BBE on producing messages to a RabbitMQ queue using Ballerina.\nkeywords: ballerina, ballerina by example, rabbitmq, producer, bbe, client"}, {"bbeName":"rabbitmq-secure-connection", "resources":[{"tag":"consumer", "balFileName":"consumer.bal", "bal":"import ballerina\/log;\nimport ballerinax\/rabbitmq;\n\nlistener rabbitmq:Listener securedEP = new(rabbitmq:DEFAULT_HOST, 5671,\n\n    \/\/ To secure the client connections using username\/password authentication, provide the credentials\n    \/\/ with the [`rabbitmq:Credentials`](https:\/\/docs.central.ballerina.io\/ballerinax\/rabbitmq\/latest\/records\/Credentials) record.\n    auth = {\n         username: \"alice\",\n         password: \"alice@123\"\n    },\n\n    \/\/ To secure the client connection using TLS\/SSL, the client needs to be configured with\n    \/\/ a certificate file of the server.\n    \/\/ The [`rabbitmq:SecureSocket`](https:\/\/docs.central.ballerina.io\/ballerinax\/rabbitmq\/latest\/records\/SecureSocket)\n    \/\/ record provides the SSL-related configurations of the client.\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\n@rabbitmq:ServiceConfig {\n    queueName: \"Secured\"\n}\n\/\/ Attaches the service to the listener.\nservice rabbitmq:Service on securedEP {\n    remote function onMessage(rabbitmq:Message message) {\n        string|error messageContent = string:fromBytes(message.content);\n        if (messageContent is string) {\n            log:printInfo(\"Received message: \" + messageContent);\n        }\n    }\n}", "outputFileName":"consumer.out", "output":"bal run consumer.bal\ntime = 2021-05-20T14:49:11.011+05:30 level = INFO module = \"\" message = \"Received message: Hello from Ballerina\""}, {"tag":"producer", "balFileName":"producer.bal", "bal":"import ballerinax\/rabbitmq;\n\npublic function main() returns error? {\n    \/\/ Creates a ballerina RabbitMQ client with TLS\/SSL and username\/password authentication.\n    rabbitmq:Client rabbitmqClient = check new(rabbitmq:DEFAULT_HOST, 5671,\n\n        \/\/ To secure the client connections using username\/password authentication, provide the credentials\n        \/\/ with the [`rabbitmq:Credentials`](https:\/\/docs.central.ballerina.io\/ballerinax\/rabbitmq\/latest\/records\/Credentials) record.\n        auth = {\n             username: \"alice\",\n             password: \"alice@123\"\n        },\n\n        \/\/ To secure the client connection using TLS\/SSL, the client needs to be configured with\n        \/\/ a certificate file of the server.\n        \/\/ The [`rabbitmq:SecureSocket`](https:\/\/docs.central.ballerina.io\/ballerinax\/rabbitmq\/latest\/records\/SecureSocket)\n        \/\/ record provides the SSL-related configurations of the client.\n        secureSocket = {\n            cert: \"..\/resource\/path\/to\/public.crt\"\n        }\n    );\n\n    \/\/ Declares the queue, Secured.\n    check rabbitmqClient->queueDeclare(\"Secured\");\n\n    \/\/ Publishes the message using the `rabbitmqClient` and the routing key named `Secured`.\n    string message = \"Hello from Ballerina\";\n    check rabbitmqClient->publishMessage({ content: message.toBytes(),\n                                            routingKey: \"Secured\" });\n}", "outputFileName":"producer.out", "output":"bal run producer.bal"}], "description":"\/\/ In this example, the underlying connections of the consumer and the producer are\n\/\/ secured with TLS\/SSL and basic authentication.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [RabbitMQ module](https:\/\/docs.central.ballerina.io\/ballerinax\/rabbitmq\/latest).", "metatags":"description: BBE on consuming messages using a secured connection.\nkeywords: ballerina, ballerina by example, rabbitmq, ssl, tls, authentication, credentials"}, {"bbeName":"rabbitmq-transaction-consumer", "resources":[{"tag":"consumer", "balFileName":"rabbitmq_transaction_consumer.bal", "bal":"import ballerina\/log;\nimport ballerinax\/rabbitmq;\n\n\/\/ The consumer service listens to the \"MyQueue\" queue.\n@rabbitmq:ServiceConfig {\n    queueName: \"MyQueue\",\n    autoAck: false\n}\n\/\/ Attaches the service to the listener.\nservice \/transactionConsumer on\n    new rabbitmq:Listener(rabbitmq:DEFAULT_HOST, rabbitmq:DEFAULT_PORT) {\n\n    \/\/ Gets triggered when a message is received by the queue.\n    remote function onMessage(rabbitmq:Message message,\n                                rabbitmq:Caller caller) {\n\n        string|error messageContent = 'string:fromBytes(message.content);\n        if messageContent is string {\n            log:printInfo(\"The message received: \" + messageContent);\n        }\n\n        \/\/ Acknowledges a single message positively.\n        \/\/ The acknowledgement gets committed upon successful execution of the transaction,\n        \/\/ or will rollback otherwise.\n        transaction {\n            rabbitmq:Error? result = caller->basicAck();\n            if (result is error) {\n                log:printError(\n                            \"Error occurred while acknowledging the message.\");\n            }\n            error? res = commit;\n        }\n    }\n}", "outputFileName":"rabbitmq_transaction_consumer.out", "output":"bal run rabbitmq_transaction_consumer.bal\ntime = 2021-01-18 15:15:36,514 level = INFO  module = \"\" message = \"The message received: Hello from Ballerina\""}], "description":"\/\/ In this example, the messages are consumed from an\n\/\/ existing queue using the Ballerina RabbitMQ message listener\n\/\/ and Ballerina transactions.\n\/\/ Upon successful execution of the transaction block,\n\/\/ the acknowledgement will commit or rollback in the case of any error.\n\/\/ Messages will not be re-queued in the case of a rollback\n\/\/ automatically unless negatively acknowledged by the user.\n\/\/ For more information on the underlying module,\n\/\/ see the [RabbitMQ module](https:\/\/docs.central.ballerina.io\/ballerinax\/rabbitmq\/latest).", "metatags":"description: BBE on transactionally acknowledging messages consumed from a RabbitMQ queue using Ballerina.\nkeywords: ballerina, ballerina by example, rabbitmq, bbe, consumer, transaction"}, {"bbeName":"rabbitmq-transaction-producer", "resources":[{"tag":"producer", "balFileName":"rabbitmq_transaction_producer.bal", "bal":"import ballerinax\/rabbitmq;\n\npublic function main() returns error? {\n    \/\/ Creates a ballerina RabbitMQ Client.\n    rabbitmq:Client newClient =\n            check new (rabbitmq:DEFAULT_HOST, rabbitmq:DEFAULT_PORT);\n\n    \/\/ Declares the queue.\n    check newClient->queueDeclare(\"MyQueue\");\n    transaction {\n        string message = \"Hello from Ballerina\";\n        \/\/ Publishes the message using the routing key named \"MyQueue\".\n        check newClient->publishMessage({ content: message.toBytes(),\n                                                    routingKey: \"MyQueue\" });\n        check commit;\n    }\n}", "outputFileName":"rabbitmq_transaction_producer.out", "output":"bal run rabbitmq_transaction_producer.bal"}], "description":"\/\/ In this example, a message is sent to an existing queue\n\/\/ using the Ballerina RabbitMQ channel and Ballerina transactions.\n\/\/ Upon successful execution of the transaction block,\n\/\/ the channel will commit and rollback in the case of any error.\n\/\/ For more information on the underlying module,\n\/\/ see the [RabbitMQ module](https:\/\/docs.central.ballerina.io\/ballerinax\/rabbitmq\/latest).", "metatags":"description: BBE on transactionally producing messages to a RabbitMQ queue using Ballerina.\nkeywords: ballerina, ballerina by example, rabbitmq, producer, bbe, transaction"}, {"bbeName":"random-numbers", "resources":[{"tag":"numbers", "balFileName":"random_numbers.bal", "bal":"import ballerina\/io;\nimport ballerina\/random;\n\npublic function main() returns error? {\n    \/\/ Generates a random decimal number between 0.0 and 1.0.\n    float randomDecimal = random:createDecimal();\n    io:println(\"Random decimal number: \", randomDecimal);\n\n    \/\/ Generates a random number between the given start(inclusive) and end(exclusive) values.\n    int randomInteger = check random:createIntInRange(1, 100);\n    io:println(\"Random integer number in range: \", randomInteger);\n}", "outputFileName":"random_numbers.out", "output":"bal run random_numbers.bal\nRandom decimal number: 0.6146990788006506\nRandom integer number in range: 94"}], "description":"\/\/ The `random` library provides functions related to random number generation.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Random module](https:\/\/docs.central.ballerina.io\/ballerina\/random\/latest\/).", "metatags":"description: BBE on how to to generate random numbers.\nkeywords: ballerina, ballerina by examples, bbe, random"}, {"bbeName":"raw-templates", "resources":[{"tag":"templates", "balFileName":"raw_templates.bal", "bal":"import ballerina\/io;\nimport ballerinax\/java.jdbc;\nimport ballerina\/sql;\n\njdbc:Client dbClient = check new (url = \"jdbc:h2:file:.\/master\/orderdb\",\n                           user = \"test\", password = \"test\");\n\npublic function main() returns error? {\n    \/\/ Uses a raw template to create `Orders` table.\n    _ = check dbClient->execute(`CREATE TABLE IF NOT EXISTS Orders\n                                 (orderId INTEGER NOT NULL IDENTITY,\n                                  customerId INTEGER, noOfItems INTEGER,\n                                  PRIMARY KEY (orderId))`);\n    \/\/ Uses a raw template to insert values to `Orders` table.\n    _ = check dbClient->execute(`INSERT INTO Orders (orderId, customerId,\n                                noOfItems) VALUES (1, 1, 20)`);\n    _ = check dbClient->execute(`INSERT INTO Orders (orderId, customerId,\n                                noOfItems) VALUES (2, 1, 15)`);\n\n    stream<record {| anydata...; |}, sql:Error?> strm = getOrders(1);\n    record {|record {} value;|}|sql:Error? v = strm.next();\n    while (v is record {|record {} value;|}) {\n        record {} value = v.value;\n        io:println(value);\n        v = strm.next();\n    }\n}\n\nfunction getOrders(int customerId)\n    returns stream<record {| anydata...; |}, sql:Error?> {\n    \/\/ In this raw template, the `customerId` variable is interpolated in the literal.\n    return dbClient->query(`SELECT * FROM orders\n                          WHERE customerId = ${customerId}`);\n\n}", "outputFileName":"raw_templates.out", "output":"bal run raw_templates.bal\n{\"ORDERID\":1,\"CUSTOMERID\":1,\"NOOFITEMS\":20}\n{\"ORDERID\":2,\"CUSTOMERID\":1,\"NOOFITEMS\":15}"}], "description":"\/\/ A raw template is a backtick template without a tag. Exposes result of phase 1 without further processing.\n\/\/ Raw template is evaluated by evaluating each expression and creating an object containing.\n\/\/ <ul>\n\/\/ <li>an `array` of the `strings` separated by insertions<\/li>\n\/\/ <li>an `array` of the results of expression evaluation and an `array` of `strings` separating<\/li>\n\/\/ <\/ul>\n\/\/<br><\/br>\n\/\/ <p>Important use case: SQL parameters.<\/p>", "metatags":"description: This BBE demonstrates raw templates in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, raw templates"}, {"bbeName":"readonly-and-isolated", "resources":[{"tag":"isolated", "balFileName":"readonly_and_isolated.bal", "bal":"import ballerina\/io;\n\ntype Entry map<json>;\ntype RoMap readonly & map<Entry>;\n\nfinal RoMap m = loadMap();\n\nfunction loadMap() returns RoMap {\n    readonly & Entry entry1 = {\n        \"munich\": {latitude: \"48.1351N\", longitude: \"11.5820E\"},\n        \"berlin\": {latitude: \"52.5200N\", longitude: \"13.4050E\"}\n    };\n    readonly & Entry entry2 = {\n        \"bordeaux\": {latitude: \"44.8378N\", longitude: \"0.5792W\"},\n        \"paris\": {latitude: \"48.8566N\", longitude: \"2.3522E\"}\n    };\n    RoMap roMap = {\"germany\": entry1, \"france\": entry2};\n    return roMap;\n}\n\nisolated function lookup(string s) returns readonly & Entry? {\n    \/\/ Accesses `m` directly without locking.\n    return m[s];\n\n}\n\npublic function main() {\n    io:println(lookup(\"france\"));\n}\n", "outputFileName":"readonly_and_isolated.out", "output":"bal run readonly_and_isolated.bal\n{\"bordeaux\":{\"latitude\":\"44.8378N\",\"longitude\":\"0.5792W\"},\"paris\":{\"latitude\":\"48.8566N\",\"longitude\":\"2.3522E\"}}"}], "description":"\/\/ `isolated` functions can access `final` variables with `readonly` type without locking. Relies on the fact that\n\/\/ immutability is deep. `isolated` for functions complements `readonly` for data.", "metatags":"description: This BBE introduces readonly and isolated in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, readonly, isolated"}, {"bbeName":"readonly-type", "resources":[{"tag":"type", "balFileName":"readonly_type.bal", "bal":"import ballerina\/io;\n\n\/\/ A `const` is immutable.\nconst s = \"Anne\";\n\ntype Row record {\n    \/\/ Both the field and its value are immutable.\n    readonly string k;\n    int value;\n\n};\n\ntable<Row> key(k) t = table [\n    { k: \"John\", value: 17 }\n];\n\npublic function main() {\n    \/\/ Can safely use `s` as a key.\n    t.add({k: s, value: 18});\n\n    io:println(t);\n}", "outputFileName":"readonly_type.out", "output":"bal run readonly_type.bal\n[{\"k\":\"John\",\"value\":17},{\"k\":\"Anne\",\"value\":18}]"}], "description":"\/\/ The `readonly` type consists of values that are immutable. For structural type `T`, `T & readonly` means\n\/\/ immutable `T`. `T & readonly` is subtype of `T` and subtype of `readonly`. Guaranteed that if declared\n\/\/ type of a value is a subtype of `readonly`, then at runtime the value can never be mutated. It is enforced\n\/\/ by runtime checks on the mutating structures. With `readonly` field, both the field and its value\n\/\/ are immutable.", "metatags":"description: This BBE introduces readonly type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, readonly type"}, {"bbeName":"receive-email-using-client", "resources":[{"tag":"client", "balFileName":"receive_email_using_client.bal", "bal":"import ballerina\/email;\nimport ballerina\/io;\n\npublic function main() returns error? {\n    \/\/ Creates the client with the connection parameters, host, username, and\n    \/\/ password. An error is returned in a failure. The default port number\n    \/\/ `995` is used over SSL with these configurations.\n    email:PopClient popClient = check new (\"pop.email.com\", \"reader@email.com\",\n        \"pass456\");\n\n    \/\/ Reads the first unseen email received by the POP3 server. `()` is\n    \/\/ returned when there are no new unseen emails. In error cases, an\n    \/\/ error is returned.\n    email:Message? emailResponse = check popClient->receiveMessage();\n\n    if (emailResponse is email:Message) {\n        io:println(\"POP client received an email.\");\n        io:println(\"Email Subject: \", emailResponse.subject);\n        io:println(\"Email Body: \", emailResponse?.body);\n    \/\/ When no emails are available in the server, `()` is returned.\n    } else {\n        io:println(\"There are no emails in the INBOX.\");\n    }\n\n    \/\/ Closes the POP3 store, which would close the TCP connection.\n    check popClient->close();\n\n    \/\/ Creates the client with the connection parameters, host, username, and\n    \/\/ password. An error is received in a failure. The default port number\n    \/\/ `993` is used over SSL with these configurations.\n    email:ImapClient imapClient = check new (\"imap.email.com\",\n        \"reader@email.com\", \"pass456\");\n\n    \/\/ Reads the first unseen email received by the IMAP4 server. `()` is\n    \/\/ returned when there are no new unseen emails. In error cases, an\n    \/\/ error is returned.\n    emailResponse = check imapClient->receiveMessage();\n\n    if (emailResponse is email:Message) {\n        io:println(\"IMAP client received an email.\");\n        io:println(\"Email Subject: \", emailResponse.subject);\n        io:println(\"Email Body: \", emailResponse?.body);\n    \/\/ When no emails are available in the server, `()` is returned.\n    } else {\n        io:println(\"There are no emails in the INBOX.\");\n    }\n\n    \/\/ Closes the IMAP store which would close the TCP connection.\n    check imapClient->close();\n\n}", "outputFileName":"receive_email_using_client.out", "output":"bal run receive_email_using_client.bal\n\n# Subject and the content body of the received emails would be printed."}], "description":"\/\/ The email client is used to receive (with POP3 or IMAP4) emails\n\/\/ using the SSL or STARTTLS protocols. This sample includes receiving\n\/\/ emails with default configurations over SSL using the default\n\/\/ ports.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [Email module](https:\/\/docs.central.ballerina.io\/ballerina\/email\/latest\/).", "metatags":"description: This is a BBE on receiving emails. It has the client functionality for receiving emails.\nkeywords: ballerina, ballerina by example, bbe, email, POP3, POP, IMAP"}, {"bbeName":"receive-email-using-listener", "resources":[{"tag":"listener", "balFileName":"receive_email_using_listener.bal", "bal":"import ballerina\/email;\nimport ballerina\/io;\n\n\/\/ Creates the listener with the connection parameters and the protocol-related\n\/\/ configuration. The polling interval specifies the time duration between each\n\/\/ poll performed by the listener in seconds.\nlistener email:PopListener emailListener = check new ({\n    host: \"pop.email.com\",\n    username: \"reader@email.com\",\n    password: \"pass456\",\n    pollingInterval: 2,\n    port: 995\n});\n\n\/\/ One or many services can listen to the email listener for the\n\/\/ periodically-polled emails.\nservice \"emailObserver\" on emailListener {\n\n    \/\/ When an email is successfully received, the `onMessage` method is\n    \/\/ called.\n    remote function onMessage(email:Message emailMessage) {\n        io:println(\"POP Listener received an email.\");\n        io:println(\"Email Subject: \", emailMessage.subject);\n        io:println(\"Email Body: \", emailMessage?.body);\n    }\n\n    \/\/ When an error occurs during the email poll operations, the `onError`\n    \/\/ method is called.\n    remote function onError(email:Error emailError) {\n        io:println(\"Error while polling for the emails: \"\n            + emailError.message());\n    }\n\n    \/\/ When the listener is closed, the `onClose` method is called.\n    remote function onClose(email:Error? closeError) {\n        io:println(\"Closed the listener.\");\n    }\n\n}", "outputFileName":"receive_email_using_listener.out", "output":"bal run receive_email_using_listener.bal\n\n# Subject and the content body of the listened emails will be printed for each\n# of the polled emails."}], "description":"\/\/ The email listener is used to receive (with POP3 or IMAP4) emails\n\/\/ using the SSL or STARTTLS protocols. This sample includes receiving\n\/\/ emails from a listener with default configurations over SSL using\n\/\/ the default ports.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [Email module](https:\/\/docs.central.ballerina.io\/ballerina\/email\/latest\/).", "metatags":"description: This BBE is about receiving emails. It has a listener-based functionality for receiving emails.\nkeywords: ballerina, ballerina by example, bbe, email, POP3, POP, IMAP, listener"}, {"bbeName":"records", "resources":[{"tag":"records", "balFileName":"records.bal", "bal":"import ballerina\/io;\n\n\/\/ Defines a record type named `Coord`.\ntype Coord record {\n    int x;\n    int y;\n};\n\npublic function main() {\n    \/\/ Creates a `record`, specifying values for its fields.\n    record { int x; int y; } r = {\n        x: 1,\n        y: 2\n    };\n\n    \/\/ Creates a `Coord` record.\n    Coord c = {\n        x: 1,\n        y: 2\n    };\n\n    int a = r.y;\n    io:println(a);\n\n    int b = c.x;\n    io:println(b);\n}", "outputFileName":"records.out", "output":"bal run records.bal\n2\n1"}], "description":"\/\/ A `record` type has specific named fields. Fields can be accessed with `r.x`. Records are mutable: `r.x` is an\n\/\/ `lvalue`. Records can be constructed using a similar syntax to a `map`. Typically a `record` type is combined\n\/\/ with a type definition. The name of the type is not significant: a `record` is just a collection of fields.\n\/\/ Record equality works same as `map` equality.", "metatags":"description: This BBE demonstrates records in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, records"}, {"bbeName":"regular-expressions", "resources":[{"tag":"expressions", "balFileName":"regular_expressions.bal", "bal":"import ballerina\/io;\nimport ballerina\/regex;\n\npublic function main() {\n\n    \/\/ Checks whether the given string matches the provided regex.\n    \/\/ You need to provide the original `string` and the regex to\n    \/\/ this string, which is to be matched with.\n    boolean isMatched = regex:matches(\"This Should Match\", \"Th.*ch\");\n    io:println(\"Is the given string matched with the original string: \",\n                isMatched);\n\n    \/\/ Replaces each occurrence of the substrings, which match the provided\n    \/\/ regular expression from the given original string value with the\n    \/\/ provided replacement string.\n    string new_string = regex:replaceAll(\"Ballerina is great\", \"\\\\s+\", \"_\");\n    io:println(\"Replaced string: \", new_string);\n\n    \/\/ Replaces the first substring that matches the given regular expression\n    \/\/ with the provided `replacement` string.\n    new_string = regex:replaceFirst(\"ReplacethisthisTextThis\", \"this\", \" \");\n    io:println(\"String after replacing first Match: \", new_string);\n\n    \/\/ Retrieves an array of strings by splitting a string using the provided\n    \/\/ delimiter.\n    string[] names = regex:split(\"amal, kamal, nimal, sunimal\", \",\");\n    io:println(\"No of names: \", names.length());\n}", "outputFileName":"regular_expressions.out", "output":"bal run regex_expressions.bal\nIs the given string matched with the original string: true\nReplaced string: Ballerina_is_great\nString after replacing first Match: Replace thisTextThis\nNo of names: 4"}], "description":"\/\/ The `regex` library provides functionalities for searching, splitting, and replacing\n\/\/ the set of characters of the string by using the `regular expression`.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Regex module](https:\/\/docs.central.ballerina.io\/ballerina\/regex\/latest\/).", "metatags":"description: This BBE shows how to manipulate Strings with regex expression in Ballerina.\nkeywords: ballerina, ballerina by example, BBE, string, regex"}, {"bbeName":"resource", "resources":[], "description":"", "metatags":""}, {"bbeName":"resource-method-typing", "resources":[{"tag":"typing", "balFileName":"resource_method_typing.bal", "bal":"import ballerina\/http;\n\ntype Args record {|\n    decimal x;\n    decimal y;\n|};\n\nlistener http:Listener h = new (9090);\n\nservice \/calc on h {\n    \/\/ Resource method arguments can use user-defined types.\n    \/\/ Annotations can be used to refine the mapping between \n    \/\/ Ballerina-declared type and wire format.\n    resource function post add(@http:Payload Args args) \n            returns decimal {\n        return args.x + args.y;\n    }\n\n}", "outputFileName":"resource_method_typing.server.out", "output":"bal run resource_method_typing.bal"}], "description":"\/\/ Resource method arguments can use user-defined types.\n\/\/ Listener will use introspection to map from protocol format \n\/\/ (typically JSON) to user-defined type, using `cloneWithType`.\n\/\/ Return value that is subtype of `anydata` will be mapped from \n\/\/ user-defined type to protocol format, typically JSON, using `toJson`.\n\/\/ Can generate API description (e.g. OpenAPI) from Ballerina \n\/\/ service declaration.\n\/\/ Annotations can be used to refine the mapping between \n\/\/ Ballerina-declared type and wire format.", "metatags":"description: This BBE demonstrates resource method typing in Ballerina\nkeywords: ballerina, ballerina by example, bbe, resource, service, data binding"}, {"bbeName":"resource-methods", "resources":[{"tag":"methods", "balFileName":"resource_methods.bal", "bal":"import ballerina\/http;\n\n\/\/ Service declaration specifies base path for the resource names. The base path is `\/` in this example.\nservice \/ on new http:Listener(8080) {\n    \/\/ Resource method is associated with combination of accessor (`get`) and resource name (`hello`). \n    \/\/ Accessors are determined by the network protocol.\n    \/\/ In HTTP resources, function parameters come from query parameters.\n    resource function get hello(string name) returns string {\n        return \"Hello, \" + name;\n    }\n\n}", "outputFileName":"resource_methods.server.out", "output":"bal run resource_methods.bal"}], "description":"\/\/ Service objects use `remote` methods to expose services in procedural style: remote methods are named by verbs. <br\/><br\/>\n\/\/ Service objects use `resource` methods to expose services in an RESTful style: resources are named by nouns. <br\/><br\/>\n\/\/ Resources are motivated by HTTP, but are general enough also to work for GraphQL. \n\/\/ `resource` methods are a network-oriented generalization of OO getter\/setter concept.", "metatags":"description: This BBE introduces the resource concept in Ballerina.\nkeywords:  ballerina, ballerina by example, bbe, resources, resource methods, HTTP, GraphQL"}, {"bbeName":"resource-path-parameters", "resources":[{"tag":"parameters", "balFileName":"resource_path_parameters.bal", "bal":"import ballerina\/http;\n\nservice \/demo on new http:Listener(8080) {\n    \/\/ Here is how you can make path segments as parameters.\n    resource function get greeting\/hello\/[string name]() returns string {\n\n        return \"Hello, \" + name;\n    }\n}", "outputFileName":"resource_path_parameters.server.out", "output":"bal run resource_path_parameters.bal"}], "description":"// Path segments can be treated as parameters in Ballerina.", "metatags":"description: This BBE introduces how you can specify resource path parameters.\nkeywords:  ballerina, ballerina by example, bbe, path parameters, resources"}, {"bbeName":"retry-transaction-statement", "resources":[{"tag":"statement", "balFileName":"retry_transaction_statement.bal", "bal":"import ballerina\/io;\n\npublic function main() returns error? {\n    \/\/ Short for `retry<DefaultRetryManager>(3)`.\n    \/\/ If any of the `doStage1` and `doStage2` returns  `error:Retriable`,\n    \/\/ the program will retry execution until execution succeeds without an `error:Retriable` error.\n    \/\/ By default, it will retry 3 times with the `DefaultRetryManager`.\n    retry transaction {\n        check doStage1();\n        check doStage2();\n        check commit;\n    }\n\n    return;\n}\n\nfunction doStage1() returns error? {\n    io:println(\"Stage1 completed\");\n    return;\n}\n\nfunction doStage2() returns error? {\n    \/\/ Returns `error:Retriable` error for retrying.\n    \/\/ To support custom errors, a custom implementation of the `RetryManager` is required.\n    return error 'error:Retriable(\"Stage2 failed\");\n\n}", "outputFileName":"retry_transaction_statement.out", "output":"bal run retry_transaction_statement.bal\nStage1 completed\nStage1 completed\nStage1 completed\nStage1 completed\nerror: Stage2 failed"}], "description":"\/\/ Transactional errors are often transient: retrying will fix them.\n\/\/ This works by creating a  RetryManager object `r`, before executing the transaction.\n\/\/ If the block fails with error `e`, it calls `r.shouldRetry(e)`.\n\/\/ If that returns true, then it executes the block again.\n\/\/ `retry` has an optional type parameter giving class of `RetryManager` to create, and optional arguments to new `DefaultRetryManager` tries `n` times.\n\/\/ `retry` can be used without transaction.", "metatags":"description: This BBE demonstrate retrying a transaction in Ballerina.\nkeywords:  ballerina, ballerina by example, bbe, retry, retry transaction, retry manager"}, {"bbeName":"rollback", "resources":[{"tag":"rollback", "balFileName":"rollback.bal", "bal":"\/\/ Defines the `Update` record type.\ntype Update record {\n    int updateIndex;\n    int stockMnt;\n};\n\npublic function main() returns error? {\n\n    \/\/ Creates an array of `Update` records.\n    Update[] updates =\n    [{updateIndex: 0, stockMnt: 2000},\n    {updateIndex: 1, stockMnt: -1000},\n    {updateIndex: 2, stockMnt: 1500},\n    {updateIndex: 3, stockMnt: -1000},\n    {updateIndex: 4, stockMnt: -2000}];\n    \/\/ If an error is returned from the `transfer` function,\n    \/\/ the error is returned from the `main` and it exits.\n    check transfer(updates);\n    return;\n}\n\nfunction transfer(Update[] updates) returns error? {\n\n    transaction {\n        \/\/ Inside the transaction, call `doUpdate` on each `update` record.\n        foreach var u in updates {\n            \/\/ If an error is returned, the `transfer` function returns with\n            \/\/ that error and the transaction is rolled back.\n            check doUpdate(u);\n\n        }\n        \/\/ `commit` will not be called,because of an implicit rollback.\n        check commit;\n\n    }\n    return;\n}\n\nfunction doUpdate(Update u) returns error? {\n    \/\/ If the stock amount is less than -1500, an error is returned.\n    if (u.stockMnt < -1500) {\n        return error(\"Not enough Stocks: \", stockIndex = u.updateIndex);\n    }\n\n    return;\n}", "outputFileName":"rollback.out", "output":"bal run rollback.bal\nerror: Not enough Stocks:  {\"stockIndex\":4}"}], "description":"\/\/ If there is a fail or panic in the execution of the block, then the transaction is rolled back.\n\/\/ Transaction statement can also contain a rollback statement.\n\/\/ Every possible exit from a transaction block must be either `commit`, `rollback`, fail exit (e.g., from `check`), or panic exit.\n\/\/ Rollback does not automatically restore Ballerina variables to values before the transaction.", "metatags":"description: This BBE demonstrate `rollback` operation in Ballerina\nkeywords:  ballerina, ballerina by example, bbe, rollback, rollback transaction"}, {"bbeName":"security-crypto", "resources":[{"tag":"crypto", "balFileName":"security_crypto.bal", "bal":"import ballerina\/crypto;\nimport ballerina\/io;\nimport ballerina\/random;\n\nfunction hash() returns error? {\n    \/\/ Input value for hash operations.\n    string value = \"Hello Ballerina!\";\n    byte[] input = value.toBytes();\n\n    \/\/ Hashing input value using the [MD5 hashing algorithm](https:\/\/docs.central.ballerina.io\/ballerina\/crypto\/latest\/functions#hashMd5), and printing the hash value using the Hex encoding.\n    byte[] output = crypto:hashMd5(input);\n    io:println(\"Hex encoded hash with MD5: \" + output.toBase16());\n\n    \/\/ Hashing the input value using the SHA1 hashing algorithm, and printing the hash value using the Base64 encoding.\n    output = crypto:hashSha1(input);\n    io:println(\"Base64 encoded hash with SHA1: \" + output.toBase64());\n\n    \/\/ Hashing the input value using the SHA256 hashing algorithm, and printing the hash value using the Hex encoding.\n    output = crypto:hashSha256(input);\n    io:println(\"Hex encoded hash with SHA256: \" + output.toBase16());\n\n    \/\/ Hashing the input value using the SHA384 hashing algorithm, and printing the hash value using the Base64 encoding.\n    output = crypto:hashSha384(input);\n    io:println(\"Base64 encoded hash with SHA384: \" + output.toBase64());\n\n    \/\/ Hashing the input value using the SHA512 hashing algorithm, and printing the hash value using the Hex encoding.\n    output = crypto:hashSha512(input);\n    io:println(\"Hex encoded hash with SHA512: \" + output.toBase16());\n\n    \/\/ The Hex-encoded CRC32B checksum generation for the input value.\n    io:println(\"CRC32B for text: \" + crypto:crc32b(input));\n}\n\nfunction hmac() returns error? {\n    \/\/ Input value for HMAC operations.\n    string value = \"Hello Ballerina!\";\n    byte[] input = value.toBytes();\n\n    \/\/ The key used for the HMAC generation.\n    string secret = \"somesecret\";\n    byte[] key = secret.toBytes();\n\n    \/\/ HMAC generation for the input value using the MD5 hashing algorithm, and printing the HMAC value using the Hex encoding.\n    byte[] output = check crypto:hmacMd5(input, key);\n    io:println(\"Hex encoded HMAC with MD5: \" + output.toBase16());\n\n    \/\/ HMAC generation for input the value using the SHA1 hashing algorithm, and printing the HMAC value using the Base64 encoding.\n    output = check crypto:hmacSha1(input, key);\n    io:println(\"Base64 encoded HMAC with SHA1: \" + output.toBase64());\n\n    \/\/ HMAC generation for the input value using the SHA256 hashing algorithm, and printing the HMAC value using the Hex encoding.\n    output = check crypto:hmacSha256(input, key);\n    io:println(\"Hex encoded HMAC with SHA256: \" + output.toBase16());\n\n    \/\/ HMAC generation for the input value using the SHA384 hashing algorithm, and printing the HMAC value using the Base64 encoding.\n    output = check crypto:hmacSha384(input, key);\n    io:println(\"Base64 encoded HMAC with SHA384: \" + output.toBase64());\n\n    \/\/ HMAC generation for the input value using the SHA512 hashing algorithm, and printing the HMAC value using the Hex encoding.\n    output = check crypto:hmacSha512(input, key);\n    io:println(\"Hex encoded HMAC with SHA512: \" + output.toBase16());\n}\n\nfunction decodePrivateKey() returns crypto:PrivateKey|error {\n    \/\/ Obtaining the reference to an RSA private key by a key file.\n    string keyFile = \"..\/resource\/path\/to\/private.key\";\n    crypto:PrivateKey privateKey =\n        check crypto:decodeRsaPrivateKeyFromKeyFile(keyFile);\n\n    \/\/ Obtaining the reference to an RSA private key by an encrypted key file.\n    string encryptedKeyFile = \"..\/resource\/path\/to\/encryptedPrivate.key\";\n    privateKey = check crypto:decodeRsaPrivateKeyFromKeyFile(encryptedKeyFile,\n                                                         \"ballerina\");\n\n    \/\/ Obtaining the reference to an RSA private key stored within a PKCS#12 or PFX format archive file.\n    crypto:KeyStore keyStore = {\n        path: \"..\/resource\/path\/to\/ballerinaKeystore.p12\",\n        password: \"ballerina\"\n    };\n    privateKey = check crypto:decodeRsaPrivateKeyFromKeyStore(keyStore,\n                                              \"ballerina\", \"ballerina\");\n\n    return privateKey;\n}\n\nfunction decodePublicKey() returns crypto:PublicKey|error {\n    \/\/ Obtaining the reference to an RSA public key by a cert file.\n    string certFile = \"..\/resource\/path\/to\/public.crt\";\n    crypto:PublicKey publicKey =\n        check crypto:decodeRsaPublicKeyFromCertFile(certFile);\n\n    \/\/ Obtaining reference to a RSA public key stored within a PKCS#12 or PFX format archive file.\n    crypto:TrustStore trustStore = {\n        path: \"..\/resource\/path\/to\/ballerinaTruststore.p12\",\n        password: \"ballerina\"\n    };\n    publicKey = check crypto:decodeRsaPublicKeyFromTrustStore(trustStore,\n                                                             \"ballerina\");\n\n    return publicKey;\n}\n\nfunction sign() returns error? {\n    \/\/ Input value for the `sign` operations.\n    string value = \"Hello Ballerina!\";\n    byte[] input = value.toBytes();\n\n    \/\/ Private and public keys for the `sign` and `verify` operations.\n    crypto:PrivateKey privateKey = check decodePrivateKey();\n    crypto:PublicKey publicKey = check decodePublicKey();\n\n    \/\/ Signing the input value using the RSA-MD5 signature algorithms, and printing the signature value using the Hex encoding.\n    byte[] output = check crypto:signRsaMd5(input, privateKey);\n    io:println(\"Hex encoded RSA-MD5 signature: \" + output.toBase16());\n\n    boolean verified =\n        check crypto:verifyRsaMd5Signature(input, output, publicKey);\n    io:println(\"RSA-MD5 signature verified: \" + verified.toString());\n\n    \/\/ Signing the input value using the RSA-MD5 signature algorithms, and printing the signature value using the Base64 encoding.\n    output = check crypto:signRsaSha1(input, privateKey);\n    io:println(\"Base64 encoded RSA-SHA1 signature: \" + output.toBase64());\n\n    verified = check crypto:verifyRsaSha1Signature(input, output, publicKey);\n    io:println(\"RSA-SHA1 signature verified: \" + verified.toString());\n\n    \/\/ Signing the input value using the RSA-MD5 signature algorithms, and printing the signature value using the Hex encoding.\n    output = check crypto:signRsaSha256(input, privateKey);\n    io:println(\"Hex encoded RSA-SHA256 signature: \" + output.toBase16());\n\n    verified = check crypto:verifyRsaSha256Signature(input, output, publicKey);\n    io:println(\"RSA-SHA256 signature verified: \" + verified.toString());\n\n    \/\/ Signing the input value using the RSA-MD5 signature algorithms, and printing the signature value using the Base64 encoding.\n    output = check crypto:signRsaSha384(input, privateKey);\n    io:println(\"Base64 encoded RSA-SHA384 signature: \" + output.toBase64());\n\n    verified = check crypto:verifyRsaSha384Signature(input, output, publicKey);\n    io:println(\"RSA-SHA384 signature verified: \" + verified.toString());\n\n    \/\/ Signing the input value using the RSA-MD5 signature algorithms, and printing the signature value using the Hex encoding.\n    output = check crypto:signRsaSha512(input, privateKey);\n    io:println(\"Hex encoded RSA-SHA512 signature: \" + output.toBase16());\n\n    verified = check crypto:verifyRsaSha512Signature(input, output, publicKey);\n    io:println(\"RSA-SHA512 signature verified: \" + verified.toString());\n}\n\nfunction encrypt() returns error? {\n    \/\/ Input value for the `encrypt` operations.\n    string value = \"Hello Ballerina!\";\n    byte[] input = value.toBytes();\n\n    \/\/ Private and public keys for the `encrypt` and `decrypt` operations.\n    crypto:PrivateKey privateKey = check decodePrivateKey();\n    crypto:PublicKey publicKey = check decodePublicKey();\n\n    \/\/ Encrypts and decrypts an input value using the `RSA ECB PKCS1` padding.\n    byte[] output = check crypto:encryptRsaEcb(input, publicKey);\n    output = check crypto:decryptRsaEcb(output, privateKey);\n    io:println(\"RSA ECB PKCS1 decrypted value: \" +\n        check string:fromBytes(output));\n\n    \/\/ Encrypts and decrypts an input value using the `RSA ECB OAEPwithSHA512andMGF1` padding.\n    output = check crypto:encryptRsaEcb(input, publicKey,\n                                        crypto:OAEPwithSHA512andMGF1);\n    output = check crypto:decryptRsaEcb(output, privateKey,\n                                        crypto:OAEPwithSHA512andMGF1);\n    io:println(\"RSA ECB OAEPwithSHA512andMGF1 decrypted value: \" +\n        check string:fromBytes(output));\n\n    \/\/ Randomly generates a 128 bit key for the AES encryption.\n    byte[16] aesKey = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    foreach var i in 0 ... 15 {\n        aesKey[i] = <byte>(check random:createIntInRange(0, 255));\n    }\n\n    \/\/ Randomly generates a 128 bit IV for the AES encryption.\n    byte[16] iv = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    foreach var i in 0 ... 15 {\n        iv[i] = <byte>(check random:createIntInRange(0, 255));\n    }\n\n    \/\/ Encrypts and decrypts an input value using the `AES CBC PKCS5` padding.\n    output = check crypto:encryptAesCbc(input, aesKey, iv);\n    output = check crypto:decryptAesCbc(output, aesKey, iv);\n    io:println(\"AES CBC PKCS5 decrypted value: \" +\n        check string:fromBytes(output));\n\n    \/\/ Encrypts and decrypts an input value using the `AES CBC` without padding.\n    output = check crypto:encryptAesCbc(input, aesKey, iv, crypto:NONE);\n    output = check crypto:decryptAesCbc(output, aesKey, iv, crypto:NONE);\n    io:println(\"AES CBC no padding decrypted value: \" +\n        check string:fromBytes(output));\n\n    \/\/ Encrypts and decrypts an input value using the `AES GCM PKCS5` padding.\n    output = check crypto:encryptAesGcm(input, aesKey, iv);\n    output = check crypto:decryptAesGcm(output, aesKey, iv);\n    io:println(\"AES GCM PKCS5 decrypted value: \" +\n        check string:fromBytes(output));\n\n    \/\/ Encrypts and decrypts an input value using the `AES GCM` without padding.\n    output = check crypto:encryptAesGcm(input, aesKey, iv, crypto:NONE);\n    output = check crypto:decryptAesGcm(output, aesKey, iv, crypto:NONE);\n    io:println(\"AES GCM no padding decrypted value: \" +\n        check string:fromBytes(output));\n\n    \/\/ Encrypts and decrypts an input value using the `AES ECB PKCS5 padding`.\n    output = check crypto:encryptAesEcb(input, aesKey);\n    output = check crypto:decryptAesEcb(output, aesKey);\n    io:println(\"AES ECB PKCS5 decrypted value: \" +\n        check string:fromBytes(output));\n\n    \/\/ Encrypts and decrypts an input value using the `AES ECB` without padding.\n    output = check crypto:encryptAesEcb(input, aesKey, crypto:NONE);\n    output = check crypto:decryptAesEcb(output, aesKey, crypto:NONE);\n    io:println(\"AES ECB no padding decrypted value: \" +\n        check string:fromBytes(output));\n}\n\npublic function main() returns error? {\n    check hash();\n    check hmac();\n    check sign();\n    check encrypt();\n}", "outputFileName":"security_crypto.out", "output":"# You may need to change the certificate file path, private key file path, and\n# trusted certificate file path.\nbal run security_crypto.bal\nHex encoded hash with MD5: 0605402ee16d8e96511a58ff105bc24a\nBase64 encoded hash with SHA1: \/8fwbGIevBvv2Nl3gEL9DtWas+Q=\nHex encoded hash with SHA256: a984a643c350b17f0738bac0fef17f2cd91d91e04596351d0af\n    670c79adc12d5\nBase64 encoded hash with SHA384: lselzItgAZHQmqNbkf\/s2aRjBSd93O3ayc0PB0Dxk6AEo1s4\n    4zyTz\/Qp0FJO1n6b\nHex encoded hash with SHA512: a6f0770f1582f49396a97fbd5973ac22a3a578ac6a991786427\n    dfec17dbd984d8d6289771ac6f44176160a3dcd59f4a8c6b3ab97bef0caa5c67a3fac78c8e946\nCRC32B for text: db9230c5\nHex encoded HMAC with MD5: b69fa2cc698e0923a7eea9d8f2b156fe\nBase64 encoded HMAC with SHA1: AkWFajkb\/gml703Zf4pPgxrjam4=\nHex encoded HMAC with SHA256: 13a3369b8ba326fd311d4500b06a5214a02ed2a033917108f6b\n    9af58b7ede381\nBase64 encoded HMAC with SHA384: 0AjKoWLhNPgdobGTPJs0PdkA0W9wkJtzUvXigzC1ZmXDJJsx\n    p4icks4JrPiwHGm6\nHex encoded HMAC with SHA512: 27588ad08e772a6bba5fca5f45cf467819c8de69a70a42be6fe\n    3eb09ceb3bfeb8b2976bda8ea5c10dcfa2294b12cb0b50b22a06309bada98af21857904a03205\nHex encoded RSA-MD5 signature: 2cfd121e4ff2409d1b2482ebbf37d0c035884d6d858e307e44\n    60b092d79cb20abb624a0dfae76b73b1fc85447be3060a36b318813f0115b1919e5efa7a7f9b1\n    173ec869f56fd9448d99770e1565db1c69a04fd0075fa0e33423a7e829a8b9c25a4dd2c68f3ee\n    e021c0c4ff27979750b395384e280afd87af5274c8d2d99ad4438d9bfc9b2c5a2814212ba29ce\n    6ff70cbe30a5c23f86b0330e143c4d8813ff10092cd313c6861706d37df5f4bb4e9fc72354975\n    ee1786cf24c79b9edfa909968f198c4da37464f3d214a68fb39956717e92d667bb5a9a7f5986b\n    a055d431813d4053a028873499f98c94fd6b5c6fd5aefad432669f957ab4ce9e91c5e77b36ec0\nRSA-MD5 signature verified: true\nBase64 encoded RSA-SHA1 signature: bYMHKKVkjbOUp9ly3AdW9\/euxF94krkkF9SDk2FfbVEc0m\n    qpGIxVoZlPiFxszurZF1YPcqOSeOehDkaHXUMfQkTjBq7XlcePtkywy0fChqw8\/SWqZR8nbYv97tt\n    8+MVTkymbm26syQLwYNLiGp\/EsN6X+fJpkdakwHE+TrdE+rEFrNysGyAm1DWwc4c+l7MEmSYMUnh\/\n    GWPY5r2knOOdDA3mr+XyrsxzFRWZgO7ebVvEQfq9XkRp8kdiGVgpLS5au0jKj3EpbCdS1prFgy3gr\n    kuSJTTUQCwgPo7WSjWbuehFGni7rbas8HIqNlyWF0qUyznJ3eqbUwZ95QqOoVWZoQ==\nRSA-SHA1 signature verified: true\nHex encoded RSA-SHA256 signature: 215c6ea96c9e82348430c6bb02e715560b4fbd3afcf24fb\n    eb41ff12d4d68a797d61c4d6f822807688e4dc604e212b3cc7ac563b3cbe4e5690e2aebaf4e3d\n    f35c19d4b0f7043f50501f390634303577053b029d495104c0e98bc887f0be744ef6f726f7192\n    01907ad4e86cef82eb030b60c384f7034a85159081e598e197bb8904a9123f39d190796dc7fd9\n    46157547c10523999b8fa956d4119dbfe3c1435911c0585cf3c537964516706772e87f2470557\n    40cc4867ac6b99d7bf699fce1b59956c7f55368c8c88c9d47e51ef120ed3f27c3e555691a6971\n    42c78cbd72c23b81b43fa5ab67164a35f8e8c6bf1da187d3feb866add13f1fb9576a2f7887535\n    311\nRSA-SHA256 signature verified: true\nBase64 encoded RSA-SHA384 signature: BjQ40dffGiRQ4zo1s+ld+zKhJL21RbO5sW3L2+4xmonU\n    t126u9D4\/FZ2sM1QGGamj8btB9otiYmWr9sFm4fTs1EX6vrxcCGCAiDdkMxiRs7kShaz2x\/BjJQ7c\n    Od9OY+amwo7DQ\/FAk9mNOt4lFUpjc9WyEW9F1PEJRXZQvMmVabDu8lp\/Fh02lmEquG15DT5qT0jRx\n    RJiS8CNa+97cMZdOmF2KeADfRbNJSz70mZ76MrsNxYIXYIiJzJBQod0efQr0Sr\/HDn4JDVph9rpDM\n    3p8m94TyXvSOwxwxzZWRLEwB0ANdfDmbrW4bOpxfZZFmy1hltqNJQ9G0BcKOHsZDj6Q==\nRSA-SHA384 signature verified: true\nHex encoded RSA-SHA512 signature: 15428fdc7b26d18b1f3eae4569399ae6ebfd430c8f073bf\n    2fa77ebfe1ad5645640374ea4a4aeadd252af3a198e55e69ad2a910e28470d9b54748887de06a\n    5c3ed7ab12399a404359332553e051e8ae0f3ef741faa15a21ad17a9c235e5f91d567bcca0e5a\n    6117689dccada4a33ee897514f7a8a32f12dac0087f5dcbb094c93c792f672e1685618ac5d93a\n    a9d30f6d8e306145ef2d1b9cfdc04d6c61b43376089a78471e8e03d97ee3b57e1b734a23f4436\n    6a99234a0abeb1d36d01c474833b4c2beaf430dae06ab95a1c951645fb1e0a5e7b9eed44d40e3\n    5036f2cd2764df6cc04fe1248e1bb772a53c8201a974109333a318ce57930494d4cb5e41d0dc8\n    f1c\nRSA-SHA512 signature verified: true\nRSA ECB PKCS1 decrypted value: Hello Ballerina!\nRSA ECB OAEPwithSHA512andMGF1 decrypted value: Hello Ballerina!\nAES CBC PKCS5 decrypted value: Hello Ballerina!\nAES CBC no padding decrypted value: Hello Ballerina!\nAES GCM PKCS5 decrypted value: Hello Ballerina!\nAES GCM no padding decrypted value: Hello Ballerina!\nAES ECB PKCS5 decrypted value: Hello Ballerina!\nAES ECB no padding decrypted value: Hello Ballerina!"}], "description":"\/\/ The `crypto` stdlib provides functions usable to perform different cryptographic operations such as\n\/\/ hashing, HMAC generation, checksum generation, encryption, decryption, digitally signing data and \n\/\/ verifying digitally signed data.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [Crypto module](https:\/\/docs.central.ballerina.io\/ballerina\/crypto\/latest\/).", "metatags":"description: BBE on how to perform different cryptographic operations in Ballerina such as hashing, HMAC generation, checksum generation, encryption, decryption, digitally signing data and verifying digitally signed data.\nkeywords: ballerina, ballerina by example, bbe, crypto, hash, hmac, sign, encrypt decrypt"}, {"bbeName":"security-jwt-issue-validate", "resources":[{"tag":"validate", "balFileName":"security_jwt_issue_validate.bal", "bal":"import ballerina\/io;\nimport ballerina\/jwt;\n\npublic function main() returns error? {\n    \/\/ Defines the JWT issuer configurations with the private key file configurations, which are used to self-sign the JWT.\n    jwt:IssuerConfig issuerConfig = {\n        username: \"ballerina\",\n        issuer: \"wso2\",\n        audience: \"vEwzbcasJVQm1jVYHUHCjhxZ4tYa\",\n        keyId: \"NTAxZmMxNDMyZDg3MTU1ZGM0MzEzODJhZWI4NDNlZDU1OGFkNjFiMQ\",\n        expTime: 3600,\n        \/\/ Signature can be created using either the private key configurations or keystore configurations.\n        \/\/ [jwt:IssuerSignatureConfig](https:\/\/docs.central.ballerina.io\/ballerina\/jwt\/latest\/records\/IssuerSignatureConfig)\n        signatureConfig: {\n            config: {\n                keyFile: \"..\/resource\/path\/to\/private.key\"\n            }\n        }\n    };\n\n    \/\/ Issues a JWT based on the provided header, payload, and private key.\n    string jwt = check jwt:issue(issuerConfig);\n    io:println(\"Issued JWT: \", jwt);\n\n    \/\/ Defines the JWT validator configurations with the public certificate file configurations, which are used to\n    \/\/ validate the signature of JWT.\n    jwt:ValidatorConfig validatorConfig = {\n        issuer: \"wso2\",\n        audience: \"vEwzbcasJVQm1jVYHUHCjhxZ4tYa\",\n        clockSkew: 60,\n        \/\/ Signature can be validated using the public certificate file, truststore configurations, or JWKS configurations.\n        \/\/ [jwt:ValidatorSignatureConfig](https:\/\/docs.central.ballerina.io\/ballerina\/jwt\/latest\/records\/ValidatorSignatureConfig)\n        signatureConfig: {\n            certFile: \"..\/resource\/path\/to\/public.crt\"\n        }\n    };\n\n    \/\/ Validates the created JWT.\n    jwt:Payload payload = check jwt:validate(jwt, validatorConfig);\n    io:println(\"Validated JWT Payload: \", payload.toString());\n}", "outputFileName":"security_jwt_issue_validate.out", "output":"# You may need to change the certificate file path, private key file path, and\n# trusted certificate file path.\nbal run security_jwt_issue_validate.bal\nIssued JWT: eyJhbGciOiJSUzI1NiIsICJ0eXAiOiJKV1QiLCAia2lkIjoiTlRBeFptTXhORE15WkR\n            nM01UVTFaR00wTXpFek9ESmhaV0k0TkRObFpEVTFPR0ZrTmpGaU1RIn0.eyJpc3MiOi\n            JiYWxsZXJpbmEiLCAic3ViIjoiYWRtaW4iLCAiYXVkIjoidkV3emJjYXNKVlFtMWpWW\n            UhVSENqaHhaNHRZYSIsICJqdGkiOiI1NWEwYjc1NC04OTVmLTQyNzktODg0My1iNzQ1\n            ZTExYTU3ZTkiLCAiZXhwIjoxNjExMTI3MDIzLCAibmJmIjoxNjExMTIzNDIzLCAiaWF\n            0IjoxNjExMTIzNDIzfQ.DMJDjJEFiQN7d_2CXGfXX_UR8Fi7Witr3aVGm4K7amEm3xN\n            cbh1bZmKO2ir-oP2_ikoM1_ETO7i4E4LKJHNAEdhqj8YHyKpbszaEq5zouMOtdFcI7i\n            TS8LyYDnyLEQQ6sa9L9NoMz3xULeF8epk0eaN1vVA-ijndVkZlMjaXJNf9Bgzn2qJOd\n            sQ6F0GeC4WKEt-xcEY5C2_haEDotSOYhUzEqh6D1fRtrGy7GaH5gzx99n-xjn8NZbTD\n            F0VnD6c1kJPe25FiPz24l9KdaCE1i2WbuzEhZWMclHW5RcTXVkLLkjQ4DvxfE-riGmK\n            qPN1gatWViZQF_VGBK-G7rEhi9Q\nValidated JWT Payload: {\"iss\":\"ballerina\",\"sub\":\"admin\",\n                        \"aud\":\"vEwzbcasJVQm1jVYHUHCjhxZ4tYa\",\n                        \"jti\":\"55a0b754-895f-4279-8843-b745e11a57e9\",\n                        \"exp\":1611127023,\"nbf\":1611123423,\"iat\":1611123423}"}], "description":"\/\/ This example demonstrates how to issue a self-signed JWT and\n\/\/ validate a JWT.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [JWT module](https:\/\/docs.central.ballerina.io\/ballerina\/jwt\/latest\/).", "metatags":"description: BBE on how to issue and validate a JSON Web Token (JWT) in Ballerina.\nkeywords: ballerina, ballerina by example, jwt, jwt issuer, jwt validator"}, {"bbeName":"send-email", "resources":[{"tag":"email", "balFileName":"send_email.bal", "bal":"import ballerina\/email;\n\npublic function main() returns error? {\n    \/\/ Creates an SMTP client with the connection parameters, host, username,\n    \/\/ and password. The default port number `465` is used over SSL with these\n    \/\/ configurations. `SmtpConfig` can be configured and passed to this\n    \/\/ client if the port or security is to be customized.\n    email:SmtpClient smtpClient = check new (\"smtp.email.com\",\n        \"sender@email.com\" , \"pass123\");\n\n    \/\/ Defines the email that is required to be sent.\n    email:Message email = {\n        \/\/ \"TO\", \"CC\", and \"BCC\" address lists are added as follows.\n        \/\/ Only the \"TO\" address list is mandatory out of these three.\n        to: [\"receiver1@email.com\", \"receiver2@email.com\"],\n        cc: [\"receiver3@email.com\", \"receiver4@email.com\"],\n        bcc: [\"receiver5@email.com\"],\n        \/\/ Subject of the email is added as follows. This field is mandatory.\n        subject: \"Sample Email\",\n        \/\/ Body content (text) of the email is added as follows.\n        \/\/ This field is optional.\n        body: \"This is a sample email.\",\n        \/\/ Email author's address is added as follows. This field is mandatory.\n        'from: \"author@email.com\",\n        \/\/ Email sender service address is added as follows.\n        \/\/ This field is optional. `Sender` is same as the `'from` when the\n        \/\/ email author himself sends the email.\n        sender: \"sender@email.com\",\n        \/\/ List of recipients when replying to the email is added as follows.\n        \/\/ This field is optional. These addresses are required when the emails\n        \/\/ are to be replied to some other address(es) other than the sender or\n        \/\/ the author.\n        replyTo: [\"replyTo1@email.com\", \"replyTo2@email.com\"]\n    };\n\n    \/\/ Sends the email message with the client. The `send` method can be used\n    \/\/ instead, if the email is required to be sent with mandatory and optional\n    \/\/ parameters instead of configuring an `email:Message` record.\n    check smtpClient->sendMessage(email);\n\n}", "outputFileName":"send_email.out", "output":"bal run send_email.bal\n\n# Check the inbox to view the sent emails."}], "description":"\/\/ The Email Connector is used to send (with SMTP) emails\n\/\/ using the SSL or STARTTLS protocols. This sample\n\/\/ includes sending emails with default configurations\n\/\/ over SSL using the default ports.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [Email module](https:\/\/docs.central.ballerina.io\/ballerina\/email\/latest\/).", "metatags":"description: This BBE is about sending emails.\nkeywords: ballerina, ballerina by example, bbe, email, SMTP"}, {"bbeName":"sequence-diagrams", "resources":[{"tag":"diagrams", "balFileName":"sequence_diagrams.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\n\n\/\/ A function can be viewed as a sequence diagram.\n\/\/ The diagram has a lifeline (vertical line) for each worker (both named \n\/\/ worker and function's default worker).\npublic function main() returns error? {\n    \/\/ The diagram also has a lifeline for each client object parameter or variable in \n    \/\/ the initialization section, representing the remote system to which the client  \n    \/\/ object is sending messages.\n    http:Client cl = check new (\"https:\/\/www.mocky.io\");\n\n    \/\/ Each remote method call on a client object is represented as a horizontal line\n    \/\/ between the lifeline of the worker making the call and the remote system.\n    string payload = check cl->get(\"\/v2\/5ae082123200006b00510c3d\/\");\n\n    io:println(payload);\n    return;\n}", "outputFileName":"sequence_diagrams.out", "output":"bal run sequence_diagrams.bal\nHello World"}], "description":"\/\/ A function can be viewed as a sequence diagram as shown below.\n\/\/ <br\/><br\/>\n\/\/ <img src=\"\/learn\/by-example\/images\/sequence-diagram.png\" alt=\"Sequence Diagrams\" width=\"600\" height=\"500\">\n\/\/ <br\/><br\/>\n\/\/ The diagram has a lifeline (vertical line) for each worker (both named \n\/\/ worker and function's default worker).\n\/\/ The diagram also has a lifeline for each client object parameter or variable in \n\/\/ the initialization section, representing the remote system to which the client \n\/\/ object is sending messages.\n\/\/ Each remote method call on a client object is represented as a horizontal line\n\/\/ between the lifeline of the worker making the call and the remote system.", "metatags":"description: This BBE demonstrates Ballerina's sequence diagrams\nkeywords: ballerina, ballerina by example, bbe, sequence diagram, diagram"}, {"bbeName":"sequences", "resources":[], "description":"\/\/ Ballerina has two basic types that are sequences: `string`, `xml`. A value is a sequence of basic type `T`\n\/\/ if it is <br><\/br>\n\/\/ - an empty sequence of basic type `T`, <br><\/br>\n\/\/ - a singleton of basic type `T`, or <br><\/br>\n\/\/ - a concatenation of two sequences of basic type `T`. <br><\/br>\n\/\/ Sequences differ from `arrays`: <br><\/br>\n\/\/ - sequences are flat: no nesting. <br><\/br>\n\/\/ - there is no difference between a singleton `x` and a sequence consisting of just `x`. <br><\/br>\n\/\/ - basic type of sequence determines basic type of members. <br><\/br>\n\/\/ Membership of a sequence is immutable (e.g., cannot mutate a sequence of one item into a sequence of two items).\n\/\/ A sequence has no identity: two sequences are `===` if their members are `===`.", "metatags":"description: This BBE demonstrates sequences in Ballerina.\nkeywords: ballerina, ballerina by example, bbe,"}, {"bbeName":"service-declaration", "resources":[{"tag":"declaration", "balFileName":"service_declaration.bal", "bal":"import ballerina\/io;\nimport ballerina\/udp;\n\n\/\/ You can combine a listener declaration with a service declaration as shown in this example.\nservice on new udp:Listener(8080) {\n    remote function onDatagram(readonly & udp:Datagram dg) {\n        io:println(\"bytes received: \", dg.data.length());\n    }\n}", "outputFileName":"service_declaration.server.out", "output":"bal run service_declaration.bal\nbytes received: 17"}], "description":"\/\/ A service represents a collection of remotely accessible methods attached to a particular listener.\n\/\/ A service declaration is syntactic sugar for creating services in Ballerina. \n\/\/ A service declaration gets desugared into several things including creating a listener object,\n\/\/ registering it with the module, creating a service object, attaching the service object to the listener object, etc,.\n\/\/ The type of the listener determines required type of remote methods.", "metatags":"description: This BBE demonstrates how to write a service in Ballerina.\nkeywords:  ballerina, ballerina by example, bbe, service, UDP, service declaration, providing services"}, {"bbeName":"sftp-client", "resources":[{"tag":"client", "balFileName":"sftp_client.bal", "bal":"import ballerina\/ftp;\nimport ballerina\/io;\nimport ballerina\/lang.'string as strings;\n\npublic function main() returns error? {\n    \/\/ Creates the client with the connection parameters, host, username, and\n    \/\/ password. An error is returned in a failure. The default port number\n    \/\/ `22` for SSH is used with these configurations.\n    ftp:ClientConfiguration config = {\n        protocol: ftp:SFTP,\n        host: \"sftp.example.com\",\n        port: 22,\n        auth: {\n            credentials: {username: \"user1\", password: \"pass456\"},\n\n            \/\/ Private key file location and its password (if encrypted) is\n            \/\/ given corresponding to the SSH key file used in the SFTP client.\n            privateKey: {\n                path: \"..\/resource\/path\/to\/private.key\",\n                password: \"keyPass123\"\n            }\n        }\n    };\n    ftp:Client clientEp = check new(config);\n\n    \/\/ Reads a file from a FTP server for a given file path. In error cases, \n    \/\/ an error is returned.\n    stream<byte[] & readonly, io:Error?> fileStream\n        = check clientEp->get(\"\/server\/book.txt\");\n    check fileStream.forEach(isolated \n        function(byte[] & readonly fileContent) {\n            io:println(\"File content received: \"\n                + checkpanic strings:fromBytes(fileContent));\n        }\n    );\n\n    \/\/ Add a new file to the given file location. In error cases, \n    \/\/ an error is returned. The local file is provided as a stream of\n    \/\/ `io:Block` in which 1024 is the block size.\n    stream<io:Block, io:Error?> bStream\n        = check io:fileReadBlocksAsStream(\"\/local\/logFile.txt\", 1024);\n    check clientEp->put(\"\/server\", bStream);\n\n    \/\/ Closes the file stream to finish the `get` and `put` operations.    \n    check fileStream.close();\n\n}", "outputFileName":"sftp_client.out", "output":"bal run sftp_client.bal\n\n# File content of the received file would get printed.\n# The newly-added file will appear in the SFTP server."}], "description":"\/\/ The SFTP client is used to perform CRUD operation on remote\n\/\/ files\/directories using the SFTP protocol. This sample includes getting and\n\/\/ putting file content with default configurations using the default port\n\/\/ number.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [FTP module](https:\/\/docs.central.ballerina.io\/ballerina\/ftp\/latest\/).", "metatags":"description: This is a BBE on getting and putting file content on a remote SFTP server.\nkeywords: ballerina, ballerina by example, bbe, SFTP, FTP security"}, {"bbeName":"sftp-listener", "resources":[{"tag":"listener", "balFileName":"sftp_listener.bal", "bal":"import ballerina\/ftp;\nimport ballerina\/io;\n\n\/\/ Creates the listener with the connection parameters and the protocol-related\n\/\/ configuration. The polling interval specifies the time duration between each\n\/\/ poll performed by the listener in seconds. The listener listens to the files\n\/\/ with the given file name pattern located in the specified path.\nlistener ftp:Listener remoteServer = check new({\n    protocol: ftp:SFTP,\n    host: \"sftp.example.com\",\n    auth: {\n        credentials: {\n            username: \"user1\",\n            password: \"pass456\"\n        },\n        privateKey: {\n            path: \"..\/resource\/path\/to\/private.key\",\n            password: \"keyPass123\"\n        }\n    },\n    port: 22,\n    path: \"\/home\/in\",\n    pollingInterval: 2,\n    fileNamePattern: \"(.*).txt\"\n});\n\n\/\/ One or many services can listen to the SFTP listener for the\n\/\/ periodically-polled file related events.\nservice on remoteServer {\n\n    \/\/ When a file event is successfully received, the `onFileChange` method is\n    \/\/ called.\n    remote function onFileChange(ftp:WatchEvent event) {\n\n        \/\/ `addedFiles` contains the paths of the newly-added files\/directories\n        \/\/ after the last polling was called.\n        foreach ftp:FileInfo addedFile in event.addedFiles {\n            io:println(\"Added file path: \" + addedFile.path);\n        }\n\n        \/\/ `deletedFiles` contains the paths of the deleted files\/directories\n        \/\/ after the last polling was called.\n        foreach string deletedFile in event.deletedFiles {\n            io:println(\"Deleted file path: \" + deletedFile);\n        }\n    }\n}", "outputFileName":"sftp_listener.out", "output":"bal run sftp_listener.bal\n\n# Paths of the newly-added and newly-deleted files\/directories during the\n# latest polling will be printed for each of the polled events."}], "description":"\/\/ The SFTP listener is used to receive file\/directory changes that occur in a\n\/\/ remote location using the SFTP protocol. This sample includes receiving\n\/\/ file\/directory related change events from a listener with default\n\/\/ configurations using the default port.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [FTP module](https:\/\/docs.central.ballerina.io\/ballerina\/ftp\/latest\/).", "metatags":"description: This BBE is about receiving file\/directory changes that occur in a remote SFTP server. It has a listener-based functionality for receiving these events.\nkeywords: ballerina, ballerina by example, bbe, SFTP, remote file, listener, FTP security"}, {"bbeName":"strands", "resources":[{"tag":"strands", "balFileName":"strands.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    \/\/ By default, named workers are multitasked cooperatively, not preemptively.\n    \/\/ Each named worker has a \"strand\" (logical thread of control) and execution\n    \/\/ switches between strands only at specific \"yield\" points.\n    worker A {\n        io:println(\"In worker A\");\n    }\n\n    \/\/ An annotation can be used to make a strand run on a separate thread.\n    @strand {\n        thread: \"any\"\n    }\n\n    worker B {\n        io:println(\"In worker B\");\n    }\n\n    io:println(\"In function worker\");\n}", "outputFileName":"strands.out", "output":"bal run strands.bal\nIn worker B\nIn function worker\nIn worker A"}], "description":"\/\/ By default, named workers are multitasked cooperatively, not preemptively.\n\/\/ Each named worker has a \"strand\" (logical thread of control) and execution\n\/\/ switches between strands only at specific \"yield\" points such as doing a wait\n\/\/ or when a library function invokes a system call that would block.\n\/\/ This avoids the need for users to lock variables that are accessed from\n\/\/ multiple named workers.\n\/\/ An annotation can be used to make a strand run on a separate thread.", "metatags":"description: This BBE demonstrates Ballerina strands\nkeywords: ballerina, ballerina by example, bbe, strands, concurrency"}, {"bbeName":"stream-type", "resources":[{"tag":"type", "balFileName":"stream_type.bal", "bal":"import ballerina\/io;\n\n\/\/ Defines a class called `EvenNumberGenerator`.\n\/\/ Each class has its own `next()` method, which gets \n\/\/ invoked when the stream's `next()` function\n\/\/ gets called.\nclass EvenNumberGenerator {\n    int i = 0;\n    public isolated function next() returns record {| int value; |}|error? {\n        self.i += 2;\n        return { value: self.i };\n    }\n}\n\ntype ResultValue record {|\n    int value;\n|};\n\npublic function main() {\n    EvenNumberGenerator evenGen = new();\n    \/\/ Creates a `stream` passing an `EvenNumberGenerator` object\n    \/\/ to the `stream` constructor.\n    stream<int, error?> evenNumberStream = new(evenGen);\n\n    var evenNumber = evenNumberStream.next();\n    \n    if (evenNumber is ResultValue) {\n        io:println(\"Retrieved even number: \", evenNumber.value);\n    }\n}", "outputFileName":"stream_type.out", "output":"bal run stream_type.bal\nRetrieved even number: 2"}], "description":"\/\/ A `stream` represents a sequence of values that are generated as needed. The end of a `stream` is indicated with a\n\/\/ termination value, which is `error` or `nil`. The type `stream<T,E>` is a `stream` where the members of the\n\/\/ sequence are type `T` and termination value is type `E`. `stream<T>` means `stream<T,()>`. The `stream` type\n\/\/ is a separate basic type, but like an object.", "metatags":"description: This BBE demonstrates stream type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, stream type, streams"}, {"bbeName":"strings", "resources":[{"tag":"strings", "balFileName":"strings.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    \/\/ String literals use double quotes. You can use usual C escapes such as `\\t \\n`.\n    \/\/ Numeric escapes specify Unicode code point using one or more hex digits `\\u{H}`.\n    string grin = \"\\u{1F600}\";\n\n    \/\/ String concatenation uses `+` operator.\n    string greeting = \"Hello\" + grin;\n\n    io:println(greeting);\n\n    \/\/ `greeting[1]` accesses character at index 1 (zero-based).\n    io:println(greeting[1]);\n\n}", "outputFileName":"strings.out", "output":"bal run strings.bal\nHello?\ne"}], "description":"\/\/ The `string` type represents immutable sequence of zero or more Unicode characters. \n\/\/ There is no separate character type: a character is represented by a `string` of length 1.\n\/\/ Two `string` values are `==` if both sequences have the same characters.\n\/\/ You can use `<`, `<=`, `>`, and `>=` operators on `string` values and they work by comparing code points.\n\/\/ Unpaired surrogates are not allowed.", "metatags":"description: This BBE introduces the string type in Ballerina.\nkeywords:  ballerina, ballerina by example, bbe, string, unicode, utf-8, char"}, {"bbeName":"structural-typing", "resources":[{"tag":"typing", "balFileName":"structural_typing.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    \/\/ 1 belongs to `int`.\n    io:println(1 is int);\n    \/\/ [10, 20, 30] belongs to `int[]`.\n    io:println([10, 20, 30] is int[]);\n\n}", "outputFileName":"structural_typing.out", "output":"bal run structural_typing.bal\ntrue\ntrue"}], "description":"\/\/ Typing in Ballerina is structural: a type describes a set of values. Ballerina has semantic subtyping:\n\/\/ subtype means subset. Universe of values is partitioned into basic types. Each value belongs to\n\/\/ exactly one basic type. Can think of each value as being tagged with its basic type.\n\/\/ There is a complexity in making structural typing work with mutation. <br\/><br\/>\n\/\/ Immutable basic types (so far): `nil`, `boolean`, `int`, `float`, `string` <br\/><br\/>\n\/\/ Mutable basic types (so far): `array`, `map`, and `record`", "metatags":"description: This BBE demonstrates structural typing in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, structural typing, types"}, {"bbeName":"structured-keys", "resources":[{"tag":"keys", "balFileName":"structured_keys.bal", "bal":"import ballerina\/io;\n\ntype Employee record {\n    readonly record {\n        string first;\n        string last;\n    } name;\n    int salary;\n};\n\npublic function main() {\n    \/\/ key field, `name` is of `record` type.\n    table<Employee> key(name) t = table [\n        {name: {first: \"John\", last: \"Smith\"}, salary: 100},\n        {name: {first: \"Fred\", last: \"Bloggs\"}, salary: 200}\n    ];\n\n    Employee? e = t[{first: \"Fred\", last: \"Bloggs\"}];\n    io:println(e);\n}", "outputFileName":"structured_keys.out", "output":"bal run structured_keys.bal\n{\"name\":{\"first\":\"Fred\",\"last\":\"Bloggs\"},\"salary\":200}"}], "description":"\/\/ Key fields can be structured where they belong to any subtype of plain data. The Value of key field\n\/\/ must be immutable. Initializer of `readonly` field will be constructed as immutable. In other cases,\n\/\/ can use `cloneReadOnly` to create an immutable value.", "metatags":"description: This BBE demonstrates structured keys in tables in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, structured keys, keys"}, {"bbeName":"table-syntax", "resources":[{"tag":"syntax", "balFileName":"table_syntax.bal", "bal":"import ballerina\/io;\n\ntype Employee record {\n    readonly string name;\n    int salary;\n};\n\n\/\/ Creates a `table` with `Employee` type members, where each\n\/\/ member is uniquely identified using their `name` field.\ntable<Employee> key(name) t = table [\n    { name: \"John\", salary: 100 },\n    { name: \"Jane\", salary: 200 }\n];\n\nfunction increaseSalary(int n) {\n    \/\/ Iterates over the rows of `t` in the specified order.\n    foreach Employee e in t {\n        e.salary += n;\n    }\n\n}\n\npublic function main() {\n    \/\/ Retrieves `Employee` with key value `Fred`.\n    Employee? e = t[\"Fred\"];\n    io:println(e.toBalString());\n\n    increaseSalary(100);\n    io:println(t);\n}", "outputFileName":"table_syntax.out", "output":"bal run table_syntax.bal\n()\n[{\"name\":\"John\",\"salary\":200},{\"name\":\"Jane\",\"salary\":300}]"}], "description":"\/\/ A `table` is a collection of records. Each `record` represents a row of the `table`.\n\/\/ A `table` is plain data if and only if its rows are plain data. A `table` maintains an invariant\n\/\/ that each row is uniquely identified by a key. Each row’s key is stored in fields, which\n\/\/ must be immutable. <br\/><br\/>\n\/\/ Compared to maps,\n\/\/ <ul>\n\/\/ <li>key is part of the value rather than being separate.<\/li>\n\/\/ <li>The type of the key is not restricted to `string`.<\/li>\n\/\/ <li>The order of the members is preserved.<\/li>\n\/\/ <\/ul>\n\/\/ <br\/><br\/>\n\/\/ <p>A `record` field can be declared as `readonly`. A value cannot be assigned to such a field\n\/\/ after the record is created. The `table` type gives the type of the row and the name of the key field.\n\/\/ The `table constructor expression` looks like an `array constructor`. The `foreach` statement will\n\/\/ iterate over a table's rows in their order. Use `t[k]` to access a row using its key.<\/p>", "metatags":"description: This BBE demonstrates table syntax in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, table syntax, table"}, {"bbeName":"task-frequency-job-execution", "resources":[{"tag":"execution", "balFileName":"task_frequency_job_execution.bal", "bal":"import ballerina\/io;\nimport ballerina\/lang.runtime;\nimport ballerina\/task;\n\n\/\/ Creates a job to be executed by the scheduler.\nclass Job {\n\n    *task:Job;\n    int i = 1;\n\n    \/\/ Executes this function when the scheduled trigger fires.\n    public function execute() {\n        self.i += 1;\n        io:println(\"MyCounter: \", self.i);\n    }\n\n    isolated function init(int i) {\n        self.i = i;\n    }\n}\n\npublic function main() returns error? {\n\n    \/\/ Schedules the task to execute the job every second.\n    task:JobId id = check task:scheduleJobRecurByFrequency(new Job(0), 1);\n\n    \/\/ Waits for nine seconds.\n    runtime:sleep(9);\n\n    \/\/ Unschedules the job.\n    check task:unscheduleJob(id);\n}", "outputFileName":"task_frequency_job_execution.out", "output":"bal run task_frequency_job_execution.bal\nMyCounter: 1\nMyCounter: 2\nMyCounter: 3\nMyCounter: 4\nMyCounter: 5\nMyCounter: 6\nMyCounter: 7\nMyCounter: 8\nMyCounter: 9\nMyCounter: 10"}], "description":"\/\/ A  `task:scheduleJobRecurByFrequency()` can be used to execute Ballerina jobs periodically.\n\/\/ The `task:Job` and interval should be specified and optional configurations are start time,\n\/\/ end time, and maximum count.\n\/\/ For more information on the underlying module, \n\/\/ see the [Task module](https:\/\/docs.central.ballerina.io\/ballerina\/task\/latest\/).", "metatags":"description: BBE on how to schedule the frequency job execution in Ballerina.\nkeywords: ballerina, ballerina by examples, BBE, task, job, scheduler"}, {"bbeName":"task-one-time-job-execution", "resources":[{"tag":"execution", "balFileName":"task_one_time_job_execution.bal", "bal":"import ballerina\/io;\nimport ballerina\/lang.runtime;\nimport ballerina\/task;\nimport ballerina\/time;\n\n\/\/ Creates a job to be executed by the scheduler.\nclass Job {\n\n    *task:Job;\n    int i = 1;\n\n    \/\/ Executes this function when the scheduled trigger fires.\n    public function execute() {\n        self.i += 1;\n        io:println(\"MyCounter: \", self.i);\n    }\n\n    isolated function init(int i) {\n        self.i = i;\n    }\n}\n\npublic function main() returns error? {\n    \/\/ Gets the current time.\n    time:Utc currentUtc = time:utcNow();\n    \/\/ Increases the time by three seconds to get the specified time for scheduling the job.\n    time:Utc newTime = time:utcAddSeconds(currentUtc, 3);\n    \/\/ Gets the `time:Civil` for the given time.\n    time:Civil time = time:utcToCivil(newTime);\n\n    \/\/ Schedules the one-time job at the specified time.\n    _ = check task:scheduleOneTimeJob(new Job(0), time);\n\n    \/\/ Waits for five seconds.\n    runtime:sleep(5);\n}", "outputFileName":"task_one_time_job_execution.out", "output":"bal run task_one_time_job_execution.bal\nMyCounter: 1"}], "description":"\/\/ A  `task:scheduleOneTimeJob()` can be used to execute Ballerina jobs at a specific time.\n\/\/ The `task:Job` and time should be specified to schedule the job.\n\/\/ For more information on the underlying module, \n\/\/ see the [Task module](https:\/\/docs.central.ballerina.io\/ballerina\/task\/latest\/).", "metatags":"description: BBE on how to schedule a one-time job execution in Ballerina.\nkeywords: ballerina, ballerina by examples, BBE, task, job, scheduler"}, {"bbeName":"tcp-client", "resources":[{"tag":"client", "balFileName":"tcp_client.bal", "bal":"import ballerina\/io;\nimport ballerina\/tcp;\n\npublic function main() returns error? {\n\n    \/\/ Create a new TCP client by providing the `remoteHost` and `remotePort`.\n    \/\/ Optionally, you can provide the interface that the socket needs to bind \n    \/\/ and the timeout in seconds, which specifies the read timeout value.\n    \/\/ tcp:Client client = check new (\"localhost\", 3000, localHost = \"localhost\",\n    \/\/                             timeout = 5);\n    tcp:Client socketClient = check new (\"localhost\", 3000);\n\n    \/\/ Send the desired content to the server.\n    string msg = \"Hello Ballerina Echo from client\";\n    byte[] msgByteArray = msg.toBytes();\n    check socketClient->writeBytes(msgByteArray);\n\n    \/\/ Read the response from the server.\n    readonly & byte[] receivedData = check socketClient->readBytes();\n    io:println(\"Received: \", string:fromBytes(receivedData));\n\n    \/\/ Close the connection between the server and the client.\n    return socketClient->close();\n}", "outputFileName":"tcp_client.out", "output":"# As a prerequisite, start a sample TCP service.\nbal run tcp_client.bal\nReceived: Hello Ballerina Echo from client"}], "description":"\/\/ The TCP Client is used to connect to a remote TCP server.\n\/\/ This sample demonstrates how the TCP client interacts with the TCP server.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [TCP module](https:\/\/docs.central.ballerina.io\/ballerina\/tcp\/latest).", "metatags":"description: This Ballerina sample demonstrates how the TCP client interacts with the TCP listener service.\nkeywords: ballerina, ballerina by example, bbe, socket, tcp"}, {"bbeName":"tcp-listener", "resources":[{"tag":"listener", "balFileName":"tcp_listener.bal", "bal":"import ballerina\/io;\nimport ballerina\/log;\nimport ballerina\/tcp;\n\n\/\/ Bind the service to the port. \nservice on new tcp:Listener(3000) {\n\n    \/\/ This remote method is invoked when the new client connects to the server.\n    remote function onConnect(tcp:Caller caller)\n                              returns tcp:ConnectionService {\n        io:println(\"Client connected to echo server: \", caller.remotePort);\n        return new EchoService();\n    }\n}\n\nservice class EchoService {\n    *tcp:ConnectionService;\n\n    \/\/ This remote method is invoked once the content is received from the client.\n    remote function onBytes(tcp:Caller caller, readonly & byte[] data) \n        returns tcp:Error? {\n        io:println(\"Echo: \", string:fromBytes(data));\n        \/\/ Echoes back the data to the client from which the data is received.\n        return caller->writeBytes(data);\n    }\n\n    \/\/ This remote method is invoked in an erroneous situation,\n    \/\/ which occurs during the execution of the `onConnect` or `onBytes` method.\n    remote function onError(tcp:Error err) {\n        log:printError(\"An error occurred\", 'error = err);\n    }\n\n    \/\/ This remote method is invoked when the connection is closed.\n    remote function onClose() {\n        io:println(\"Client left\");\n    }\n}", "outputFileName":"tcp_listener.out", "output":"bal run tcp_listener.bal\nClient connected to echoServer: 48735\nEcho: Hello Ballerina Echo from client\nClient left"}], "description":"\/\/ The TCP Listener is used to expose a TCP service over the TCP protocol.\n\/\/ This sample demonstrates how the TCP socket listener service interacts with the TCP client.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [TCP module](https:\/\/docs.central.ballerina.io\/ballerina\/tcp\/latest).", "metatags":"description: This Ballerina sample demonstrates how the TCP  listener service interacts with the TCP client.\nkeywords: ballerina, ballerina by example, bbe, socket, tcp"}, {"bbeName":"tcp-transport-security", "resources":[{"tag":"client", "balFileName":"tcp_transport_security_client.bal", "bal":"import ballerina\/io;\nimport ballerina\/tcp;\n\n\/\/ An TCP client can be configured to communicate through SSL\/TLS as well.\n\/\/ To secure a client using SSL\/TLS, the client needs to be configured with\n\/\/ a certificate file of the listener.\n\/\/ The [`tcp:ClientSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/tcp\/latest\/records\/ClientSecureSocket) record\n\/\/ provides the SSL-related configurations of the client.\ntcp:Client securedClientEP = check new(\"localhost\", 3000,\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    check securedClientEP->writeBytes(\"Hello, World!\".toBytes());\n    readonly & byte[] receivedData = check securedClientEP->readBytes();\n    io:println(\"Received message: \", string:fromBytes(receivedData));\n    return securedClientEP->close();\n}", "outputFileName":"tcp_transport_security_client.out", "output":"# You may need to change the trusted certificate file path.\nbal run tcp_transport_security_client.bal\nReceived message: Hello, World!"}, {"tag":"service", "balFileName":"tcp_transport_security_service.bal", "bal":"import ballerina\/io;\nimport ballerina\/tcp;\n\n\/\/ An HTTP listener can be configured to communicate through SSL\/TLS as well.\n\/\/ To secure a listener using SSL\/TLS, the listener needs to be configured with\n\/\/ a certificate file and a private key file for the listener.\n\/\/ The [`tcp:ListenerSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/tcp\/latest\/records\/ListenerSecureSocket) record\n\/\/ provides the SSL-related listener configurations of the listener.\nlistener tcp:Listener securedListnerEP = check new(3000,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\nservice \"tcp\" on securedListnerEP {\n    isolated remote function onConnect(tcp:Caller caller)\n                             returns tcp:ConnectionService {\n        io:println(\"Client connected on server port: \", caller.remotePort);\n        return new EchoService();\n    }\n}\n\nservice class EchoService {\n    *tcp:ConnectionService;\n\n    remote function onBytes(readonly & byte[] data) returns byte[] {\n        io:println(\"Received message: \", string:fromBytes(data));\n        return data;\n    }\n}", "outputFileName":"tcp_transport_security_service.out", "output":"# You may need to change the certificate file path and private key file path.\nbal run tcp_transport_security_service.bal\nClient connected on server port: 5639\nReceived message: Hello, World!"}], "description":"\/\/ This example demonstrates how the Ballerina TCP client can be configured to\n\/\/ connect to an SSL\/TLS listener through a one-way SSL\/TLS connection \n\/\/ (i.e., the server is verified by the client). This example uses the Ballerina\n\/\/ TCP listener to host a service and the TCP client sends \n\/\/ requests to that listener.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [TCP module](https:\/\/docs.central.ballerina.io\/ballerina\/tcp\/latest).", "metatags":"description: BBE on how to secure TCP listener and client with SSL.\nkeywords: ballerina, ballerina by example, bbe, ssl, tls, tcp client, tcp listener"}, {"bbeName":"temp-files-directories", "resources":[{"tag":"directories", "balFileName":"temp_files_directories.bal", "bal":"import ballerina\/file;\nimport ballerina\/io;\n\npublic function main() returns error? {\n\n    \/\/ Creates a temporary directory in the default `tmp` directory of the OS.\n    string tmpDir = check file:createTempDir();\n    io:println(\"Absolute path of the tmp directory: \", tmpDir);\n\n    \/\/ Creates a temporary file in the default `tmp` directory of the OS.\n    string tmpResult = check file:createTemp();\n    io:println(\"Absolute path of the tmp file: \", tmpResult);\n\n    \/\/ Creates a temporary file in a specific directory.\n    string tmp2Result = check file:createTemp(dir = tmpDir);\n    io:println(\"Absolute path of the tmp file: \", tmp2Result);\n}", "outputFileName":"temp_files_directories.out", "output":"bal run temp_files_directories.bal\nAbsolute path of the tmp directory: \/var\/folders\/f2\/1s2f2mzd30ldl_fzxk4_gq3c0000gn\/T\/90eb0a6f-200a-454d-9285-f3264a71cd80\nAbsolute path of the tmp file: \/var\/folders\/f2\/1s2f2mzd30ldl_fzxk4_gq3c0000gn\/T\/9b0ce907-51cd-4f6b-98f0-d99566e3870d\nAbsolute path of the tmp file: \/var\/folders\/f2\/1s2f2mzd30ldl_fzxk4_gq3c0000gn\/T\/90eb0a6f-200a-454d-9285-f3264a71cd80\/14c45332-37df-44d1-b24b-3dbcb7c7404c"}], "description":"\/\/ The Ballerina File API contains functions to perform temp file and directory operations.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [File module](https:\/\/docs.central.ballerina.io\/ballerina\/file\/latest\/).", "metatags":"description: This BBE shows how to perform file-system operations in Ballerina.\nkeywords: ballerina, ballerina by examples, BBE, file, path, temp"}, {"bbeName":"testerina-assertions", "resources":[{"tag":"assertions", "balFileName":"testerina_assertions.bal", "bal":"import ballerina\/test;\n\n@test:Config { }\nfunction testAssertEquals() {\n    json a = {name:\"John Doe\", age:25, address:{city:\"Colombo\", \n    country:\"Sri Lanka\"}};\n    json b = {name:\"John Doe\", age:25, address:{city:\"Colombo\", \n    country:\"Sri Lanka\"}};\n    \/\/ Asserts two values for value equality using `assertEquals`.\n    test:assertEquals(a, b, msg = \"JSON values are not equal\");\n}\n\n@test:Config { }\nfunction testAssertNotEquals() {\n    string s1 = \"abc\";\n    string s2 = \"def\";\n    \/\/ Asserts two values for value inequality using `assertNotEquals`.\n    test:assertNotEquals(s1, s2, msg = \"String values are equal\");\n}\n\n@test:Config { }\nfunction testAssertTrue() {\n    boolean value = true;\n    \/\/ Asserts if the provided value is `true`.\n    test:assertTrue(value, msg = \"AssertTrue failed\");\n}\n\n@test:Config { }\nfunction testAssertFalse() {\n    boolean value = false;\n    \/\/ Asserts if the provided value is `false`.\n    test:assertFalse(value, msg = \"AssertFalse failed\");\n}\n\n@test:Config { }\nfunction testAssertFail() {\n    boolean flag = true;\n    if (flag) {\n        return;\n    }\n    \/\/ Intentionally, throws an `AssertionError`.\n    test:assertFail(msg = \"AssertFailed\");\n}\n\nclass Person {\n    public string name = \"\";\n    public int age = 0;\n    public Person? parent = ();\n    private string email = \"default@abc.com\";\n    string address = \"No 20, Palm grove\";\n}\n\n@test:Config { }\nfunction testAssertExactEquals() {\n    Person person1 = new;\n    Person person2 = person1;\n    \/\/ Compares the values for exact equality i.e. whether both refer to the same entity.\n    test:assertExactEquals(person1, person2,\n        msg = \"Objects are not exactly equal\");\n}\n\n@test:Config { }\nfunction testAssertNotExactEquals() {\n    Person person1 = new;\n    Person person2 = new;\n    \/\/ Compares the values for the negation of exact equality.\n    test:assertNotExactEquals(person1, person2,\n        msg = \"Objects are exactly equal\");\n}", "outputFileName":"testerina_assertions.out", "output":"bal test test_module\n\nCompiling source\n        ballerinatest\/test_module:0.1.0\n\nRunning tests\n    ballerinatest\/test_module:0.1.0\n\n                [pass] testAssertEquals\n                [pass] testAssertExactEquals\n                [pass] testAssertFail\n                [pass] testAssertFalse\n                [pass] testAssertNotEquals\n                [pass] testAssertNotExactEquals\n                [pass] testAssertTrue\n\n                7 passing\n                0 failing\n                0 skipped\n"}], "description":"\/\/ Testerina has in-built assertions that enable you to\n\/\/ assert an outcome against an expected outcome.\n\/\/ This example illustrates how to use different assertions.<br\/><br\/>\n\/\/ For more information, see [Testing Ballerina Code](https:\/\/ballerina.io\/learn\/testing-ballerina-code\/testing-quick-start\/)\n\/\/ and the [Test Module](https:\/\/docs.central.ballerina.io\/ballerina\/test\/latest\/).", "metatags":""}, {"bbeName":"testerina-before-and-after-each", "resources":[{"tag":"each", "balFileName":"testerina_before_and_after_each.bal", "bal":"import ballerina\/io;\nimport ballerina\/test;\n\n\/\/ The `BeforeEach` function is executed before each test function.\n@test:BeforeEach\nfunction beforeEachFunc() {\n    io:println(\"I'm the before each function!\");\n}\n\n\/\/ The `AfterEach` function is executed after each test function.\n@test:AfterEach\nfunction afterEachFunc() {\n    io:println(\"I'm the after each function!\");\n}\n\n\/\/ A test function.\n@test:Config { }\nfunction testFunction1() {\n    io:println(\"I'm in test function 1!\");\n    test:assertTrue(true, msg = \"Failed!\");\n}\n\n\/\/ Another test function.\n@test:Config { }\nfunction testFunction2() {\n    io:println(\"I'm in test function 2!\");\n    test:assertTrue(true, msg = \"Failed!\");\n}", "outputFileName":"testerina_before_and_after_each.out", "output":"bal test test_module\n\nCompiling source\n        ballerinatest\/test_module:0.1.0\n\nRunning tests\n        ballerinatest\/test_module:0.1.0\nI'm the before each function!\nI'm in test function 1!\nI'm the after each function!\nI'm the before each function!\nI'm in test function 2!\nI'm the after each function!\n\n                [pass] testFunction1\n                [pass] testFunction2\n\n                2 passing\n                0 failing\n                0 skipped\n"}], "description":"\/\/ The function specified with the `BeforeEach` annotation is executed before every test and\n\/\/ the function specified with the `AfterEach` annotation is executed after every test within the test suite.\n\/\/ This can be used for repeatedly initializing and tearing down test level aspects before every test function.<br\/><br\/>\n\/\/ For more information, see [Testing Ballerina Code](https:\/\/ballerina.io\/learn\/testing-ballerina-code\/testing-quick-start\/)\n\/\/ and the [Test Module](https:\/\/docs.central.ballerina.io\/ballerina\/test\/latest\/).", "metatags":""}, {"bbeName":"testerina-before-and-after-groups", "resources":[{"tag":"groups", "balFileName":"testerina_before_and_after_groups.bal", "bal":"import ballerina\/io;\nimport ballerina\/test;\n\n\/\/ Executed before the first test function of the group `g1`.\n@test:BeforeGroups { value:[\"g1\"] }\nfunction beforeGroupsFunc() {\n    io:println(\"I'm the before groups function!\");\n}\n\n\/\/ Executed after the last test function of the group `g1`.\n@test:AfterGroups { value:[\"g1\"] }\nfunction afterGroupsFunc() {\n    io:println(\"I'm the after groups function!\");\n}\n\n\/\/ A test function belonging to the group `g1`.\n@test:Config { groups: [\"g1\"]}\nfunction testFunction1() {\n    io:println(\"I'm in test function 1!\");\n    test:assertTrue(true, msg = \"Failed!\");\n}\n\n\/\/ Another test function.\n@test:Config {}\nfunction testFunction2() {\n    io:println(\"I'm in test function 2!\");\n    test:assertTrue(true, msg = \"Failed!\");\n}", "outputFileName":"testerina_before_and_after_groups.out", "output":"bal test test_module\n\nCompiling source\n        ballerinatest\/test_module:0.1.0\n\nRunning tests\n        ballerinatest\/test_module:0.1.0\nI'm the before groups function!\nI'm in test function 1!\nI'm the after groups function!\nI'm in test function 2!\n\n\t[pass] testFunction1\n\t[pass] testFunction2\n\n\t2 passing\n\t0 failing\n\t0 skipped"}], "description":"\/\/ The function specified with the `BeforeGroups` annotation is executed once before all the tests belonging to the\n\/\/ specified group is executed and the function specified with the `AfterGroups` annotation is executed once after all\n\/\/ the tests belonging to the specified group is executed.<br\/><br\/>\n\/\/ For more information, see [Testing Ballerina Code](https:\/\/ballerina.io\/learn\/testing-ballerina-code\/testing-quick-start\/)\n\/\/ and the [Test Module](https:\/\/docs.central.ballerina.io\/ballerina\/test\/latest\/).", "metatags":""}, {"bbeName":"testerina-before-and-after-suite", "resources":[{"tag":"suite", "balFileName":"testerina_before_and_after_suite.bal", "bal":"import ballerina\/io;\nimport ballerina\/test;\n\n\/\/ Executed before all the test functions in the module.\n@test:BeforeSuite\nfunction beforeSuit() {\n    io:println(\"I'm the before suite function!\");\n}\n\n\/\/ A Test function.\n@test:Config { }\nfunction testFunction1() {\n    io:println(\"I'm in test function 1!\");\n    test:assertTrue(true, msg = \"Failed\");\n}\n\n\/\/ A Test function.\n@test:Config { }\nfunction testFunction2() {\n    io:println(\"I'm in test function 2!\");\n    test:assertTrue(true, msg = \"Failed\");\n}\n\n\/\/ Executed after all the test functions in the module.\n@test:AfterSuite { }\nfunction afterSuite() {\n    io:println(\"I'm the after suite function!\");\n}", "outputFileName":"testerina_before_and_after_suite.out", "output":"bal test test_module\n\nCompiling source\n        ballerinatest\/test_module:0.1.0\n\nRunning tests\n        ballerinatest\/test_module:0.1.0\nI'm the before suite function!\nI'm in test function 1!\nI'm in test function 2!\nI'm the after suite function!\n\n                [pass] testFunction1\n                [pass] testFunction2\n\n                2 passing\n                0 failing\n                0 skipped"}], "description":"\/\/ The `BeforeSuite` annotation allows you to execute a function before executing a test suite.\n\/\/ Similarly, the `AfterSuite` annotation can be used to execute a function after a test suite.<br\/><br\/>\n\/\/ A module is considered as a suite in the Test framework. <br><\/br>\n\/\/ These annotations can be used to set up prerequisites and post actions for a test suite.\n\/\/ For more information, see [Testing Ballerina Code](https:\/\/ballerina.io\/learn\/testing-ballerina-code\/testing-quick-start\/)\n\/\/ and the [Test Module](https:\/\/docs.central.ballerina.io\/ballerina\/test\/latest\/).", "metatags":""}, {"bbeName":"testerina-before-and-after-test", "resources":[{"tag":"test", "balFileName":"testerina_before_and_after_test.bal", "bal":"import ballerina\/io;\nimport ballerina\/test;\n\n\/\/ Executed before the `testFunction` function.\nfunction beforeFunc() {\n    io:println(\"I'm the before function!\");\n}\n\n\/\/ The Test function.\n\/\/ The `before` and `after` attributes are used to define the functions\n\/\/ that need to be executed before and after this test function.\n@test:Config {\n    before: beforeFunc,\n    after: afterFunc\n}\nfunction testFunction() {\n    io:println(\"I'm in test function!\");\n    test:assertTrue(true, msg = \"Failed!\");\n}\n\n\/\/ Executed after the `testFunction` function.\nfunction afterFunc() {\n    io:println(\"I'm the after function!\");\n}", "outputFileName":"testerina_before_and_after_test.out", "output":"bal test test_module\n\nCompiling source\n        ballerinatest\/test_module:0.1.0\n\nRunning tests\n    ballerinatest\/test_module:0.1.0\nI'm the before function!\nI'm in test function!\nI'm the after function!\n\n        [pass] testFunction\n\n        1 passing\n        0 failing\n        0 skipped"}], "description":"\/\/ The `before` attribute allows you to execute a function before a test function.\n\/\/ Similarly, the `after` attribute can be used to execute a function after a test function.<br\/><br\/>\n\/\/ These annotations can be used to set up the prerequisites and post actions for a test case.<br\/><br\/>\n\/\/ For more information, see [Testing Ballerina Code](https:\/\/ballerina.io\/learn\/testing-ballerina-code\/testing-quick-start\/)\n\/\/ and the [Test Module](https:\/\/docs.central.ballerina.io\/ballerina\/test\/latest\/).", "metatags":""}, {"bbeName":"testerina-data-driven-tests", "resources":[{"tag":"tests", "balFileName":"testerina_data_driven_tests.bal", "bal":"import ballerina\/io;\nimport ballerina\/test;\n\n\/\/ The `dataProvider` attribute is used to specify a data-provider function for the test.\n@test:Config {\n    dataProvider: stringDataProvider\n}\n\/\/ Data is passed to the function as function parameters.\nfunction testAddingValues(string fValue, string sValue, string result) returns error? {\n    int value1 = check 'int:fromString(fValue);\n    int value2 = check 'int:fromString(sValue);\n    int result1 = check 'int:fromString(result);\n    io:println(\"Input : [\" + fValue + \",\" + sValue + \",\" + result + \"]\");\n    test:assertEquals(value1 + value2, result1, msg = \"Incorrect Sum\");\n}\n\n\/\/ The data provider function, which returns a `string` value-set in array format.\nfunction stringDataProvider() returns (string[][]) {\n    return [[\"1\", \"2\", \"3\"], [\"10\", \"20\", \"30\"], [\"5\", \"6\", \"11\"]];\n}\n\n@test:Config {\n    dataProvider: mapDataProvider\n}\nfunction mapDataProviderTest(int value1, int value2, string fruit) returns error? {\n    io:println(\"Input : [\" + value1.toBalString() + \",\" + value2.toBalString() + \",\" + fruit + \"]\");\n    test:assertEquals(value1, value2, msg = \"The provided values are not equal\");\n    test:assertEquals(fruit.length(), 6);\n}\n\n\/\/ The data provider function, which returns a  data set as a map of tuples.\nfunction mapDataProvider() returns map<[int, int, string]>|error {\n    map<[int, int, string]> dataSet = {\n        \"banana\": [10, 10, \"banana\"],\n        \"cherry\": [5, 5, \"cherry\"]\n    };\n    return dataSet;\n}", "outputFileName":"testerina_data_driven_tests.out", "output":"bal test test_module\nCompiling source\n        ballerinatest\/test_module:0.1.0\n\nRunning tests\n        ballerinatest\/test_module:0.1.0\nInput : [10,10,banana]\nInput : [5,5,cherry]\nInput : [1,2,3]\nInput : [10,20,30]\nInput : [5,6,11]\n\n        [pass] mapDataProviderTest#banana\n        [pass] mapDataProviderTest#cherry\n        [pass] testAddingValues#0\n        [pass] testAddingValues#1\n        [pass] testAddingValues#2\n\n        5 passing\n        0 failing\n        0 skipped"}], "description":"\/\/ The Ballerina Test framework provides in-built support for data-driven tests.<br\/><br\/>\n\/\/ You can specify a function that returns a set of data values as a data-provider to a test function.\n\/\/ The test execution will iterate the same test function over the provided dataset.<br\/><br\/>\n\/\/ For more information, see [Testing Ballerina Code](https:\/\/ballerina.io\/learn\/testing-ballerina-code\/testing-quick-start\/)\n\/\/ and the [Test Module](https:\/\/docs.central.ballerina.io\/ballerina\/test\/latest\/).", "metatags":""}, {"bbeName":"testerina-group-tests", "resources":[{"tag":"tests", "balFileName":"testerina_group_tests.bal", "bal":"import ballerina\/io;\nimport ballerina\/test;\n\n\/\/ Belongs to the test group `g1`.\n@test:Config { groups: [\"g1\"] }\nfunction testFunction1() {\n    io:println(\"I'm in test belonging to group g1!\");\n    test:assertTrue(true, msg = \"Failed!\");\n}\n\n\/\/ Belongs to the test groups `g1` and `g2`.\n@test:Config { groups: [\"g1\", \"g2\"] }\nfunction testFunction2() {\n    io:println(\"I'm in test belonging to groups g1 and g2!\");\n    test:assertTrue(true, msg = \"Failed!\");\n}\n\n\/\/ Does not belong to any test group.\n@test:Config { }\nfunction testFunction3() {\n    io:println(\"I'm the ungrouped test\");\n    test:assertTrue(true, msg = \"Failed!\");\n}", "outputFileName":"testerina_group_tests.out", "output":"# To run this sample, navigate to the directory that contains the\n# `.bal` file, and execute the `ballerina test` command below.\n\n# Run the tests belonging to the `g1` and `g2` groups\nbal test --groups g1,g2 testerina_group_tests.bal\n\nCompiling source\n    testerina_group_tests.bal\n\nRunning tests\n\n    testerina_group_tests.bal\nI'm in test belonging to group g1!\nI'm in test belonging to groups g1 and g2!\n\n        [pass] testFunction1\n        [pass] testFunction2\n\n        2 passing\n        0 failing\n        0 skipped\n\n# Run the tests belonging to the `g1` group\nbal test --groups g1 testerina_group_tests.bal\n\nCompiling source\n    testerina_group_tests.bal\n\nRunning tests\n\n    testerina_group_tests.bal\nI'm in test belonging to group g1!\nI'm in test belonging to groups g1 and g2!\n\n        [pass] testFunction1\n        [pass] testFunction2\n\n        2 passing\n        0 failing\n        0 skipped\n\n# Run all tests other than the tests belonging to the `g2` group\nbal test --disable-groups g2 testerina_group_tests.bal\n\nCompiling source\n    testerina_group_tests.bal\n\nRunning tests\n\n    testerina_group_tests.bal\nI'm in test belonging to group g1!\nI'm the ungrouped test\n\n        [pass] testFunction1\n        [pass] testFunction3\n\n        2 passing\n        0 failing\n        0 skipped"}], "description":"\/\/ You can tag your test cases with a single group name or multiple group names (one or more).\n\/\/ This allows you to control the execution of selected tests.<br\/><br\/>\n\/\/ In order to execute tests belonging to a selected test group, you can name the \n\/\/ test groups that are to be executed when you run the tests.\n\/\/ Likewise, you can exclude executing the selected test groups as well.<br\/><br\/>\n\/\/ For more information, see [Testing Ballerina Code](https:\/\/ballerina.io\/learn\/testing-ballerina-code\/testing-quick-start\/)\n\/\/ and the [Test Module](https:\/\/docs.central.ballerina.io\/ballerina\/test\/latest\/).", "metatags":""}, {"bbeName":"testerina-guarantee-test-execution-order", "resources":[{"tag":"order", "balFileName":"testerina_guarantee_test_execution_order.bal", "bal":"import ballerina\/io;\nimport ballerina\/test;\n\n\/\/ This test function depends on the `testFunction3`.\n@test:Config { \n    dependsOn: [testFunction3] }\nfunction testFunction1() {\n    io:println(\"I'm in test function 1!\");\n    test:assertTrue(true, msg = \"Failed!\");\n}\n\n\/\/ This test function depends on the `testFunction1`.\n@test:Config { dependsOn: [testFunction1] }\nfunction testFunction2() {\n    io:println(\"I'm in test function 2!\");\n    test:assertTrue(true, msg = \"Failed!\");\n}\n\n\/\/ This will be executed without depending on other functions.\n\/\/ However, since other functions depend on this function, it will be executed first.\n@test:Config { }\nfunction testFunction3() {\n    io:println(\"I'm in test function 3!\");\n    test:assertTrue(true, msg = \"Failed!\");\n}", "outputFileName":"testerina_guarantee_test_execution_order.out", "output":"bal test test_module\n\nCompiling source\n        ballerinatest\/test_module:0.1.0\n\nRunning tests\n    ballerinatest\/test_module:0.1.0\nI'm in test function 3!\nI'm in test function 1!\nI'm in test function 2!\n\n                [pass] testFunction3\n                [pass] testFunction1\n                [pass] testFunction2\n\n                3 passing\n                0 failing\n                0 skipped"}], "description":"\/\/ The `dependsOn` attribute can be used to define a list of functions that the test \n\/\/ function depends on. These functions will be executed before the execution of that test.<br\/><br\/>\n\/\/ This allows you to ensure that the tests are being executed in the expected order.<br\/><br\/>\n\/\/ For more information, see [Testing Ballerina Code](https:\/\/ballerina.io\/learn\/testing-ballerina-code\/testing-quick-start\/)\n\/\/ and the [Test Module](https:\/\/docs.central.ballerina.io\/ballerina\/test\/latest\/).", "metatags":""}, {"bbeName":"testerina-mocking-functions", "resources":[{"tag":"main", "balFileName":"testerina_mocking_functions_main.bal", "bal":"\/\/ Calls the `intAdd` function and returns the result.\npublic function addValues(int a, int b) returns int {\n    return intAdd(a, b);\n}\n\n\/\/ Adds two integers and returns the result.\npublic function intAdd(int a, int b) returns int {\n    return (a + b);\n}", "outputFileName":"", "output":""}, {"tag":"test", "balFileName":"testerina_mocking_functions_test.bal", "bal":"\/\/ This demonstrates different ways to mock functions.\nimport ballerina\/test;\nimport ballerina\/io;\n\n\/\/ Creates a `MockFunction` for stubbing calls to\n\/\/ the `intAdd` function of the same module.\n@test:Mock { functionName: \"intAdd\" }\ntest:MockFunction intAddMockFn = new();\n\n@test:Config {}\nfunction testReturn() {\n    \/\/ Stubs the calls to return a specific value.\n    test:when(intAddMockFn).thenReturn(20);\n    \/\/ Stubs the calls to return a specific value when\n    \/\/ specific arguments are provided.\n    test:when(intAddMockFn).withArguments(0, 0).thenReturn(-1);\n\n    test:assertEquals(intAdd(10, 6), 20, msg = \"function mocking failed\");\n    test:assertEquals(intAdd(0, 0), -1,\n            msg = \"function mocking with arguments failed\");\n}\n\n\/\/ Creates a `MockFunction` that should replace the\n\/\/ imported `io:println` function.\n@test:Mock {\n    moduleName: \"ballerina\/io\",\n    functionName: \"println\"\n}\ntest:MockFunction printlnMockFn = new();\n\nint tally = 0;\n\n\/\/ This has a function signature similar to the `io:println` function.\npublic function mockPrint(any|error... val) {\n    tally = tally + 1;\n}\n\n@test:Config {}\nfunction testCall() {\n    \/\/ Stubs the calls to the `io:println` function\n    \/\/ to invoke the `mockPrint` function instead.\n    test:when(printlnMockFn).call(\"mockPrint\");\n\n    io:println(\"Testing 1\");\n    io:println(\"Testing 2\");\n    io:println(\"Testing 3\");\n\n    test:assertEquals(tally, 3);\n}", "outputFileName":"testerina_mocking_functions_test.out", "output":"# To run this sample, create a Ballerina project named `bbe_mocking` and create a `tests` directory inside.\n# Replace the content of the `main.bal` and add the `main_test.bal` to the `tests` directory.\n# Execute the `bal test` command below.\n# Function mocking is not supported for testing single `.bal` files.\n\nbal test bbe_mocking\n\nCompiling source\n        ballerinatest\/bbe_mocking:0.1.0\n\nRunning Tests\n\n        bbe_mocking\n\n                [pass] testCall\n                [pass] testReturn\n\n                2 passing\n                0 failing\n                0 skipped"}], "description":"\/\/ Mock functions allow you to hide the real function implementation and engage your own definition when running tests.\n\/\/ This allows you to isolate your tests from the other modules and functions.<br\/><br\/>\n\/\/ Function mocks can be stubbed with return values or with another user-defined function,\n\/\/ which has the same signature as the original function.<br\/><br\/>\n\/\/ For more information, see [Testing Ballerina Code](https:\/\/ballerina.io\/learn\/testing-ballerina-code\/testing-quick-start\/)\n\/\/ and the [Test Module](https:\/\/docs.central.ballerina.io\/ballerina\/test\/latest\/).", "metatags":"description: This Ballerina sample demonstrates how to mock functions for unit testing.\nkeywords: ballerina, programming language, testing, mocking"}, {"bbeName":"testerina-mocking-objects", "resources":[{"tag":"main", "balFileName":"testerina_mocking_objects_main.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\nimport ballerina\/email;\n\n\/\/ Sample client that you can use for member access.\npublic client class ExampleClient {\n    public string id;\n\n    public function init(string id) {\n        self.id = id;\n    }\n}\n\n\/\/ Client objects are defined globally to be able to replace in the test files.\nhttp:Client clientEndpoint = check new(\"http:\/\/postman-echo.com\");\nemail:SmtpClient smtpClient = check new(\"localhost\", \"admin\", \"admin\");\nExampleClient exampleClient = new(\"originalId\");\n\n\/\/ Performs two `GET` requests to the specified\n\/\/ endpoint and returns the response.\nfunction performGet() returns @tainted http:Response {\n    io:println(\"Executing the 1st GET request\");\n    http:Response response = <http:Response> \n    checkpanic clientEndpoint -> get(\"\/headers\");\n    io:println(\"Status code: \", response.statusCode.toString());\n\n    if (response.statusCode == 200) {\n        io:println(\"Executing the 2nd GET request\");\n        response = <http:Response> checkpanic\n        clientEndpoint -> get(\"\/get?test=123\",\n            {\"Sample-Name\": \"http-client-connector\"});\n        io:println(\"Status code: \", response.statusCode.toString());\n    }\n    return response;\n}\n\n\/\/ Sends an email to the specified email addresses\n\/\/ and returns an error if found.\nfunction sendNotification(string[] emailIds) returns error? {\n    email:Message msg = {\n        'from: \"builder@abc.com\",\n        subject: \"Error Alert ...\",\n        to: emailIds,\n        body: \"\"\n    };\n    return smtpClient -> sendMessage(msg);\n}", "outputFileName":"", "output":""}, {"tag":"test", "balFileName":"testerina_mocking_objects_test.bal", "bal":"\/\/ This demonstrates different ways to mock a client object.\nimport ballerina\/test;\nimport ballerina\/http;\nimport ballerina\/email;\n\n\/\/ The test double of the `http:Client` object with the\n\/\/ implementation of the required functions.\npublic client class MockHttpClient {\n    remote isolated function get(@untainted string path,\n    map<string|string[]>? headers = (),\n    http:TargetType targetType = http:Response) returns\n    http:Response | http:PayloadType | http:ClientError {\n        http:Response response = new;\n        response.statusCode = 500;\n        return response;\n    }\n}\n\n@test:Config { }\nfunction testTestDouble() {\n    \/\/ Creates and assigns the defined test-double.\n    clientEndpoint = test:mock(http:Client, new MockHttpClient());\n    http:Response res = performGet();\n    test:assertEquals(res.statusCode, 500);\n}\n\n@test:Config { }\nfunction testReturn() {\n    \/\/ Creates and assigns a default mock object,\n    \/\/ which subsequently needs to be stubbed.\n    clientEndpoint = test:mock(http:Client);\n    \/\/ Stubs the `get` function to return the specified HTTP response.\n    test:prepare(clientEndpoint).when(\"get\").thenReturn(new http:Response());\n    http:Response res = performGet();\n    test:assertEquals(res.statusCode, 200);\n}\n\n@test:Config { }\nfunction testReturnSequence() {\n    http:Response mockResponse = new;\n    mockResponse.statusCode = 404;\n\n    clientEndpoint = test:mock(http:Client);\n    \/\/ Stubs the `get` function to return the specified HTTP response\n    \/\/ for each call (i.e., The first call will return the status code `200`\n    \/\/ and the second call will return the status code `404`).\n    test:prepare(clientEndpoint).when(\"get\").thenReturnSequence(\n        new http:Response(), mockResponse);\n    http:Response res = performGet();\n    test:assertEquals(res.statusCode, 404);\n}\n\n@test:Config { }\nfunction testReturnWithArgs() {\n    http:Response mockResponse = new;\n    mockResponse.statusCode = 404;\n    clientEndpoint = test:mock(http:Client);\n    \/\/ This stubs the `get` function to return the specified HTTP response when the specified\n    \/\/ argument is passed.\n    test:prepare(clientEndpoint).when(\"get\").\n    withArguments(\"\/headers\").thenReturn(mockResponse);\n    \/\/ The object and record types should be denoted by the `test:ANY` constant.\n    test:prepare(clientEndpoint).when(\"get\").withArguments(\"\/get?test=123\")\n        .thenReturn(mockResponse);\n    http:Response res = performGet();\n    test:assertEquals(res.statusCode, 404);\n}\n\n@test:Config { }\nfunction testSendNotification() {\n    smtpClient = test:mock(email:SmtpClient);\n    \/\/ Stubs the `send` method of the `mockSmtpClient` to do nothing.\n    \/\/ This is used for functions with an optional or no return type.\n    test:prepare(smtpClient).when(\"sendMessage\").doNothing();\n    string[] emailIds = [\"user1@test.com\", \"user2@test.com\"];\n    error? err = sendNotification(emailIds);\n    test:assertEquals(err, ());\n}\n\n@test:Config {}\nfunction testMemberVariable() {\n    string mockId = \"test\";\n    lock {\n        exampleClient = test:mock(ExampleClient);\n        \/\/ Stubs the value of the `id` to return the specified string.\n        test:prepare(exampleClient).getMember(\"id\").thenReturn(mockId);\n        test:assertEquals(exampleClient.id, mockId);\n    }\n}", "outputFileName":"testerina_mocking_objects_test.out", "output":"# To run this sample, create a Ballerina project named `bbe_mocking` and create a `tests` directory inside.\n# Replace the content of the `main.bal` and add the `main_test.bal` to the `tests` directory.\n# Execute the `bal test` command below.\n\nbal test bbe_mocking\nCompiling source\n        ballerinatest\/bbe_mocking:0.1.0\n\nRunning Tests\n\n        bbe_mocking\nExecuting the 1st GET request\nStatus code: 200\nExecuting the 2nd GET request\nStatus code: 200\nExecuting the 1st GET request\nStatus code: 200\nExecuting the 2nd GET request\nStatus code: 404\nExecuting the 1st GET request\nStatus code: 404\nExecuting the 1st GET request\nStatus code: 500\n\n                [pass] testMemberVariable\n                [pass] testReturn\n                [pass] testReturnSequence\n                [pass] testReturnWithArgs\n                [pass] testSendNotification\n                [pass] testTestDouble\n\n                6 passing\n                0 failing\n                0 skipped"}], "description":"\/\/ Object mocking enables controlling the values of member variables and the behavior of\n\/\/ the member functions of an object. Mocking of objects can be done in two ways. <br\/><br\/>\n\/\/ 1. Creating a test double - providing an equivalent mock object in place of the real<br\/>\n\/\/ 2. Stubbing the member function or member variable - stubbing the behavior of functions\n\/\/ and values of variables<br\/><br\/>\n\/\/ Creating a test double is suitable when a single mock function\/object can be used\n\/\/ throughout all tests whereas stubbing is ideal when defining different behaviors for\n\/\/ different test cases is required.<br\/><br\/>\n\/\/ For more information, see [Testing Ballerina Code](https:\/\/ballerina.io\/learn\/testing-ballerina-code\/testing-quick-start\/)\n\/\/ and the [Test Module](https:\/\/docs.central.ballerina.io\/ballerina\/test\/latest\/).", "metatags":"description: This Ballerina sample demonstrates how to mock objects for unit testing.\nkeywords: ballerina, programming language, testing, mocking"}, {"bbeName":"time-formatting-and-parsing", "resources":[{"tag":"parsing", "balFileName":"time_formatting_and_parsing.bal", "bal":"import ballerina\/io;\nimport ballerina\/time;\n\npublic function main() returns error? {\n    \/\/ Converts a given RFC 3339 timestamp\n    \/\/ (e.g. `2007-12-03T10:15:30.12Z`) string to a `time:Utc` value.\n    time:Utc utc = check time:utcFromString(\"2007-12-03T10:15:30.120Z\");\n    io:println(\"UTC value: \" + utc.toString());\n\n    \/\/ Converts a given `time:Utc` to a RFC 3339 timestamp\n    \/\/ (e.g. `2007-12-03T10:15:30.00Z`) string.\n    string utcString = time:utcToString(utc);\n    io:println(`UTC string representation: ${utcString}`);\n\n    \/\/ Converts a given RFC 3339 timestamp(e.g. `2007-12-03T10:15:30.00Z`)\n    \/\/ to a `time:Civil` record.\n    time:Civil civil1 = check\n    time:civilFromString(\"2021-04-12T23:20:50.520+05:30[Asia\/Colombo]\");\n    io:println(\"Converted civil value: \" + civil1.toString());\n\n    \/\/ Converts a given `time:Civil` value to a RFC 3339\n    \/\/ (e.g. `2007-12-03T10:15:30.00Z`) formatted string.\n    string civilString = check time:civilToString(civil1);\n    io:println(`Civil string representation: ${civilString}`);\n\n    \/\/ Converts a given UTC to an RFC 5322 formatted string\n    \/\/ (e.g `Mon, 3 Dec 2007 10:15:30 GMT`).\n    string emailFormattedString = time:utcToEmailString(utc, \"Z\");\n    io:println(`Email formatted string: ${emailFormattedString}`);\n\n    \/\/ Converts a given RFC 5322 formatted string\n    \/\/ (e.g `Mon, 3 Dec 2007 10:15:30 GMT`) to a `time:Civil` record.\n    time:Civil civil2 = check\n    time:civilFromEmailString(\"Wed, 10 Mar 2021 19:51:55 -0800 (PST)\");\n    io:println(`Civil record of the email string: ${civil2.toString()}`);\n\n    \/\/ Converts a given `time:Civil` record to an RFC 5322 formatted string\n    \/\/ (e.g `Mon, 3 Dec 2007 10:15:30 GMT`).\n    string emailString = check\n    time:civilToEmailString(civil2, time:PREFER_ZONE_OFFSET);\n    io:println(`Email string of the civil record: ${emailString}`);\n}", "outputFileName":"time_formatting_and_parsing.out", "output":"bal run time_formatting_and_parsing.bal\nUTC value: [1196676930,0.12]\nUTC string representation: 2007-12-03T10:15:30.120Z\nConverted civil value: {\"utcOffset\":{\"hours\":5,\"minutes\":30},\"timeAbbrev\":\"Asia\/Colombo\",\"dayOfWeek\":1,\"year\":2021,\"month\":4,\"day\":12,\"hour\":23,\"minute\":20,\"second\":50.52}\nCivil string representation: 2021-04-12T17:50:50.520Z\nEmail formatted string: Mon, 3 Dec 2007 10:15:30 Z\nCivil record of the email string: {\"utcOffset\":{\"hours\":-8,\"minutes\":0},\"timeAbbrev\":\"America\/Los_Angeles\",\"dayOfWeek\":3,\"year\":2021,\"month\":3,\"day\":10,\"hour\":19,\"minute\":51,\"second\":55}\nEmail string of the civil record: Wed, 10 Mar 2021 19:51:55 -0800"}], "description":"\/\/ This sample demonstrates how time APIs can be used to convert UTC and\n\/\/ local time to different string representations (RFC 5322 and RFC 3339)\n\/\/ vice versa.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Time module](https:\/\/docs.central.ballerina.io\/ballerina\/time\/latest\/).", "metatags":"description: BBE on how to format and parse UTC and Civil values to different RFC formats.\nkeywords: ballerina, ballerina by examples, bbe, time, utc, rfc3339, rfc5322"}, {"bbeName":"time-utc", "resources":[{"tag":"utc", "balFileName":"time_utc.bal", "bal":"import ballerina\/io;\nimport ballerina\/time;\n\npublic function main() {\n    \/\/ Gets the current instant of the system clock (seconds from the epoch of\n    \/\/ 1970-01-01T00:00:00). The returned `time:Utc` value represents seconds\n    \/\/ from the epoch with nanoseconds precision.\n    \/\/ The `time:Utc` is a tuple with `[int, decimal]`. The first member of the\n    \/\/ tuple represents the number of seconds from the epoch. The second\n    \/\/ member represents the rest of the nanoseconds from the epoch as a\n    \/\/ fraction.\n    time:Utc currentUtc = time:utcNow();\n    io:println(`Number of seconds from the epoch: ${currentUtc[0]}s`);\n    io:println(`Nanoseconds fraction: ${currentUtc[1]}s`);\n}", "outputFileName":"time_utc.out", "output":"bal run time_utc.bal\nNumber of seconds from the epoch: 1621839972s\nNanoseconds fraction: 0.005413000s"}], "description":"\/\/ This sample demonstrates how to obtain the current time from the epoch\n\/\/ `1970-01-01T00:00:00`<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Time module](https:\/\/docs.central.ballerina.io\/ballerina\/time\/latest\/).", "metatags":"description: BBE on how to get the current timestamp in seconds.\nkeywords: ballerina, ballerina by examples, bbe, time, current, epoch, utc"}, {"bbeName":"time-utc-and-civil", "resources":[{"tag":"civil", "balFileName":"time_utc_and_civil.bal", "bal":"import ballerina\/io;\nimport ballerina\/time;\n\npublic function main() returns error? {\n    \/\/ Gets the current instant of the system clock (seconds from the epoch of\n    \/\/ 1970-01-01T00:00:00). The returned `time:Utc` value represents seconds\n    \/\/ from the epoch with nanoseconds precision.\n    time:Utc utc1 = time:utcNow();\n    \/\/ Converts a given `time:Utc` value to a `time:Civil` value.\n    time:Civil civil1 = time:utcToCivil(utc1);\n    io:println(`Civil record: ${civil1.toString()}`);\n\n    \/\/ Converts a given `time:Civil` value to a `time:Utc` value.\n    \/\/ Note that, since `time:Civil` is used to represent localized time,\n    \/\/ it is mandatory to have the `utcOffset` field to be specified in the\n    \/\/ given `time:Civil` value.\n    time:Civil civil2 = {\n        year: 2021,\n        month: 4,\n        day: 13,\n        hour: 4,\n        minute: 50,\n        second: 50.52,\n        timeAbbrev: \"Asia\/Colombo\",\n        utcOffset: {hours: 5, minutes: 30, seconds: 0d}\n    };\n    time:Utc utc2 = check time:utcFromCivil(civil2);\n    io:println(`UTC value of the civil record: ${utc2.toString()}`);\n}", "outputFileName":"time_utc_and_civil.out", "output":"bal run time_utc_and_civil.bal\nCivil record: {\"timeAbbrev\":\"Z\",\"dayOfWeek\":1,\"year\":2021,\"month\":5,\"day\":24,\"hour\":7,\"minute\":7,\"second\":15.757818}\nUTC value of the civil record: [1618269650,0.52]"}], "description":"\/\/ This sample demonstrates how to convert UTC to local time and\n\/\/ vice versa.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Time module](https:\/\/docs.central.ballerina.io\/ballerina\/time\/latest\/).", "metatags":"description: BBE on how to convert a given UTC time to a civil record vice versa.\nkeywords: ballerina, ballerina by examples, bbe, time, utc, civil"}, {"bbeName":"tracing", "resources":[{"tag":"tracing", "balFileName":"tracing.bal", "bal":"import ballerina\/http;\nimport ballerina\/log;\nimport ballerina\/observe;\nimport ballerina\/lang.runtime;\nimport ballerinax\/jaeger as _;\n\n\/\/ Simple `Hello` HTTP Service\nservice \/hello on new http:Listener(9234) {\n\n    \/\/ Resource functions are invoked with the HTTP caller and the\n    \/\/ incoming request as arguments.\n    resource function get sayHello(http:Caller caller, http:Request req)\n            returns error? {\n        http:Response res = new;\n\n        \/\/Start a child span attaching to the generated system span.\n        int spanId = check observe:startSpan(\"MyFirstLogicSpan\");\n\n        \/\/Start a new root span without attaching to the system span.\n        int rootParentSpanId = observe:startRootSpan(\"MyRootParentSpan\");\n        \/\/ Some actual logic will go here, and for example, we have introduced some delay with the sleep.\n        runtime:sleep(1);\n        \/\/Start a new child span for the `MyRootParentSpan` span.\n        int childSpanId = check observe:startSpan(\"MyRootChildSpan\", (),\n                                                            rootParentSpanId);\n        \/\/ Some actual logic will go here, and for example, we have introduced some delay with the sleep.\n        runtime:sleep(1);\n        \/\/Finish the `MyRootChildSpan` span.\n        error? result = observe:finishSpan(childSpanId);\n        if (result is error) {\n            log:printError(\"Error in finishing span\", 'error = result);\n        }\n        \/\/ Some actual logic will go here, and for example, we have introduced some delay with the sleep.\n        runtime:sleep(1);\n        \/\/Finish the `MyRootParentSpan` span.\n        result = observe:finishSpan(rootParentSpanId);\n        if (result is error) {\n            log:printError(\"Error in finishing span\", 'error = result);\n        }\n\n        \/\/Some actual logic will go here, and for example, we have introduced some delay with the sleep.\n        runtime:sleep(1);\n\n        \/\/Finish the created child `MyFirstLogicSpan` span, which was attached to the system trace.\n        result = observe:finishSpan(spanId);\n        if (result is error) {\n            log:printError(\"Error in finishing span\", 'error = result);\n        }\n        \/\/Use a util method to set a string payload.\n        res.setPayload(\"Hello, World!\");\n\n        \/\/Send the response back to the caller.\n        result = caller->respond(res);\n\n        if (result is error) {\n            log:printError(\"Error sending response\", 'error = result);\n        }\n\n        return ();\n    }\n}", "outputFileName":"tracing.server.out", "output":"# Jaeger is the default tracing tool used in Ballerina. To start the Jaeger execute the below command.\ndocker run -d -p 13133:13133 -p 16686:16686 -p 55680:55680 jaegertracing\/opentelemetry-all-in-one\n\n# To start the service, navigate to the directory that contains the\n# `.bal` file and execute the `bal run` command below with the `--observability-included` build time flag and the `Config.toml` runtime configuration file.\nBAL_CONFIG_FILES=Config.toml bal run --observability-included tracing.bal\n\nballerina: started publishing traces to Jaeger on localhost:55680"}], "description":"\/\/ Ballerina supports Observability out of the box, and Tracing is one of the three important aspects of\n\/\/ Observability. To observe Ballerina code, the build time flag `--observability-included` should be given along with the\n\/\/ `Config.toml` file when starting the service. The `Config.toml` file contains the required runtime configurations related to observability.\n\/\/ The developers can trace their code blocks and measure the time incurred during the actual runtime execution.\n\/\/ They can choose to hook their measurement with the default trace created or can create a completely new trace.<br\/><br\/>\n\/\/ For more information about configs and observing applications, see [Observing Ballerina Code](https:\/\/ballerina.io\/learn\/observing-ballerina-code\/).", "metatags":"description: BBE on how to use the default Tracing Observability feature in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, observability, tracing, opentracing"}, {"bbeName":"transaction-statement", "resources":[{"tag":"statement", "balFileName":"transaction_statement.bal", "bal":"import ballerina\/io;\n\npublic function main() returns error? {\n    \/\/ Compile-time guarantees that transactions are bracketed with\n    \/\/ begin and commit or rollback. Transaction statement begins\n    \/\/ a new transaction and executes a block.\n    transaction {\n        doStage1();\n        doStage2();\n\n        \/\/ Commit of a transaction must be done explicitly using commit.\n        \/\/ Commit must be lexically within a transaction statement and may\n        \/\/ return an error;\n        check commit;\n\n    }\n    return;\n}\n\nfunction doStage1() {\n    io:println(\"Stage1 completed\");\n}\n\nfunction doStage2() {\n    io:println(\"Stage2 completed\");\n}", "outputFileName":"transaction_statement.out", "output":"bal run transaction_statement.bal\nStage1 completed\nStage2 completed"}], "description":"\/\/ Ballerina provides support for interacting with a transaction manager.\n\/\/ Compile-time guarantees that transactions are bracketed with begin and commit or rollback.\n\/\/ The region in the middle, is typed as being a transactional context.\n\/\/ Ballerina does not have a transactional memory and includes transaction manager.\n\/\/ Current transaction is a part of the execution context of a strand.", "metatags":"description: This BBE introduces transaction statement in Ballerina.\nkeywords:  ballerina, ballerina by example, bbe, transactions, transaction, commit"}, {"bbeName":"transactional-named-workers", "resources":[{"tag":"workers", "balFileName":"transactional_named_workers.bal", "bal":"import ballerina\/io;\n\ntype Update record {\n    int updateIndex;\n    int stockMnt;\n};\n\npublic function main() returns error? {\n    Update newUpdate = {\n        updateIndex: 132,\n        stockMnt: 3500\n    };\n    transaction {\n        check exec(newUpdate);\n        check commit;\n    }\n    return;\n}\n\n\/\/ Transactional function can only be called from a transactional context\ntransactional function exec(Update u) returns error? {\n    \/\/ Transactional named workers starts a transaction branch\n    \/\/ in the current transaction.\n    transactional worker A {\n        bar();\n    }\n    return;\n}\n\ntransactional function bar() {\n    io:println(\"bar() invoked\");\n}", "outputFileName":"transactional_named_workers.out", "output":"bal run transactional_named_workers.bal\nbar() invoked"}], "description":"\/\/ A named worker within a transactional function can be declared as transactional.\n\/\/ This will start a new transaction branch for the named worker, as with a distributed transaction.", "metatags":"description: This BBE introduces the transactional named workers in Ballerina.\nkeywords:  ballerina, ballerina by example, bbe, workers, transactions, transactional workers, transactional named workers"}, {"bbeName":"transactional-qualifier", "resources":[{"tag":"qualifier", "balFileName":"transactional_qualifier.bal", "bal":"import ballerina\/io;\n\ntype Update record {\n    int updateIndex;\n    int stockMnt;\n};\n\npublic function main() returns error? {\n    Update updates = {updateIndex: 0, stockMnt: 100};\n    transaction {\n        check doUpdate(updates);\n        check commit;\n    }\n    return;\n}\n\n\/\/ Called within the transaction statement.\ntransactional function doUpdate(Update u) returns error? {\n    \/\/ Calls the `foo()` non-transactional function.\n    foo(u);\n    \/\/ Calls the `bar()` transactional function.\n    bar(u);\n    return;\n}\n\nfunction foo(Update u) {\n    if transactional {\n        \/\/ This is a transactional context.\n        bar(u);\n\n    }\n}\n\ntransactional function bar(Update u) {\n    io:println(\"Calling from a transactional context\");\n}", "outputFileName":"transactional_qualifier.out", "output":"bal run transactional_qualifier.bal\nCalling from a transactional context\nCalling from a transactional context"}], "description":"\/\/ At compile-time, regions of code are typed as being a transactional context.\n\/\/ Ballerina guarantees that, whenever that region is executed, there will be a current transaction.\n\/\/ A function with a `transactional` qualifier can only be called from transactional context; function  body will be a transactional context.\n\/\/ `transactional` is also a boolean expression that tests at runtime whether there is a current transaction: used in a condition results in transactional context.", "metatags":"description: This BBE introduces the transactional qualifier in Ballerina.\nkeywords:  ballerina, ballerina by example, bbe, transactional, transactional qualifier"}, {"bbeName":"type-definitions", "resources":[{"tag":"definitions", "balFileName":"type_definitions.bal", "bal":"import ballerina\/io;\n\n\/\/ Defines a type named `MapArray`.\ntype MapArray map<string>[];\n\npublic function main() {\n    \/\/ Creates a `MapArray` value.\n    \/\/ `arr` has elements which are of `map<string>` type.\n    MapArray arr = [\n        {\"x\": \"foo\"},\n        {\"y\": \"bar\"}\n    ];\n\n    io:println(arr[0]);\n}", "outputFileName":"type_definitions.out", "output":"bal run type_definitions.bal\n{\"x\":\"foo\"}"}], "description":"// A type definition gives a name for a type. Its name is just an alias for the type, like `typedef` in C.", "metatags":"description: This BBE demonstrates type definitions in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, type definition"}, {"bbeName":"type-inference", "resources":[{"tag":"inference", "balFileName":"type_inference.bal", "bal":"import ballerina\/io;\n\n\/\/`var` says that the type of the variable is from the type of expression\n\/\/ used to initialize it.\nvar x = \"str\";\n\nfunction printLines(string[] sv) {\n    \/\/ Type inference with a `foreach` statement.\n    foreach var s in sv {\n        io:println(s);\n    }\n\n}\n\npublic function main() {\n    string[] s = [x, x];\n    printLines(s);\n\n    \/\/ Infers `x` as the `MyClass` type.\n    var x = new MyClass();\n    MyClass _ = x;\n\n    \/\/ Infers the class for `new` as `MyClass`.\n    MyClass _ = new;\n\n}\n\nclass MyClass {\n    function foo() {\n\n    }\n}", "outputFileName":"type_inference.out", "output":"bal run type_inference.bal\nstr\nstr"}], "description":"\/\/ Type inference is local and restricted to a single expression.\n\/\/ Overuse of type inference can make the code harder to understand.", "metatags":"description: This BBE demonstrates type inference in Ballerina. \nkeywords:  ballerina, ballerina by example, bbe, var,"}, {"bbeName":"udp-client", "resources":[{"tag":"client", "balFileName":"udp_client.bal", "bal":"import ballerina\/io;\nimport ballerina\/udp;\n\npublic function main() returns error? {\n  \n    \/\/ Creates a new connectionless UDP client.\n    \/\/ Optionally, you can provide the address that the socket needs to bind \n    \/\/ and the timeout in milliseconds, which specifies the read timeout value.\n    \/\/ E.g.: `udp:Client client = new (localHost = \"localhost\", timeout = 5);`\n    udp:Client socketClient = check new;\n\n    string msg = \"Hello Ballerina echo\";\n    udp:Datagram datagram = {\n        remoteHost: \"localhost\",\n        remotePort : 8080,\n        data : msg.toBytes()\n    };\n\n    \/\/ Sends the data to the remote host.\n    \/\/ The parameter is a Datagram record, which contains the `remoteHost`,\n    \/\/ `remotePort`, and the `data` to be sent.\n    check socketClient->sendDatagram(datagram);\n    io:println(\"Datagram was sent to the remote host.\");\n\n    \/\/ Waits until the data is received from the remote host.\n    readonly & udp:Datagram result = check socketClient->receiveDatagram();\n    io:println(\"Received: \", string:fromBytes(result.data));        \n\n    \/\/ Closes the client and releases the bound port.\n    check socketClient->close();\n\n}", "outputFileName":"udp_client.out", "output":"bal run udp_client.bal\n\n# This will print the output below upon a successful write.\nDatagram was sent to the remote host.\n# Print the response that is returned from the server as an echo.\nReceived: Hello Ballerina echo"}], "description":"\/\/ The UDP Client is used to send data to a specific remote host using the UDP protocol.\n\/\/ This sample demonstrates how to send a datagram to a remote server\n\/\/ and print the echoed response.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [UDP module](https:\/\/docs.central.ballerina.io\/ballerina\/udp\/latest).", "metatags":"description: This Ballerina sample demonstrates how to send data to a remote UDP server.\nkeywords: ballerina, ballerina by example, bbe, socket, udp"}, {"bbeName":"udp-connect-client", "resources":[{"tag":"client", "balFileName":"udp_connect_client.bal", "bal":"\/\/ This is the connection oriented client implementation of the UDP socket.\nimport ballerina\/io;\nimport ballerina\/udp;\n\npublic function main() returns error? {\n  \n    \/\/ Creates a new connection-oriented UDP client by providing the\n    \/\/ `remoteHost` and the `remotePort`.\n    \/\/ Optionally, you can provide the interface that the socket needs to bind \n    \/\/ and the timeout in milliseconds, which specifies the read timeout value.\n    \/\/ E.g.: `udp:Client client = new (\"www.ballerina.com\", 80,\n    \/\/ localHost = \"localhost\", timeout = 5);`\n    udp:ConnectClient socketClient = check new(\"localhost\", 8080);\n\n    string msg = \"Hello Ballerina echo\";\n\n    \/\/ Sends the data to the connected remote host.\n    \/\/ The parameter is a `byte[]`, which contains the data to be sent.\n    check socketClient->writeBytes(msg.toBytes());\n    io:println(\"Data was sent to the remote host.\");\n\n    \/\/ Waits until the data is received from the connected host.\n    readonly & byte[] result = check socketClient->readBytes();\n    io:println(\"Received: \", string:fromBytes(result));\n\n    \/\/ Closes the client and releases the bound port.\n    check socketClient->close();\n\n}", "outputFileName":"udp_connect_client.out", "output":"bal run udp_connect_client.bal\n\n# This will print the output below upon a successful write.\nData was sent to the remote host.\n# Print the response that is returned from the server as an echo.\nReceived: Hello Ballerina echo"}], "description":"\/\/ The ConnectClient is configured so that it only receives data from,\n\/\/ and sends data to, the given remote peer address. Once connected,\n\/\/ data may not be received from or sent to any other address.\n\/\/ The client remains connected until it is explicitly disconnected or until it is closed.\n\/\/ This sample demonstrates how to send data to a connected server and print the echoed response.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [UDP module](https:\/\/docs.central.ballerina.io\/ballerina\/udp\/latest).", "metatags":"description: This Ballerina sample demonstrates how to send data to a connected server.\nkeywords: ballerina, ballerina by example, bbe, socket, udp"}, {"bbeName":"udp-listener", "resources":[{"tag":"listener", "balFileName":"udp_listener.bal", "bal":"import ballerina\/io;\nimport ballerina\/udp;\n\n\/\/ Binds the service to the port.\n\/\/ Optionally, you can provide the `remoteHost` and `remotePort` to\n\/\/ configure the listener as a connected listener, which only\n\/\/ reads and writes to the configured remote host.\n\/\/ E.g.: `udp:Listener(8080, remoteHost\n\/\/ = \"www.remote-clinet.com\", remotePort = 9090)`\nservice on new udp:Listener(8080) {\n\n    \/\/ This remote method is invoked once the content is received from the\n    \/\/ client. You may replace the `onBytes` method with `onDatagram`, which\n    \/\/ reads the data as `readonly & udp:Datagram`.\n    remote function onDatagram(readonly & udp:Datagram datagram) \n        returns udp:Datagram|udp:Error? {\n        io:println(\"Received by listener: \", string:fromBytes(datagram.data));\n        \/\/ Echoes back the data to the same client.\n        \/\/ This is similar to calling `caller->sendDatagram(data);`.\n        return datagram;\n    }\n}", "outputFileName":"udp_listener.out", "output":"bal run udp_listener.bal\n\n# This will print the output below upon a successful read by the listener.\nReceived by listener: Hello Ballerina echo"}], "description":"\/\/ The UDP Listener is used to expose a UDP service over the UDP protocol.\n\/\/ The UDP `Client`\/`ConnectClient` is used to send data to a remote UDP server.\n\/\/ This sample demonstrates the UDP socket listener.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [UDP module](https:\/\/docs.central.ballerina.io\/ballerina\/udp\/latest).", "metatags":"description: This Ballerina sample demonstrates read an reply to UDP clients using the UDP Listener.\nkeywords: ballerina, ballerina by example, bbe, socket, udp"}, {"bbeName":"unions", "resources":[{"tag":"unions", "balFileName":"unions.bal", "bal":"import ballerina\/io;\n\ntype StructuredName record {\n    string firstName;\n    string lastName;\n};\n\n\/\/ A `Name` type value can be either a `StructuredName` or a `string`.\ntype Name StructuredName|string;\n\npublic function main() {\n    \/\/ `name1` is a `StructuredName`.\n    Name name1 = {\n        firstName: \"Rowan\",\n        lastName: \"Atkinson\"\n    };\n    \/\/ `name2` is a `string`.\n    Name name2 = \"Leslie Banks\";\n\n    io:println(nameToString(name1));\n    io:println(nameToString(name2));\n}\n\nfunction nameToString(Name nm) returns string {\n    \/\/ Checks whether `nm` belongs to `string` type.\n    if nm is string {\n\n        return nm;\n    } else {\n        return nm.firstName + \" \" + nm.lastName;\n    }\n}", "outputFileName":"unions.out", "output":"bal run unions.bal\nRowan Atkinson\nLeslie Banks"}], "description":"\/\/ `T1|T2` is the union of the sets described by `T1` and `T2`. `T?` is completely equivalent to `T|()`.\n\/\/ Unions are untagged. The `is` operator tests whether a value belongs to a specific type. `is` operator in\n\/\/ the condition causes declared type to be narrowed.", "metatags":"description: This BBE demonstrates unions in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, unions"}, {"bbeName":"url-encode-decode", "resources":[{"tag":"decode", "balFileName":"url_encode_decode.bal", "bal":"import ballerina\/url;\nimport ballerina\/io;\n\npublic function main() returns error? {\n    string value1 = \"data=value\";\n    \/\/ Encoding a URL component into a string.\n    string encoded = check url:encode(value1, \"UTF-8\");\n    io:println(\"URL encoded value: \", encoded);\n\n    string value2 = \"data%3Dvalue\";\n    \/\/ Decoding an encoded URL component into a string.\n    string decoded = check url:decode(value2, \"UTF-8\");\n    io:println(\"URL decoded value: \", decoded);\n}", "outputFileName":"url_encode_decode.out", "output":"bal run url_encode_decode.bal\nURL encoded value: data%3Dvalue\nURL decoded value: data=value"}], "description":"\/\/ Ballerina URL API supports encoding\/decoding a URL or part of a URL.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [URL module](https:\/\/docs.central.ballerina.io\/ballerina\/url\/latest\/).", "metatags":"description: BBE on how to perform encoding\/decoding a URL or part of a URL.\nkeywords: ballerina, ballerina by example, url encoding, url decoding"}, {"bbeName":"uuid-generation", "resources":[{"tag":"generation", "balFileName":"uuid_generation.bal", "bal":"import ballerina\/io;\nimport ballerina\/uuid;\n\npublic function main() returns error? {\n    \/\/ Generates a UUID of type 1 as a string.\n    string uuid1String = uuid:createType1AsString();\n    io:println(\"UUID of type 1 as a string: \", uuid1String);\n\n    \/\/ Generates a UUID of type 1 as a UUID record.\n    uuid:Uuid uuid1Record = check uuid:createType1AsRecord();\n    io:println(\"UUID of type 1 as a record: \", uuid1Record);\n\n    \/\/ Generates a UUID of type 3 as a string.\n    string uuid3String = check uuid:createType3AsString(\n    uuid:NAME_SPACE_DNS, \"ballerina.io\");\n    io:println(\"UUID of type 3 as a string: \", uuid3String);\n\n    \/\/ Generates a UUID of type 3 as a record.\n    uuid:Uuid uuid3Record = check uuid:createType3AsRecord(\n    uuid:NAME_SPACE_DNS, \"ballerina.io\");\n    io:println(\"UUID of type 3 as a record: \", uuid3Record);\n\n    \/\/ Generates a UUID of type 4 as a string.\n    string uuid4String = uuid:createType4AsString();\n    io:println(\"UUID of type 4 as a string: \", uuid4String);\n\n    \/\/ Generates a UUID of type 4 as a UUID record.\n    uuid:Uuid uuid4Record = check uuid:createType4AsRecord();\n    io:println(\"UUID of type 4 as a record: \", uuid4Record);\n\n    \/\/ Generates a UUID of type 5 as a string.\n    string uuid5String = check uuid:createType5AsString(\n                                    uuid:NAME_SPACE_DNS, \"ballerina.io\");\n    io:println(\"UUID of type 5 as a string: \", uuid5String);\n\n    \/\/ Generates a UUID of type 5 as a record.\n    uuid:Uuid uuid5Record = check uuid:createType5AsRecord(\n                                       uuid:NAME_SPACE_DNS, \"ballerina.io\");\n    io:println(\"UUID of type 5 as a record: \", uuid5Record);\n\n    \/\/ Generates a nil UUID as a string.\n    string nilUuidString = uuid:nilAsString();\n    io:println(\"Nil UUID as a string: \", nilUuidString);\n\n    \/\/ Generates a nil UUID as a UUID record.\n    uuid:Uuid nilUuidRecord = uuid:nilAsRecord();\n    io:println(\"Nil UUID as a record: \", nilUuidRecord);\n}", "outputFileName":"uuid_generation.out", "output":"bal run uuid_generation.bal\nUUID of type 1 as a string: 01eb3f05-fbf8-1b92-8711-dc6a5719bb63\nUUID of type 1 as a record: {\"timeLow\":32194310,\"timeMid\":7997,\"timeHiAndVersion\":5524,\"clockSeqHiAndReserved\":170,\"clockSeqLo\":116,\"node\":82490221220318}\nUUID of type 3 as a string: cea5c405-7d11-3fbb-bdfb-9b68497be28b\nUUID of type 3 as a record: {\"timeLow\":3466970117,\"timeMid\":32017,\"timeHiAndVersion\":16315,\"clockSeqHiAndReserved\":189,\"clockSeqLo\":251,\"node\":170872211759755}\nUUID of type 4 as a string: 73e0d74e-8a4a-40ce-b1d9-b5b522533852\nUUID of type 4 as a record: {\"timeLow\":2795821625,\"timeMid\":5327,\"timeHiAndVersion\":20251,\"clockSeqHiAndReserved\":161,\"clockSeqLo\":71,\"node\":59752348973988}\nUUID of type 5 as a string: 08aab8bc-c69e-5ea8-8a52-dbb645c67fb5\nUUID of type 5 as a record: {\"timeLow\":145406140,\"timeMid\":50846,\"timeHiAndVersion\":24232,\"clockSeqHiAndReserved\":138,\"clockSeqLo\":82,\"node\":241575901167541}\nNil UUID as a string: 00000000-0000-0000-0000-000000000000\nNil UUID as a record: {\"timeLow\":0,\"timeMid\":0,\"timeHiAndVersion\":0,\"clockSeqHiAndReserved\":0,\"clockSeqLo\":0,\"node\":0}"}], "description":"\/\/ The `uuid` library provides functions related to UUID(Universal Unique Identifier).<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [UUID module](https:\/\/docs.central.ballerina.io\/ballerina\/uuid\/latest\/).", "metatags":"description: BBE on how to to generate different types of UUIDs.\nkeywords: ballerina, ballerina by examples, bbe, uuid, type"}, {"bbeName":"uuid-operations", "resources":[{"tag":"operations", "balFileName":"uuid_operations.bal", "bal":"import ballerina\/io;\nimport ballerina\/uuid;\n\npublic function main() returns error? {\n    \/\/ Tests a string to see if it is a valid UUID.\n    boolean valid = uuid:validate(\"4397465e-35f9-11eb-adc1-0242ac120002\");\n    io:println(\"UUID validated: \", valid.toString());\n\n    \/\/ Detects the RFC version of a UUID.\n    uuid:Version v = check uuid:getVersion(\n                                \"4397465e-35f9-11eb-adc1-0242ac120002\");\n    io:println(\"UUID version: \", v.toString());\n\n    \/\/ Converts a UUID string to an array of bytes.\n    byte[] uuidBytes1 = check uuid:toBytes(\n                                  \"4397465e-35f9-11eb-adc1-0242ac120002\");\n    io:println(\"UUID bytes: \", uuidBytes1);\n\n    \/\/ Converts a UUID string to a UUID record.\n    uuid:Uuid uuidRecord1 = check uuid:toRecord(\n                            \"4397465e-35f9-11eb-adc1-0242ac120002\");\n    io:println(\"UUID record: \", uuidRecord1);\n\n    uuid:Uuid uuidRecord = {\n        timeLow: 1133987422,\n        timeMid: 13817,\n        timeHiAndVersion: 4587,\n        clockSeqHiAndReserved: 173,\n        clockSeqLo: 193,\n        node: 2485377957890\n    };\n    \/\/ Converts a UUID record to a UUID string.\n    string uuidString1 = check uuid:toString(uuidRecord);\n    io:println(\"UUID string: \", uuidString1);\n\n    \/\/ Converts a UUID record to an array of bytes.\n    byte[] uuidBytes2 = check uuid:toBytes(uuidRecord);\n    io:println(\"UUID bytes: \", uuidBytes2);\n\n    \/\/ Converts a UUID bytes array to a UUID string.\n    string uuidString2 = check uuid:toString(\n                        [67,151,70,94,53,249,17,235,173,193,2,66,172,18,0,2]);\n    io:println(\"UUID string: \", uuidString2);\n\n    \/\/ Converts a UUID bytes array to a UUID record.\n    uuid:Uuid uuidRecord2 = check uuid:toRecord(\n                        [67,151,70,94,53,249,17,235,173,193,2,66,172,18,0,2]);\n    io:println(\"UUID record: \", uuidRecord2);\n}", "outputFileName":"uuid_operations.out", "output":"bal run uuid_operations.bal\nUUID validated: true\nUUID version: V1\nUUID bytes: [67,151,70,94,53,249,17,235,173,193,2,66,172,18,0,2]\nUUID record: {\"timeLow\":1133987422,\"timeMid\":13817,\"timeHiAndVersion\":4587,\"clockSeqHiAndReserved\":173,\"clockSeqLo\":193,\"node\":2485377957890}\nUUID string: 4397465e-35f9-11eb-adc1-0242ac120002\nUUID bytes: [67,151,70,94,53,249,17,235,173,193,2,66,172,18,0,2]\nUUID string: 4397465e-35f9-11eb-adc1-0242ac120002\nUUID record: {\"timeLow\":1133987422,\"timeMid\":13817,\"timeHiAndVersion\":4587,\"clockSeqHiAndReserved\":173,\"clockSeqLo\":193,\"node\":2485377957890}"}], "description":"\/\/ The `uuid` library provides functions related to UUID(Universal Unique Identifier).<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [UUID module](https:\/\/docs.central.ballerina.io\/ballerina\/uuid\/latest\/).", "metatags":"description: BBE on how to to perform operations on UUIDs.\nkeywords: ballerina, ballerina by examples, bbe, uuid, version, validation, string, record, bytes"}, {"bbeName":"variables-and-types", "resources":[{"tag":"types", "balFileName":"variables_and_types.bal", "bal":"import ballerina\/io;\n\n\/\/ Modules and functions can declare variables. You can see both in this example.\n\/\/ Here we declare a variable `greeting` of type `string` and initialize it to `\"Hello\"`.\nstring greeting = \"Hello\";\n\npublic function main() {\n    \/\/ Assignments are statements not expressions.\n    string name = \"Ballerina\";\n\n    io:println(greeting, \" \", name);\n}", "outputFileName":"variables_and_types.out", "output":"bal run variables_and_types.bal\nHello Ballerina"}], "description":"\/\/ A variable has a type, which constrains what values the variable can hold. \n\/\/ There is a built-in set of named types, including `int`, `float`, `boolean`, `string`.", "metatags":"description: This BBE introduces variables and types in Ballerina.\nkeywords:  ballerina, ballerina by example, bbe, variables, types, type system"}, {"bbeName":"waiting-for-workers", "resources":[{"tag":"workers", "balFileName":"waiting_for_workers.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    io:println(\"Initializing\");\n\n    worker A {\n        io:println(\"In worker A\");\n    }\n\n    io:println(\"In function worker\");\n\n    \/\/ A worker (function or named) can use `wait` to wait for a named worker.\n    wait A;\n\n    io:println(\"After wait A\");\n}", "outputFileName":"waiting_for_workers.out", "output":"bal run waiting_for_workers.bal\nInitializing\nIn function worker\nIn worker A\nAfter wait A"}], "description":"\/\/ Named workers can continue to execute after the function's default worker\n\/\/ terminates and the function returns.\n\/\/ A worker (function or named) can use `wait` to wait for a named worker.", "metatags":"description: This BBE demonstrates waiting for workers\nkeywords: ballerina, ballerina by example, bbe, worker, wait"}, {"bbeName":"websocket-basic-sample", "resources":[{"tag":"sample", "balFileName":"websocket_basic_sample.bal", "bal":"import ballerina\/io;\nimport ballerina\/websocket;\n\nservice \/basic\/ws on new websocket:Listener(9090) {\n   resource isolated function get .()\n                     returns websocket:Service|websocket:Error {\n       \/\/ Accept the WebSocket upgrade by returning a `websocket:Service`.\n       return new WsService();\n   }\n}\n\nservice class WsService {\n    *websocket:Service;\n    \/\/ This `remote function` is triggered when a new text message is received\n    \/\/ from a client.\n    remote isolated function onTextMessage(websocket:Caller caller,\n                                 string text) returns websocket:Error? {\n        io:println(\"\\ntext message: \" + text);\n        return caller->writeTextMessage(\"You said: \" + text);\n    }\n}", "outputFileName":"websocket_basic_sample.out", "output":"bal run websocket_basic_sample.bal"}], "description":"\/\/ This example explains the basic functions of a WebSocket server.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [WebSocket module](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/).", "metatags":"description: This BBE demonstrates the basic functions of a WebSocket server.\nkeywords: ballerina, ballerina by example, bbe, websocket, basic sample, server"}, {"bbeName":"websocket-binary-client", "resources":[{"tag":"client", "balFileName":"websocket_binary_client.bal", "bal":"import ballerina\/io;\nimport ballerina\/lang.'string;\nimport ballerina\/websocket;\n\npublic function main() returns error? {\n    \/\/ Create a new [WebSocket client](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/clients\/Client).\n   websocket:Client wsClient = check new(\"ws:\/\/echo.websocket.org\");\n\n   \/\/ Write a binary message to the server using [writeBinaryMessage](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/clients\/Client#writeBinaryMessage).\n   check wsClient->writeBinaryMessage(\"Binary message\".toBytes());\n\n   \/\/ Read a binary message echoed from the server using [readBinaryMessage](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/clients\/Client#readBinaryMessage).\n   byte[] byteResp = check wsClient->readBinaryMessage();\n   string stringResp = check 'string:fromBytes(byteResp);\n   io:println(stringResp);\n}", "outputFileName":"websocket_binary_client.out", "output":"bal run websocket_binary_client.bal\n\nBinary message"}], "description":"\/\/ The WebSocket client can be used to connect to and interact with a WebSocket server in a Synchronous manner.This example demonstrates how to read and write binary messages using ballerina websocket client<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [WebSocket module](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/).", "metatags":"description: This BBE demonstrates how a WebSocket client can be used to connect to and interact with a WebSocket server using Ballerina.\nkeywords: ballerina, ballerina by example, bbe, websocket, sync, client"}, {"bbeName":"websocket-client-basic-auth", "resources":[{"tag":"auth", "balFileName":"websocket_client_basic_auth.bal", "bal":"import ballerina\/io;\nimport ballerina\/websocket;\n\n\/\/ Defines the WebSocket client to call the Basic auth secured APIs.\n\/\/ The client is enriched with the `Authorization: Basic <token>` header by\n\/\/ passing the [`websocket:CredentialsConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/records\/CredentialsConfig) for the `auth` configuration of the\n\/\/ client.\nwebsocket:Client securedEP = check new(\"wss:\/\/localhost:9090\/foo\/bar\",\n    auth = {\n        username: \"ldclakmal\",\n        password: \"ldclakmal@123\"\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    check securedEP->writeTextMessage(\"Hello, World!\");\n    string textMessage = check securedEP->readTextMessage();\n    io:println(textMessage);\n}", "outputFileName":"websocket_client_basic_auth.out", "output":"# As a prerequisite, start a sample echo WebSocket service secured with Basic Auth.\n# You may need to change the trusted certificate file path.\nbal run websocket_client_basic_auth.bal\nHello, World!"}], "description":"\/\/ A client, which is secured with Basic auth can be used to connect to\n\/\/ a secured service.<br\/>\n\/\/ The client is enriched with the `Authorization: Basic <token>` header by\n\/\/ passing the `websocket:CredentialsConfig` for the `auth` configuration of the\n\/\/ client.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Auth module](https:\/\/docs.central.ballerina.io\/ballerina\/auth\/latest\/).", "metatags":"description: BBE on how to secure WebSocket client with Basic auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, websocket, auth, basic auth"}, {"bbeName":"websocket-client-bearer-token-auth", "resources":[{"tag":"auth", "balFileName":"websocket_client_bearer_token_auth.bal", "bal":"import ballerina\/io;\nimport ballerina\/websocket;\n\n\/\/ Defines the WebSocket client to call the secured APIs.\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the [`websocket:BearerTokenConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/records\/BearerTokenConfig) for the `auth` configuration of the\n\/\/ client.\nwebsocket:Client securedEP = check new(\"wss:\/\/localhost:9090\/foo\/bar\",\n    auth = {\n        token: \"56ede317-4511-44b4-8579-a08f094ee8c5\"\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    check securedEP->writeTextMessage(\"Hello, World!\");\n    string textMessage = check securedEP->readTextMessage();\n    io:println(textMessage);\n}", "outputFileName":"websocket_client_bearer_token_auth.out", "output":"# As a prerequisite, start a secured sample service.\n# You may need to change the trusted certificate file path.\nbal run websocket_client_bearer_token_auth.bal\nHello, World!"}], "description":"\/\/ A client, which is secured with Bearer token auth can be used to connect to\n\/\/ a secured service.<br\/>\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the `websocket:BearerTokenConfig` for the `auth` configuration of the\n\/\/ client.", "metatags":"description: BBE on how to secure WebSocket client with Bearer token auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, websocket, auth, jwt auth"}, {"bbeName":"websocket-client-mutual-ssl", "resources":[{"tag":"ssl", "balFileName":"websocket_client_mutual_ssl.bal", "bal":"import ballerina\/http;\nimport ballerina\/io;\nimport ballerina\/websocket;\n\n\/\/ A WebSocket client can be configured to initiate new connections that are\n\/\/ secured via mutual SSL.\n\/\/ The [`websocket:ClientSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/records\/ClientSecureSocket) record provides the SSL-related configurations.\nwebsocket:Client securedEP = check new(\"wss:\/\/localhost:9090\/foo\/bar\",\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        },\n        cert: \"..\/resource\/path\/to\/public.crt\",\n        protocol: {\n            name: http:TLS\n        },\n        ciphers: [\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\"]\n\n    }\n);\n\npublic function main() returns error? {\n    check securedEP->writeTextMessage(\"Hello, World!\");\n    string textMessage = check securedEP->readTextMessage();\n    io:println(textMessage);\n}", "outputFileName":"websocket_client_mutual_ssl.out", "output":"# As a prerequisite, start a sample service secured with mutual SSL.\n# You may need to change the certificate file path, private key file path, and\n# trusted certificate file path.\nbal run websocket_client_mutual_ssl.bal\nHello, World!"}], "description":"\/\/ Ballerina supports mutual SSL, which is a certificate-based authentication\n\/\/ process in which two parties (the client and server) authenticate each other by\n\/\/ verifying the digital certificates. It ensures that both parties are assured\n\/\/ of each other's identity.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [WebSocket module](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/).", "metatags":"description: BBE on how to secure WebSocket client with mutual SSL.\nkeywords: ballerina, ballerina by example, bbe, websocket, mutual ssl, ssl protocols, ciphers"}, {"bbeName":"websocket-client-oauth2-client-credentials-grant-type", "resources":[{"tag":"type", "balFileName":"websocket_client_oauth2_client_credentials_grant_type.bal", "bal":"import ballerina\/io;\nimport ballerina\/websocket;\n\n\/\/ Defines the WebSocket client to call the OAuth2 secured APIs.\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the [`websocket:OAuth2ClientCredentialsGrantConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/records\/OAuth2ClientCredentialsGrantConfig) for the `auth` configuration\n\/\/ of the client.\nwebsocket:Client securedEP = check new(\"wss:\/\/localhost:9090\/foo\/bar\",\n    auth = {\n        tokenUrl: \"https:\/\/localhost:9445\/oauth2\/token\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: [\"admin\"],\n        clientConfig: {\n            secureSocket: {\n                cert: \"..\/resource\/path\/to\/public.crt\"\n            }\n        }\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    check securedEP->writeTextMessage(\"Hello, World!\");\n    string textMessage = check securedEP->readTextMessage();\n    io:println(textMessage);\n}", "outputFileName":"websocket_client_oauth2_client_credentials_grant_type.out", "output":"# As a prerequisite, start a sample service secured with OAuth2.\n# You may need to change the trusted certificate file path.\nbal run websocket_client_oauth2_client_credentials_grant_type.bal\nHello, World!"}], "description":"\/\/ A client, which is secured with OAuth2 client credentials grant type\n\/\/ can be used to connect to a secured service.<br\/>\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the `websocket:OAuth2ClientCredentialsGrantConfig` for the `auth`\n\/\/ configuration of the client.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure WebSocket client with OAuth2 client credentials grant type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, websocket, auth, oauth2, client credentials grant type"}, {"bbeName":"websocket-client-oauth2-jwt-bearer-grant-type", "resources":[{"tag":"type", "balFileName":"websocket_client_oauth2_jwt_bearer_grant_type.bal", "bal":"import ballerina\/io;\nimport ballerina\/websocket;\n\n\/\/ Defines the WebSocket client to call the OAuth2 secured APIs.\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the [`websocket:OAuth2JwtBearerGrantConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/records\/OAuth2JwtBearerGrantConfig) for the `auth` configuration of the\n\/\/ client.\nwebsocket:Client securedEP = check new(\"wss:\/\/localhost:9090\/foo\/bar\",\n    auth = {\n        tokenUrl: \"https:\/\/localhost:9445\/oauth2\/token\",\n        assertion: \"eyJhbGciOiJFUzI1NiIsImtpZCI6Ij[...omitted for brevity...]\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: [\"admin\"],\n        clientConfig: {\n            secureSocket: {\n                cert: \"..\/resource\/path\/to\/public.crt\"\n            }\n        }\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    check securedEP->writeTextMessage(\"Hello, World!\");\n    string textMessage = check securedEP->readTextMessage();\n    io:println(textMessage);\n}", "outputFileName":"websocket_client_oauth2_jwt_bearer_grant_type.out", "output":"# As a prerequisite, start a sample service secured with OAuth2.\n# You may need to change the trusted certificate file path.\nbal run websocket_client_oauth2_jwt_bearer_grant_type.bal\nHello, World!"}], "description":"\/\/ A client, which is secured with an OAuth2 JWT bearer grant type can be\n\/\/ used to connect to a secured service.<br\/>\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the `websocket:OAuth2JwtBearerGrantConfig` to the `auth`\n\/\/ configuration of the client.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure WebSocket client with OAuth2 JWT bearer grant type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, websocket, auth, oauth2, jwt bearer grant type"}, {"bbeName":"websocket-client-oauth2-password-grant-type", "resources":[{"tag":"type", "balFileName":"websocket_client_oauth2_password_grant_type.bal", "bal":"import ballerina\/io;\nimport ballerina\/websocket;\n\n\/\/ Defines the WebSocket client to call the OAuth2 secured APIs.\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the [`websocket:OAuth2PasswordGrantConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/records\/OAuth2PasswordGrantConfig) to the `auth` configuration of the\n\/\/ client.\nwebsocket:Client securedEP = check new(\"wss:\/\/localhost:9090\/foo\/bar\",\n    auth = {\n        tokenUrl: \"https:\/\/localhost:9445\/oauth2\/token\",\n        username: \"admin\",\n        password: \"admin\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: [\"admin\"],\n        refreshConfig: {\n            refreshUrl: \"https:\/\/localhost:9445\/oauth2\/token\",\n            scopes: [\"hello\"],\n            clientConfig: {\n                secureSocket: {\n                    cert: \"..\/resource\/path\/to\/public.crt\"\n                }\n            }\n        },\n        clientConfig: {\n            secureSocket: {\n                cert: \"..\/resource\/path\/to\/public.crt\"\n            }\n        }\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    check securedEP->writeTextMessage(\"Hello, World!\");\n    string textMessage = check securedEP->readTextMessage();\n    io:println(textMessage);\n}", "outputFileName":"websocket_client_oauth2_password_grant_type.out", "output":"# As a prerequisite, start a sample service secured with OAuth2.\n# You may need to change the trusted certificate file path.\nbal run websocket_client_oauth2_password_grant_type.bal\nHello, World!"}], "description":"\/\/ A client, which is secured with OAuth2 password grant type can be used to\n\/\/ connect to a secured service.<br\/>\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the `websocket:OAuth2PasswordGrantConfig` to the `auth` configuration of\n\/\/ the client.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure WebSocket client with OAuth2 password grant type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, websocket, auth, oauth2, password grant type"}, {"bbeName":"websocket-client-oauth2-refresh-token-grant-type", "resources":[{"tag":"type", "balFileName":"websocket_client_oauth2_refresh_token_grant_type.bal", "bal":"import ballerina\/io;\nimport ballerina\/websocket;\n\n\/\/ Defines the WebSocket client to call the OAuth2 secured APIs.\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the [`websocket:OAuth2RefreshTokenGrantConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/records\/OAuth2RefreshTokenGrantConfig) for the `auth` configuration of the\n\/\/ client.\nwebsocket:Client securedEP = check new(\"wss:\/\/localhost:9090\/foo\/bar\",\n    auth = {\n        refreshUrl: \"https:\/\/localhost:9445\/oauth2\/token\",\n        refreshToken: \"24f19603-8565-4b5f-a036-88a945e1f272\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: [\"admin\"],\n        clientConfig: {\n            secureSocket: {\n                cert: \"..\/resource\/path\/to\/public.crt\"\n            }\n        }\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    check securedEP->writeTextMessage(\"Hello, World!\");\n    string textMessage = check securedEP->readTextMessage();\n    io:println(textMessage);\n}", "outputFileName":"websocket_client_oauth2_refresh_token_grant_type.out", "output":"# As a prerequisite, start a sample service secured with OAuth2.\n# You may need to change the trusted certificate file path.\nbal run websocket_client_oauth2_refresh_token_grant_type.bal\nHello, World!"}], "description":"\/\/ A client, which is secured with an OAuth2 refresh token grant type can be\n\/\/ used to connect to a secured service.<br\/>\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the `websocket:OAuth2RefreshTokenGrantConfig` to the `auth`\n\/\/ configuration of the client.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure WebSocket client with OAuth2 refresh token grant type in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, websocket, auth, oauth2, refresh token grant type"}, {"bbeName":"websocket-client-self-signed-jwt-auth", "resources":[{"tag":"auth", "balFileName":"websocket_client_self_signed_jwt_auth.bal", "bal":"import ballerina\/io;\nimport ballerina\/websocket;\n\n\/\/ Defines the WebSocket client to call the JWT auth secured APIs.\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the [`websocket:JwtIssuerConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/records\/JwtIssuerConfig) for the `auth` configuration of the\n\/\/ client. A self-signed JWT is issued before the request is sent.\nwebsocket:Client securedEP = check new(\"wss:\/\/localhost:9090\/foo\/bar\",\n    auth = {\n        username: \"ballerina\",\n        issuer: \"wso2\",\n        audience: [\"ballerina\", \"ballerina.org\", \"ballerina.io\"],\n        keyId: \"5a0b754-895f-4279-8843-b745e11a57e9\",\n        jwtId: \"JlbmMiOiJBMTI4Q0JDLUhTMjU2In\",\n        customClaims: { \"scp\": \"admin\" },\n        expTime: 3600,\n        signatureConfig: {\n            config: {\n                keyFile: \"..\/resource\/path\/to\/private.key\"\n            }\n        }\n    },\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    check securedEP->writeTextMessage(\"Hello, World!\");\n    string textMessage = check securedEP->readTextMessage();\n    io:println(textMessage);\n}", "outputFileName":"websocket_client_self_signed_jwt_auth.out", "output":"# Before testing this sample, first start a sample service secured with JWT Auth.\n# You may need to change the trusted certificate file path and private key file path.\nbal run websocket_client_self_signed_jwt_auth.bal\nHello, World!"}], "description":"\/\/ A client, which is secured with self-signed JWT can be used to connect to\n\/\/ a secured service.<br\/>\n\/\/ The client is enriched with the `Authorization: Bearer <token>` header by\n\/\/ passing the `websocket:JwtIssuerConfig` to the `auth` configuration of the\n\/\/ client. A self-signed JWT is issued before the request is sent.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure WebSocket client with self-signed JWT auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, websocket, auth, jwt auth"}, {"bbeName":"websocket-client-ssl-tls", "resources":[{"tag":"tls", "balFileName":"websocket_client_ssl_tls.bal", "bal":"import ballerina\/websocket;\nimport ballerina\/io;\n\n\/\/ A WebSocket client can be configured to communicate through WSS as well.\n\/\/ To secure a client using TLS\/SSL, the client needs to be configured with\n\/\/ a certificate file of the listener.\n\/\/ The [`websocket:ClientSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/records\/ClientSecureSocket) record\n\/\/ provides the SSL-related configurations of the client.\nwebsocket:Client securedEP = check new(\"wss:\/\/localhost:9090\/foo\/bar\",\n    secureSocket = {\n        cert: \"..\/resource\/path\/to\/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    check securedEP->writeTextMessage(\"Hello, World!\");\n    string textMessage = check securedEP->readTextMessage();\n    io:println(textMessage);\n}", "outputFileName":"websocket_client_ssl_tls.out", "output":"# As a prerequisite, start a sample service secured with SSL.\n# You may need to change the trusted certificate file path.\nbal run http_client_ssl_tls.bal\nHello, World!"}], "description":"\/\/ You can use the WSS client to connect or interact with an WSS listener.\n\/\/ Provide the `websocket:ClientSecureSocket` configurations to the client to\n\/\/ initiate an WSS connection.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [WebSocket module](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/).", "metatags":"description: BBE on how to secure WebSocket client with SSL.\nkeywords: ballerina, ballerina by example, bbe, websocket, wss, ssl, tls"}, {"bbeName":"websocket-retry-client", "resources":[{"tag":"client", "balFileName":"websocket_retry_client.bal", "bal":"import ballerina\/io;\nimport ballerina\/lang.runtime;\nimport ballerina\/websocket;\n\npublic function main() returns error? {\n    websocket:Client wsClient = check new(\"ws:\/\/localhost:9090\/foo\", {\n        \/\/ Set the maximum retry count to 20 so that it will try 20 times with an interval of\n        \/\/ 1 second in between the retry attempts.\n        retryConfig: { maxCount: 20 }\n    });\n    \/\/ Read the message sent from the server upon upgrading to a WebSocket connection.\n    string text = check wsClient->readTextMessage();\n    io:println(text);\n    io:println(\"Sleeping for 5 seconds. Please shutdown the server now.\");\n    runtime:sleep(5);\n    io:println(\"Please restart the server now.\");\n    \/\/ Client will retry 20 times(20 seconds in time) until the server gets started.\n    string retryMsg = check wsClient->readTextMessage();\n    io:println(retryMsg);\n}", "outputFileName":"websocket_retry_client.out", "output":"# As a prerequisite, start a sample WebSocket service, which sends a message to the client upon upgrading to a WebSocket connection.\n# If you are using a Ballerina WebSocket server, you can send a message to the client in the `onOpen` resource.\n# The client will first connect to the server and then it will wait for 5 seconds to give time for the server to shut down.\n# Start the server after 5 seconds so that the client will start retrying to connect to the server and read messages.\nbal run websocket_retry_client.bal\nHello World!\nSleeping for 5 seconds. Please shutdown the server now.\nPlease restart the server now.\nHello World!"}], "description":"\/\/ If the WebSocket client lost the connection due to some transient failure, it automatically tries to\n\/\/ reconnect to the given backend. If the maximum reconnect attempt is reached it gives up on the connection. <br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [WebSocket module](https:\/\/lib.ballerina.io\/ballerina\/websocket\/latest\/).", "metatags":"description: BBE on how transient failures can be handled using the WebSocket client. When it comes to WebSocket, the key attribute is maintaining a live connection. This BBE shows how the WebSocket client can be made resilient with its reconnect feature.\nkeywords: ballerina, ballerina by example, bbe, websocket, ws, retry"}, {"bbeName":"websocket-service-basic-auth-file-user-store", "resources":[{"tag":"store", "balFileName":"websocket_service_basic_auth_file_user_store.bal", "bal":"import ballerina\/websocket;\n\nlistener websocket:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with Basic auth and can be authorized optionally.\n\/\/ Using Basic auth with the file user store can be enabled by setting the\n\/\/ [`websocket:FileUserStoreConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/records\/FileUserStoreConfig) configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@websocket:ServiceConfig {\n    auth: [\n        {\n            fileUserStoreConfig: {},\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice \/foo on securedEP {\n    resource isolated function get bar() returns websocket:Service {\n        return new WsService();\n   }\n}\n\nservice class WsService {\n    *websocket:Service;\n    remote isolated function onTextMessage(websocket:Caller caller,\n                             string text) returns websocket:Error? {\n        check caller->writeTextMessage(text);\n    }\n}", "outputFileName":"websocket_service_basic_auth_file_user_store.server.out", "output":"# As a prerequisite, ensure that the `Config.toml` file is populated correctly\n# with the user information.\necho '[[\"ballerina.auth.users\"]]\nusername=\"alice\"\npassword=\"password1\"\nscopes=[\"scope1\"]\n[[\"ballerina.auth.users\"]]\nusername=\"bob\"\npassword=\"password2\"\nscopes=[\"scope2\", \"scope3\"]' > Config.toml\n\n# You may need to change the certificate file path and private key file path.\nbal run websocket_service_basic_auth_file_user_store.bal"}], "description":"\/\/ A WebSocket service can be secured using Basic auth and optionally by\n\/\/ enforcing authorization. Then, it validates the Basic auth token sent in the\n\/\/ `Authorization` header against the provided configurations. This reads data\n\/\/ from a file, which has a TOML format. This stores the usernames, passwords\n\/\/ for authentication, and scopes for authorization.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s).<br\/>\n\/\/ In the authorization phase, the scopes of the service are compared\n\/\/ against the scope included in the user store for at least one match between\n\/\/ the two sets.<br\/>\n\/\/ `Config.toml` has defined three users - alice, ldclakmal and eve. Each user has a\n\/\/ password and optionally assigned scopes as an array.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Auth module](https:\/\/docs.central.ballerina.io\/ballerina\/auth\/latest\/).", "metatags":"description: BBE on how to secure WebSocket service with Basic auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, websocket, auth, basic auth"}, {"bbeName":"websocket-service-basic-auth-ldap-user-store", "resources":[{"tag":"store", "balFileName":"websocket_service_basic_auth_ldap_user_store.bal", "bal":"import ballerina\/websocket;\n\nlistener websocket:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with Basic auth and can be authorized optionally.\n\/\/ Basic auth using the LDAP user store can be enabled by setting the\n\/\/ [`websocket:LdapUserStoreConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/records\/LdapUserStoreConfig) configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@websocket:ServiceConfig {\n    auth: [\n        {\n            ldapUserStoreConfig: {\n                domainName: \"avix.lk\",\n                connectionUrl: \"ldap:\/\/localhost:389\",\n                connectionName: \"cn=admin,dc=avix,dc=lk\",\n                connectionPassword: \"avix123\",\n                userSearchBase: \"ou=Users,dc=avix,dc=lk\",\n                userEntryObjectClass: \"inetOrgPerson\",\n                userNameAttribute: \"uid\",\n                userNameSearchFilter: \"(&(objectClass=inetOrgPerson)(uid=?))\",\n                userNameListFilter: \"(objectClass=inetOrgPerson)\",\n                groupSearchBase: [\"ou=Groups,dc=avix,dc=lk\"],\n                groupEntryObjectClass: \"groupOfNames\",\n                groupNameAttribute: \"cn\",\n                groupNameSearchFilter: \"(&(objectClass=groupOfNames)(cn=?))\",\n                groupNameListFilter: \"(objectClass=groupOfNames)\",\n                membershipAttribute: \"member\",\n                userRolesCacheEnabled: true,\n                connectionPoolingEnabled: false,\n                connectionTimeout: 5,\n                readTimeout: 60\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice \/foo on securedEP {\n    resource isolated function get bar() returns websocket:Service {\n        return new WsService();\n   }\n}\n\nservice class WsService {\n    *websocket:Service;\n    remote isolated function onTextMessage(websocket:Caller caller,\n                             string text) returns websocket:Error? {\n        check caller->writeTextMessage(text);\n    }\n}", "outputFileName":"websocket_service_basic_auth_ldap_user_store.server.out", "output":"# You may need to change the certificate file path and private key file path.\nbal run websocket_service_basic_auth_ldap_user_store.bal"}], "description":"\/\/ A WebSocket service can be secured using Basic auth and by enforcing\n\/\/ authorization optionally. Then, it validates the Basic auth token sent in\n\/\/ the `Authorization` header against the provided configurations. This reads\n\/\/ data from the configured LDAP. This stores usernames, passwords for\n\/\/ authentication, and scopes for authorization.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s).<br\/>\n\/\/ In the authorization phase, the scopes of the service are compared\n\/\/ against the scope included in the user store for at least one match between\n\/\/ the two sets.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [Auth module](https:\/\/docs.central.ballerina.io\/ballerina\/auth\/latest\/).", "metatags":"description: BBE on how to secure WebSocket service with Basic auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, websocket, auth, basic auth"}, {"bbeName":"websocket-service-jwt-auth", "resources":[{"tag":"auth", "balFileName":"websocket_service_jwt_auth.bal", "bal":"import ballerina\/websocket;\n\nlistener websocket:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with JWT authentication and can be authorized\n\/\/ optionally. JWT authentication can be enabled by setting the\n\/\/ [`websocket:JwtValidatorConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/records\/JwtValidatorConfig) configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@websocket:ServiceConfig {\n    auth: [\n        {\n            jwtValidatorConfig: {\n                issuer: \"wso2\",\n                audience: \"ballerina\",\n                signatureConfig: {\n                    certFile: \"..\/resource\/path\/to\/public.crt\"\n                },\n                scopeKey: \"scp\"\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice \/foo on securedEP {\n    resource isolated function get bar() returns websocket:Service {\n        return new WsService();\n   }\n}\n\nservice class WsService {\n    *websocket:Service;\n    remote isolated function onTextMessage(websocket:Caller caller,\n                             string text) returns websocket:Error? {\n        check caller->writeTextMessage(text);\n    }\n}", "outputFileName":"websocket_service_jwt_auth.server.out", "output":"# You may need to change the certificate file path and private key file path.\nbal run websocket_service_jwt_auth.bal"}], "description":"\/\/ A WebSocket service can be secured using JWT and by enforcing\n\/\/ authorization optionally. Then, it validates the JWT sent in the\n\/\/ `Authorization` header against the provided configurations.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s). The scope can be included\n\/\/ in the JWT using a custom claim attribute. That custom claim attribute\n\/\/ also can be configured as the `scopeKey`.<br\/>\n\/\/ In the authorization phase, the scopes of the service are compared\n\/\/ against the scope included in the JWT for at least one match between the two\n\/\/ sets.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [JWT module](https:\/\/docs.central.ballerina.io\/ballerina\/jwt\/latest\/).", "metatags":"description: BBE on how to secure WebSocket service with JWT auth in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, websocket, auth, jwt auth"}, {"bbeName":"websocket-service-mutual-ssl", "resources":[{"tag":"ssl", "balFileName":"websocket_service_mutual_ssl.bal", "bal":"import ballerina\/http;\nimport ballerina\/websocket;\n\n\/\/ A WebSocket listener can be configured to accept new connections that are\n\/\/ secured via mutual SSL.\n\/\/ The [`websocket:ListenerSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/records\/ListenerSecureSocket) record provides the SSL-related listener configurations.\nlistener websocket:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        },\n        \/\/ Enables mutual SSL.\n        mutualSsl: {\n            verifyClient: http:REQUIRE,\n            cert: \"..\/resource\/path\/to\/public.crt\"\n        },\n        \/\/ Enables the preferred SSL protocol and its versions.\n        protocol: {\n            name: http:TLS,\n            versions: [\"TLSv1.2\", \"TLSv1.1\"]\n        },\n        \/\/ Configures the preferred ciphers.\n        ciphers: [\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\"]\n\n    }\n);\n\nservice \/foo on securedEP {\n    resource isolated function get bar() returns websocket:Service {\n        return new WsService();\n   }\n}\n\nservice class WsService {\n    *websocket:Service;\n    remote isolated function onTextMessage(websocket:Caller caller,\n                             string text) returns websocket:Error? {\n        check caller->writeTextMessage(text);\n    }\n}", "outputFileName":"websocket_service_mutual_ssl.server.out", "output":"# You may need to change the certificate file path, private key file path, and\n# trusted certificate file path.\nbal run websocket_service_mutual_ssl.bal"}], "description":"\/\/ Ballerina supports mutual SSL, which is a certificate-based authentication\n\/\/ process in which two parties (the client and server) authenticate each other by\n\/\/ verifying the digital certificates. It ensures that both parties are assured\n\/\/ of each other's identity.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [WebSocket module](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/).", "metatags":"description: BBE on how to secure WebSocket listener with mutual SSL.\nkeywords: ballerina, ballerina by example, bbe, websocket, mutual ssl, ssl protocols, ciphers"}, {"bbeName":"websocket-service-oauth2", "resources":[{"tag":"oauth2", "balFileName":"websocket_service_oauth2.bal", "bal":"import ballerina\/websocket;\n\nlistener websocket:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\n\/\/ The service can be secured with OAuth2 authentication and can be authorized\n\/\/ optionally. OAuth2 authentication can be enabled by setting the\n\/\/ [`websocket:OAuth2IntrospectionConfig`](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/records\/OAuth2IntrospectionConfig) configurations.\n\/\/ Authorization is based on scopes. A scope maps to one or more groups.\n\/\/ Authorization can be enabled by setting the `string|string[]` type\n\/\/ configurations for `scopes` field.\n@websocket:ServiceConfig {\n    auth: [\n        {\n            oauth2IntrospectionConfig: {\n                url: \"https:\/\/localhost:9445\/oauth2\/introspect\",\n                tokenTypeHint: \"access_token\",\n                scopeKey: \"scp\",\n                clientConfig: {\n                    customHeaders: {\"Authorization\": \"Basic YWRtaW46YWRtaW4=\"},\n                    secureSocket: {\n                        cert: \"..\/resource\/path\/to\/public.crt\"\n                    }\n                }\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice \/foo on securedEP {\n    resource isolated function get bar() returns websocket:Service {\n        return new WsService();\n   }\n}\n\nservice class WsService {\n    *websocket:Service;\n    remote isolated function onTextMessage(websocket:Caller caller,\n                             string text) returns websocket:Error? {\n        check caller->writeTextMessage(text);\n    }\n}", "outputFileName":"websocket_service_oauth2.server.out", "output":"# You may need to change the certificate file path and private key file path.\nbal run websocket_service_oauth2.bal"}], "description":"\/\/ A WebSocket service can be secured using OAuth2 and by enforcing\n\/\/ authorization optionally. Then, it validates the OAuth2 token sent in the\n\/\/ `Authorization` header against the provided configurations. This calls the\n\/\/ configured introspection endpoint to validate.<br\/>\n\/\/ Ballerina uses the concept of scopes for authorization. A resource declared\n\/\/ in a service can be bound to one\/more scope(s). The scope can be included\n\/\/ in the introspection response using a custom claim attribute. That custom\n\/\/ claim attribute also can be configured as the `scopeKey`.<br\/>\n\/\/ In the authorization phase, the scopes of the service are compared\n\/\/ against the scope included in the introspection response for at least one\n\/\/ match between the two sets.<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [OAuth2 module](https:\/\/docs.central.ballerina.io\/ballerina\/oauth2\/latest\/).", "metatags":"description: BBE on how to secure WebSocket service with OAuth2 in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, websocket, auth, oauth2, introspection"}, {"bbeName":"websocket-service-ssl-tls", "resources":[{"tag":"tls", "balFileName":"websocket_service_ssl_tls.bal", "bal":"import ballerina\/websocket;\n\n\/\/ A WebSocket listener can be configured to communicate through WSS as well.\n\/\/ To secure a listener using SSL\/TLS, the listener needs to be configured with\n\/\/ a certificate file and a private key file for the listener.\n\/\/ The [`websocket:ListenerSecureSocket`](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/records\/ListenerSecureSocket) record\n\/\/ provides the SSL-related listener configurations of the listener.\nlistener websocket:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"..\/resource\/path\/to\/public.crt\",\n            keyFile: \"..\/resource\/path\/to\/private.key\"\n        }\n    }\n);\n\nservice \/foo on securedEP {\n    resource isolated function get bar() returns websocket:Service {\n        return new WsService();\n   }\n}\n\nservice class WsService {\n    *websocket:Service;\n    remote isolated function onTextMessage(websocket:Caller caller,\n                             string text) returns websocket:Error? {\n        check caller->writeTextMessage(text);\n    }\n}", "outputFileName":"websocket_service_ssl_tls.server.out", "output":"# You may need to change the certificate file path and private key file path.\nbal run websocket_service_ssl_tls.bal"}], "description":"\/\/ You can use the WebSocket listener to connect to or interact with an WebSocket client.\n\/\/ Provide the `websocket:ListenerSecureSocket` configurations to the server to\n\/\/ expose an WSS connection.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [WebSocket module](https:\/\/docs.central.ballerina.io\/ballerina\/websocket\/latest\/).", "metatags":"description: BBE on how to secure WebSocket listener with SSL.\nkeywords: ballerina, ballerina by example, bbe, websocket, wss, ssl, tls"}, {"bbeName":"websocket-text-client", "resources":[{"tag":"client", "balFileName":"websocket_text_client.bal", "bal":"import ballerina\/io;\nimport ballerina\/websocket;\n\npublic function main() returns error? {\n    \/\/ Create a new [WebSocket client](https:\/\/lib.ballerina.io\/ballerina\/websocket\/latest\/clients\/Client).\n   websocket:Client wsClient = check new(\"ws:\/\/echo.websocket.org\");\n\n   \/\/ Write a text message to the server using [writeTextMessage](https:\/\/lib.ballerina.io\/ballerina\/websocket\/latest\/clients\/Client#writeTextMessage).\n   check wsClient->writeTextMessage(\"Text message\");\n\n   \/\/ Read a text message echoed from the server using [readTextMessage](https:\/\/lib.ballerina.io\/ballerina\/websocket\/latest\/clients\/Client#readTextMessage).\n   string textResp = check wsClient->readTextMessage();\n   io:println(textResp);\n}", "outputFileName":"websocket_text_client.out", "output":"bal run websocket_text_client.bal\n\nText message"}], "description":"\/\/ The WebSocket client can be used to connect to and interact with a WebSocket server in a Synchronous manner. This example demonstrates how to read and write text messages using ballerina websocket client<br\/><br\/>\n\/\/ For more information on the underlying module,\n\/\/ see the [WebSocket module](https:\/\/lib.ballerina.io\/ballerina\/websocket\/latest\/).", "metatags":"description: This BBE demonstrates how a WebSocket client can be used to connect to and interact with a WebSocket server using Ballerina.\nkeywords: ballerina, ballerina by example, bbe, websocket, sync, client"}, {"bbeName":"websub-webhook-sample", "resources":[{"tag":"sample", "balFileName":"websub_webhook_sample.bal", "bal":"\/\/ The Ballerina WebSub Subscriber service, which could be used as a WebHook Listener for GitHub.\nimport ballerina\/websub;\nimport ballerina\/io;\n\n\/\/ Annotation-based configurations specifying the subscription parameters.\n@websub:SubscriberServiceConfig {\n    target: [\n        \"https:\/\/api.github.com\/hub\", \n        \"https:\/\/github.com\/<YOUR_ORGANIZATION>\/<REPOSITORY>\/events\/push.json\"\n    ],\n    secret: \"<YOUR_SECRET_KEY>\",\n    httpConfig: {\n        auth: {\n            token: \"<YOUR_AUTH_TOKEN>\"\n        }\n    }\n}\n\/\/ Service path is not specified, hence Subscriber Service will auto generate a unique random service path segment.\nservice on new websub:Listener(9090) {\n    \/\/ Defines the remote function that accepts the event notification request for the WebHook.\n    remote function onEventNotification(\n                    websub:ContentDistributionMessage event) returns error? {\n        var retrievedContent = event.content;\n        if (retrievedContent is json) {\n            if (retrievedContent.zen is string) {\n                int hookId = check retrievedContent.hook_id;\n                json sender = check retrievedContent.sender;\n                int senderId = check sender.id;\n                io:println(string`PingEvent received for webhook [${hookId}]`);\n                io:println(string`Event sender [${senderId}]`);\n            } else if (retrievedContent.ref is string) {\n                json repository = check retrievedContent.repository;\n                string repositoryName =  check repository.name;\n                string lastUpdatedTime =  check repository.updated_at;\n                io:println(string`PushEvent received for [${repositoryName}]`);\n                io:println(string`Last updated at ${lastUpdatedTime}`);\n            }\n        } else {\n            io:println(\"Unrecognized content type, hence ignoring\");\n        }\n    }\n}", "outputFileName":"websub_webhook_sample.out", "output":"bal run websub_webhook_sample.bal\ntime = 2021-03-15 15:43:00,198 level = WARN module = ballerina\/websub message = \"HTTPS is recommended but using HTTP\"\nPingEvent received for webhook [287075824]\nEvent sender [77491511]\nPushEvent received for [Hello-World]\nLast updated at 2021-03-15T15:43:01Z"}], "description":"\/\/ Ballerina provides the capability to easily introduce subscriber services that are WebSub-compliant.\n\/\/ Ballerina WebSub subscribers can specify the topic and hub to which they wish to subscribe to receive notifications. \n\/\/ If not specified WebSub Subscriber Services will auto generate a unique random service path segment. \n\/\/ Ballerina WebSub Subscriber Services could thus be registered as WebHooks to receive event notifications.\n\/\/ In this example, a WebSub Subscriber service is used to implement a GitHub-based WebHook service.<br\/><br\/>\n\/\/ For more information on the underlying module, \n\/\/ see the [WebSub module](https:\/\/docs.central.ballerina.io\/ballerina\/websub\/latest\/).", "metatags":"description: This BBE demonstrates how a WebSub Subscriber service could be registered as a WebHook Service for GitHub.\nkeywords: ballerina, ballerina by example, bbe, websub, subscriber"}, {"bbeName":"while-statement", "resources":[{"tag":"statement", "balFileName":"while_statement.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    LinkedList link1 = {value: \"link1\", next: ()};\n    LinkedList link2 = {value: \"link2\", next: link1};\n    io:println(len(link2));\n}\n\ntype LinkedList record {\n    string value;\n    LinkedList? next;\n};\n\nfunction len(LinkedList ll) returns int {\n    int n = 0;\n    LinkedList? v = ll;\n    \/\/ Executes the code block that is defined within the `while` block\n    \/\/ as long as the value of `v` is not `nil`.\n    while v != () {\n        n += 1;\n        v = v.next;\n    }\n\n    return n;\n}", "outputFileName":"while_statement.out", "output":"bal run while_statement.bal\n2"}], "description":"\/\/ The `while` statement is a more flexible iteration than `foreach`. `break` and `continue` statements\n\/\/ can be used within the loops to alter control flow.", "metatags":"description: This BBE demonstrates while statement in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, while, loops"}, {"bbeName":"working-directly-with-json", "resources":[{"tag":"json", "balFileName":"working_directly_with_json.bal", "bal":"import ballerina\/io;\nimport ballerina\/lang.value as value;\n\n\/\/ Define a variable of type `json` that holds a mapping value.\njson j = {\n    x: {\n        y: {\n            z: \"ballerina\"\n        }\n    }\n};\n\n\/\/ Field access is allowed on the `json`-typed variable. However, the return\n\/\/ type would be a union of `json` and `error`.\njson v = check j.x.y;\nstring s1 = check v.z;\n\n\/\/ `ensureType` method can also be used to perform conversions.\nstring s2 = check value:ensureType(v.z, string);\n\npublic function main() {\n    io:println(\"Value of s1: \" + s1);\n    io:println(\"Value of s2: \" + s2);\n}", "outputFileName":"working_directly_with_json.out", "output":"bal run working_directly_with_json.bal\nValue of s1: ballerina\nValue of s2: ballerina"}], "description":"\/\/ Ballerina defines certain types as lax types for which static typing rules are less strict.\n\/\/ For example, field access (`.`) and optional field access (`?.`), which are generally allowed on\n\/\/ records and objects for fields that are defined in the type descriptors, are also additionally\n\/\/ allowed on lax types. For such operations, some of the type checking is moved from compile time to runtime.\n\/\/ `json` is defined to be a lax type along with any `map<T>` where `T` is a lax type.", "metatags":"description: This BBE demonstrates how to work directly with JSON values in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, json type, json"}, {"bbeName":"xml", "resources":[], "description":"\/\/ `xml` is a separate basic type. Uses sequence concept similar to XQuery and XPath2. Based on XML Infoset,\n\/\/ rather than PSVI. Allows XM` syntax to be used to construct `xml` values. `xml` type is designed to\n\/\/ work well for HTML as well as XML. Navigation syntax with XPath-like functionality. Works with `query\n\/\/ expressions` to provide XQuery FLWOR-like functionality. No up pointers: elements do not have a reference to\n\/\/ parents or siblings.", "metatags":"description: This BBE demonstrates xml in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, xml"}, {"bbeName":"xml-data-model", "resources":[{"tag":"model", "balFileName":"xml_data_model.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    \/\/ An XML element. There can be only one root element.\n    xml x1 = xml `<book>The Lost World<\/book>`;\n    io:println(x1);\n\n    \/\/ An XML text.\n    xml x2 = xml `Hello, world!`;\n    io:println(x2);\n\n    \/\/ An XML comment.\n    xml x3 = xml `<!--I am a comment-->`;\n    io:println(x3);\n\n    \/\/ An XML processing instructions.\n    xml x4 = xml `<?target data?>`;\n    io:println(x4);\n\n    \/\/ Multiple XML items can be combined to form a sequence of XML.\n    \/\/ The resulting sequence is another XML on its own.\n    xml x5 = x1 + x2 + x3 + x4;\n    io:println(x5);\n\n}", "outputFileName":"xml_data_model.out", "output":"bal run xml.bal\n<book>The Lost World<\/book>\nHello, world!\n<!--I am a comment-->\n<?target data?>\n<book>The Lost World<\/book>Hello, world!<!--I am a comment--><?target data?>"}], "description":"\/\/ An `xml` value is a sequence representing the parsed content of an XML element. <br><\/br>\n\/\/ An `xml` value has four kinds of items.\n\/\/ <ul>\n\/\/ <li>`element`, `processing instruction` and `comment` item correspond 1:1 to XML infoset items<\/li>\n\/\/ <li>`text` item corresponds to one or more Character Information Items<\/li>\n\/\/ <\/ul>\n\/\/<br><\/br>\n\/\/ <p>XML document is an `xml` sequence with only one `element` and no `text`. An `element` item is mutable\n\/\/ and consists of:<\/p>\n\/\/ <ul>\n\/\/ <li>name: type `string`<\/li>\n\/\/ <li>attributes: type `map<string>`<\/li>\n\/\/ <li>children: type `xml`<\/li>\n\/\/ <\/ul>\n\/\/<br><\/br>\n\/\/ <p>A `text` item is immutable.<\/p>\n\/\/ <ul>\n\/\/ <li>it has no identity: `==` is the same as `===`<\/li>\n\/\/ <li>consecutive `text` items never occur in an `xml` value: they are always merged<\/li>\n\/\/ <\/ul>", "metatags":"description: This BBE demonstrates xml data model in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, xml data model, xml"}, {"bbeName":"xml-json-conversion", "resources":[{"tag":"conversion", "balFileName":"xml_json_conversion.bal", "bal":"import ballerina\/io;\nimport ballerina\/xmldata;\n\npublic function main() returns error? {\n    \/\/ Creates a JSON object.\n    json jsonObject = {\"Store\": {\n            \"@id\": \"AST\",\n            \"name\": \"Anne\",\n            \"address\": {\n                \"street\": \"Main\",\n                \"city\": \"94\"\n            },\n            \"codes\": [\"4\", \"8\"]\n        }};\n    \/\/ Converts the JSON object to XML using a default `attributePrefix` (i.e., the `@` character)\n    \/\/ and the default `arrayEntryTag` (i.e., `root`).\n    xml? xmlData = check xmldata:fromJson(jsonObject);\n    io:println(xmlData);\n\n    if (xmlData is xml) {\n        \/\/ Converts the XML to JSON object using a default `attributePrefix` (i.e., the `@` character)\n        \/\/ and the default `preserveNamespaces` (i.e., `true`).\n        jsonObject = check xmldata:toJson(xmlData);\n        io:println(jsonObject);\n    }\n}", "outputFileName":"xml_json_conversion.out", "output":"bal run xml_json_conversion.bal\n<Store id=\"AST\"><name>Anne<\/name><address><street>Main<\/street><city>94<\/city><\/address><codes>4<\/codes><codes>8<\/codes><\/Store>\n{\"Store\":{\"name\":\"Anne\",\"address\":{\"street\":\"Main\",\"city\":\"94\"},\"codes\":[\"4\",\"8\"],\"@id\":\"AST\"}}"}], "description":"\/\/ The `xmldata:fromJson()` and `xmldata:toJson()` functions are used to do the conversions between JSON and XML.\n\/\/ For more information on the underlying module,\n\/\/ see the [xmldata module](https:\/\/docs.central.ballerina.io\/ballerina\/xmldata\/latest\/).", "metatags":"description: This BBE demonstrates the conversion between JSON and XML in Ballerina.\nkeywords: ballerina, ballerina by example, BBE, json, xml"}, {"bbeName":"xml-namespaces", "resources":[{"tag":"namespaces", "balFileName":"xml_namespaces.bal", "bal":"xml:Element e = xml`<p:e xmlns:p=\"http:\/\/example.com\/\"\/>`;\n\/\/ `name` will be `{http:\/\/example.com}e`.\nstring name = e.getName();", "outputFileName":"xml_namespaces.out", "output":"bal run xml_namespaces.bal"}], "description":"\/\/ The goal is to support namespaces without adding complexity if you don’t use them. The \n\/\/ `ns:x` qualified name in XML is expanded into `{url}x` where `url` is the namespace name bound to `ns`. The XML namespace\n\/\/ declarations are kept as attributes using the standard binding of [xmlns](http:\/\/www.w3.org\/2000\/xmlns\/).", "metatags":"description: This BBE demonstrates xml namespaces in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, xml namespace"}, {"bbeName":"xml-navigation", "resources":[{"tag":"navigation", "balFileName":"xml_navigation.bal", "bal":"import ballerina\/io;\n\npublic function main() {\n    xml x = xml \n        `<items>\n            <!--Contents-->\n            <book>\n                <name>A Study in Scarlet<\/name>\n                <author><name>Arthur Conan Doyle<\/name><\/author>\n            <\/book>\n            <planner>Daily Planner<kind>day<\/kind><pages>365<\/pages><\/planner>\n            <book>\n                <name>The Sign of Four<\/name>\n                <author><name>Arthur Conan Doyle<\/name><\/author>\n            <\/book>\n            <pen><kind>marker<\/kind><color>blue<\/color><\/pen>\n        <\/items>`;\n\n    \/\/ `x.<items>` - every element in `x` named `items`.\n    xml a = x.<items>;\n    io:println(a);\n\n    \/\/ `x\/*` - for every element `e` in `x`, the children of `e`.\n    xml b = x\/*;\n    io:println(b);\n\n    \/\/ `x\/<planner>` - for every element `e` in `x`, every element named `planner` in the children of `e`.\n    xml c = x\/<planner>;\n    io:println(c);\n\n    \/\/ `x\/<planner|pen>` - for every element `e` in `x`, every element named `planner` or `pen` in the\n    \/\/ children of `e`.\n    xml d = x\/<planner|pen>;\n    io:println(d);\n\n    \/\/ `x\/<*>` - for every element `e` in `x`, every element in the children of `e`.\n    xml e = x\/<*>;\n    io:println(e);\n\n    \/\/ x\/**\/<name>  - for every element `e` in `x`, every element named `name` in\n    \/\/ the descendants of `e`.\n    xml f = x\/**\/<name>;\n    io:println(f);\n\n    \/\/ x\/<book>[0]  - for every element `e` in `x`, first element named `book` in\n    \/\/ the children of `e`.\n    xml g = x\/<book>[0];\n    io:println(g);\n\n}", "outputFileName":"xml_navigation.out", "output":"bal run xml_navigation.bal\n<items>\n            <!--Contents-->\n            <book>\n                <name>A Study in Scarlet<\/name>\n                <author><name>Arthur Conan Doyle<\/name><\/author>\n            <\/book>\n            <planner>Daily Planner<kind>day<\/kind><pages>365<\/pages><\/planner>\n            <book>\n                <name>The Sign of Four<\/name>\n                <author><name>Arthur Conan Doyle<\/name><\/author>\n            <\/book>\n            <pen><kind>marker<\/kind><color>blue<\/color><\/pen>\n        <\/items>\n\n            <!--Contents-->\n            <book>\n                <name>A Study in Scarlet<\/name>\n                <author><name>Arthur Conan Doyle<\/name><\/author>\n            <\/book>\n            <planner>Daily Planner<kind>day<\/kind><pages>365<\/pages><\/planner>\n            <book>\n                <name>The Sign of Four<\/name>\n                <author><name>Arthur Conan Doyle<\/name><\/author>\n            <\/book>\n            <pen><kind>marker<\/kind><color>blue<\/color><\/pen>\n        \n<planner>Daily Planner<kind>day<\/kind><pages>365<\/pages><\/planner>\n<planner>Daily Planner<kind>day<\/kind><pages>365<\/pages><\/planner><pen><kind>marker<\/kind><color>blue<\/color><\/pen>\n<book>\n                <name>A Study in Scarlet<\/name>\n                <author><name>Arthur Conan Doyle<\/name><\/author>\n            <\/book><planner>Daily Planner<kind>day<\/kind><pages>365<\/pages><\/planner><book>\n                <name>The Sign of Four<\/name>\n                <author><name>Arthur Conan Doyle<\/name><\/author>\n            <\/book><pen><kind>marker<\/kind><color>blue<\/color><\/pen>\n<name>A Study in Scarlet<\/name><name>Arthur Conan Doyle<\/name><name>The Sign of Four<\/name><name>Arthur Conan Doyle<\/name>\n<book>\n                <name>A Study in Scarlet<\/name>\n                <author><name>Arthur Conan Doyle<\/name><\/author>\n            <\/book>"}], "description":"\/\/ XML navigation expressions allow for convenient navigation of XML \n\/\/ element structure, in a similar way to XPath.", "metatags":"description: This BBE demonstrates XML navigation\nkeywords: ballerina, ballerina by example, bbe, xml, xml navigation"}, {"bbeName":"xml-operations", "resources":[{"tag":"operations", "balFileName":"xml_operations.bal", "bal":"import ballerina\/io;\n\npublic function main() returns error? {\n    xml x1 = xml `<name>Sherlock Holmes<\/name>`;\n    xml:Element x2 = \n        xml `<details>\n                <author>Sir Arthur Conan Doyle<\/author>\n                <language>English<\/language>\n            <\/details>`;\n\n    \/\/ `+` does concatenation.\n    xml x3 = x1 + x2;\n\n    io:println(x3);\n\n    xml x4 = xml `<name>Sherlock Holmes<\/name><details>\n                        <author>Sir Arthur Conan Doyle<\/author>\n                        <language>English<\/language>\n                  <\/details>`;\n    \/\/ `==` does deep equals.\n    boolean eq = x3 == x4;\n\n    io:println(eq);\n\n    \/\/ `foreach` iterates over each item.\n    foreach var item in x4 {\n        io:println(item);\n    }\n\n    \/\/ `x[i]` gives i-th item (empty sequence if none).\n    io:println(x3[0]);\n\n    \/\/ `x.id` accesses required attribute named `id`:\n    \/\/ result is `error` if there is no such attribute\n    \/\/ or if `x` is not a singleton.\n    xml x5 = xml `<para id=\"greeting\">Hello<\/para>`;\n    string id = check x5.id;\n\n    io:println(id);\n\n    \/\/ `x?.id` accesses optional attribute named `id`:\n    \/\/ result is `()` if there is no such attribute.\n    string? name = check x5?.name;\n\n    io:println(name is ());\n\n    \/\/ Mutate an element using `e.setChildren(x)`.\n    x2.setChildren(xml `<language>French<\/language>`);\n\n    io:println(x2);\n    io:println(x3);\n}", "outputFileName":"xml_operations.out", "output":"bal run xml_operations.bal\n<name>Sherlock Holmes<\/name><details>\n                <author>Sir Arthur Conan Doyle<\/author>\n                <language>English<\/language>\n            <\/details>\nfalse\n<name>Sherlock Holmes<\/name>\n<details>\n                        <author>Sir Arthur Conan Doyle<\/author>\n                        <language>English<\/language>\n                  <\/details>\n<name>Sherlock Holmes<\/name>\ngreeting\ntrue\n<details><language>French<\/language><\/details>\n<name>Sherlock Holmes<\/name><details><language>French<\/language><\/details>"}], "description":"\/\/ `+` does concatenation.\n\/\/ `==` does deep equals.\n\/\/ `foreach` iterates over each item.\n\/\/ `x[i]` gives i-th item (empty sequence if none).\n\/\/ `x.id` accesses required attribute named `id`:\n\/\/ result is error if there is no such attribute\n\/\/ or if x is not a singleton.\n\/\/ `x?.id` accesses optional attribute named `id`:\n\/\/ result is () if there is no such attribute.\n\/\/ Langlib lang.xml provides other operations.\n\/\/ Mutate an element using `e.setChildren(x)`.", "metatags":"description: This BBE demonstrates XML operations in Ballerina\nkeywords: ballerina, ballerina by example, bbe, xml, xml operations"}, {"bbeName":"xml-subtyping", "resources":[{"tag":"subtyping", "balFileName":"xml_subtyping.bal", "bal":"import ballerina\/io;\n\n\/\/ An `xml` value belongs to `xml:Element` if it consists of just an element\n\/\/ item. \nxml:Element element = xml `<p>Hello<\/p>`;\n\n\/\/ Similarly for `xml:Comment` and `xml:ProcessingInstruction`.\nxml:Comment comment = xml `<!--This is a comment-->`;\nxml:ProcessingInstruction procInst = xml `<?target data?>`;\n\npublic function main() {\n    \/\/ An `xml` value belongs to the `xml:Text` if it consists of a text item or is empty.\n    xml:Text _ = xml ``;\n    xml:Text _ = xml `Hello World`;\n\n    string hello = \"Hello\";\n    string world = \"World\";\n    xml:Text c = stringToXml(hello + \" \" + world);\n    io:println(c);\n\n    xml:Element otherElement = xml `<q>World<\/q>`;\n\n    xml d = element + otherElement;\n    xml e = xml `<p>hello<\/p>World`;\n    \/\/ An `xml` value belongs to the type `xml<T>` if each of its members belong \n    \/\/ to `T`.\n    io:println(element is xml<xml:Element>);\n    io:println(d is xml<xml:Element>);\n    io:println(e is xml<xml:Element>);\n\n    io:println(d);\n    rename(d, \"q\", \"r\");\n    io:println(d);\n}\n\nfunction stringToXml(string s) returns xml:Text {\n    return xml:createText(s);\n}\n\n\/\/ Functions in lang.xml use subtyping to provide safe and convenient typing.\n\/\/ For example, `x.elements()` returns element items in `x` as type \n\/\/ `xml<xml:Element>` and `e.getName()` and `e.setName()` are defined when \n\/\/ `e` has type `xml:Element`.\nfunction rename(xml x, string oldName, string newName) {\n    foreach xml:Element e in x.elements() {\n        if e.getName() == oldName {\n            e.setName(newName);\n        }\n        rename(e.getChildren(), oldName, newName);\n    }\n}", "outputFileName":"xml_subtyping.out", "output":"bal run xml_subtyping.bal\nHello World\ntrue\ntrue\nfalse\n<p>Hello<\/p><q>World<\/q>\n<p>Hello<\/p><r>World<\/r>"}], "description":"\/\/ An `xml` value belongs to `xml:Element` if it consists of just an element\n\/\/ item. Similarly for `xml:Comment` and `xml:ProcessingInstruction`.\n\/\/ An `xml` value belongs to `xml:Text` if it consists of a text item or is \n\/\/ empty.\n\/\/ An `xml` value belongs to the type `xml<T>` if each of its members belong \n\/\/ to `T`.\n\/\/ Functions in lang.xml use this to provide safe and convenient typing.\n\/\/ For example, `x.elements()` returns element items in `x` as type \n\/\/ `xml<xml:Element>` and `e.getName()` and `e.setName()` are defined when \n\/\/ `e` has type `xml:Element`.", "metatags":"description: This BBE demonstrates XML subtyping\nkeywords: ballerina, ballerina by example, bbe, xml, xml subtyping"}, {"bbeName":"xml-templates", "resources":[{"tag":"templates", "balFileName":"xml_templates.bal", "bal":"import ballerina\/io;\n\nstring url = \"https:\/\/ballerina.io\";\n\nxml content = \n    \/\/ `xml` values can be constructed using an XML template expression.\n    \/\/ Attribute values can have `string` values as interpolated expressions.\n    xml `<a href=\"${url}\">Ballerina<\/a> is an <em>exciting<\/em> new language!`;\n\n\/\/ Interpolated expressions can also be in content (`xml` or `string` values).\nxml p = xml `<p>${content}<\/p>`;\n\npublic function main() {\n    io:println(content);\n    io:println(p);\n}", "outputFileName":"xml_templates.out", "output":"bal run xml_templates.bal\n<a href=\"https:\/\/ballerina.io\">Ballerina<\/a> is an <em>exciting<\/em> new language!\n<p><a href=\"https:\/\/ballerina.io\">Ballerina<\/a> is an <em>exciting<\/em> new language!<\/p>"}], "description":"\/\/ `xml` values can be constructed using an XML template expression.\n\/\/ Phase 2 processing for `xml` template tag parses strings using \n\/\/ the XML 1.0 Recommendation's grammar for content (what XML allows \n\/\/ between a start-tag and an end-tag).\n\/\/ Interpolated expressions can be in content (`xml` or `string` values) \n\/\/ or in attribute values (`string` values).", "metatags":"description: This BBE demonstrates XML templates in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, xml, xml template"}, {"bbeName":"xml-templates-and-query", "resources":[{"tag":"query", "balFileName":"xml_templates_and_query.bal", "bal":"import ballerina\/io;\n\ntype Person record {|\n    string name;\n    string country;\n|};\n\nfunction personsToXml(Person[] persons) returns xml {\n    \/\/ Uses a template containing a query expression, which also contains a template.\n    return xml`<data>${from var {name, country} in persons\n           select xml`<person country=\"${country}\">${name}<\/person>`}<\/data>`;\n\n}\n\npublic function main() {\n    Person[] persons = [\n        {name: \"Jane\", country: \"USA\"},\n        {name: \"Mike\", country: \"Germany\"}\n    ];\n    io:println(personsToXml(persons));\n}", "outputFileName":"xml_templates_and_query.out", "output":"bal run xml_templates_and_query.bal\n<data><person country=\"USA\">Jane<\/person><person country=\"Germany\">Mike<\/person><\/data>"}], "description":"\/\/ XML templates can be combined with queries (e.g., you can have a template containing a query expression, which\n\/\/ also contains a template).", "metatags":"description: This BBE demonstrates the use of XML templates and queries in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, xml templates, query"}, {"bbeName":"xmlns-declarations", "resources":[{"tag":"declarations", "balFileName":"xmlns_declarations.bal", "bal":"\/\/ The identifier followed by the `as` keyword is the prefix bound\n\/\/ to this namespace name.\nxmlns \"http:\/\/example.com\" as eg;\n\nxml x = xml`<eg:doc>Hello<\/eg:doc>`;\n\nxmlns \"http:\/\/example.com\" as ex;\n\n\/\/ `b` will be `true`.\nboolean b = (x === x.<ex:doc>);\n\n\/\/ `exdoc` will be `{http:\/\/example.com}doc`.\nstring exdoc = ex:doc;", "outputFileName":"xmlns_declarations.out", "output":"bal run xmlns_declarations.bal"}], "description":"\/\/ The `xmlns` declarations are like import declarations, but bind the prefix to a namespace URL rather than\n\/\/ a module. The `xmlns` declarations in the Ballerina module provide namespace context for parsing `xml`\n\/\/ templates. The Qualified names in Ballerina modules are expanded into `strings` using the `xmlns`\n\/\/ declarations in the module. The `xmlns` declarations are also allowed at block level.", "metatags":"description: This BBE demonstrates xmlns declarations in Ballerina.\nkeywords: ballerina, ballerina by example, bbe, xmlns declarations"}, {"bbeName":"xslt-transformation", "resources":[{"tag":"transformation", "balFileName":"xslt_transformation.bal", "bal":"import ballerina\/io;\nimport ballerina\/xslt;\n\npublic function main() returns error? {\n    \/\/ Gets an `XML` value, which needs to be transformed.\n    xml sourceXml = getXml();\n    \/\/ Gets an `XSL` style sheet represented in an XML value.\n    xml xsl = getXsl();\n    \/\/ [Transforms](https:\/\/docs.central.ballerina.io\/ballerina\/xslt\/latest\/functions#transform) the `XML` content to another format.\n    xml target = check xslt:transform(sourceXml, xsl);\n    \n    io:println(\"Transformed XML: \", target);\n}\n\n\/\/ Returns an `XML` element, which needs to be transformed.\nfunction getXml() returns xml {\n    return xml `<samples>\n                    <song>\n                        <title>Summer of 69<\/title>\n                        <artist>Bryan Adams<\/artist>\n                        <country>Canada<\/country>\n                        <year>1984<\/year>\n                    <\/song>\n                    <song>\n                        <title>Zombie<\/title>\n                        <artist>Bad Wolves<\/artist>\n                        <country>USA<\/country>\n                        <year>2018<\/year>\n                    <\/song>\n                <\/samples>`;\n}\n\n\/\/ Returns an `XSL` style sheet represented by an XML element.\nfunction getXsl() returns xml {\n    return xml\n        `<xsl:stylesheet version=\"1.0\" \n                         xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\">\n            <xsl:template match=\"\/\">\n                <html>\n                    <body>\n                        <h2>All time favourites<\/h2>\n                        <table border=\"1\">\n                            <tr bgcolor=\"#9acd33\">\n                                <th>Title<\/th>\n                                <th>Artist<\/th>\n                            <\/tr>\n                        <xsl:for-each select=\"samples\/song\">\n                            <tr>\n                                <td>\n                                    <xsl:value-of select=\"title\"\/>\n                                <\/td>\n                                <td>\n                                    <xsl:value-of select=\"artist\"\/>\n                                <\/td>\n                            <\/tr>\n                        <\/xsl:for-each>\n                        <\/table>\n                    <\/body>\n                <\/html>\n            <\/xsl:template>\n        <\/xsl:stylesheet>`;\n}", "outputFileName":"xslt_transformation.out", "output":"bal run xslt_transformation.bal\nTransformed XML: <html>\n<body>\n<h2>All time favourites<\/h2>\n<table border=\"1\">\n<tr bgcolor=\"#9acd33\">\n<th>Title<\/th><th>Artist<\/th>\n<\/tr>\n<tr>\n<td>Summer of 69<\/td><td>Bryan Adams<\/td>\n<\/tr>\n<tr>\n<td>Zombie<\/td><td>Bad Wolves<\/td>\n<\/tr>\n<\/table>\n<\/body>\n<\/html>"}], "description":"\/\/ This example demonstrates how XML content can be transformed to HTML using a given XSL transformation.\n\/\/ For more information on the underlying module,\n\/\/ see the [XSLT module](https:\/\/docs.central.ballerina.io\/ballerina\/xslt\/latest\/).", "metatags":"description: This BBE demonstrates how the XML content can be transformed into HTML using a given XSL transformation.\nkeywords: ballerina, ballerina by example, bbe, xslt, xml, html, xsl, transformation"}]}